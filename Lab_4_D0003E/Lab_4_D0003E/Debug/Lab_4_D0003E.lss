
Lab_4_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00002136  000021ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002136  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800114  00800114  000021de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c61  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001077  00000000  00000000  000050f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017a6  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b98  00000000  00000000  00007910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092d  00000000  00000000  000084a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034f8  00000000  00000000  00008dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 ac 04 	jmp	0x958	; 0x958 <__vector_1>
       8:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_2>
       c:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_3>
      10:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__vector_4>
      14:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__vector_9>
      28:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__vector_10>
      2c:	0c 94 34 07 	jmp	0xe68	; 0xe68 <__vector_11>
      30:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__vector_12>
      34:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__vector_13>
      38:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__vector_14>
      3c:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_15>
      40:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__vector_16>
      44:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__vector_17>
      48:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_18>
      4c:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <__vector_19>
      50:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_20>
      54:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_21>
      58:	0c 94 d8 0b 	jmp	0x17b0	; 0x17b0 <__vector_22>
      5c:	63 00       	.word	0x0063	; ????
      5e:	b4 00       	.word	0x00b4	; ????
      60:	bd 00       	.word	0x00bd	; ????
      62:	c6 00       	.word	0x00c6	; ????
      64:	cf 00       	.word	0x00cf	; ????
      66:	d8 00       	.word	0x00d8	; ????
      68:	e1 00       	.word	0x00e1	; ????
      6a:	ea 00       	.word	0x00ea	; ????
      6c:	f3 00       	.word	0x00f3	; ????
      6e:	fc 00       	.word	0x00fc	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e3       	ldi	r30, 0x36	; 54
      84:	f1 e2       	ldi	r31, 0x21	; 33
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 31       	cpi	r26, 0x14	; 20
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a4 e1       	ldi	r26, 0x14	; 20
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a7 36       	cpi	r26, 0x67	; 103
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 29 03 	call	0x652	; 0x652 <main>
      a6:	0c 94 99 10 	jmp	0x2132	; 0x2132 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <writeChar>:
// .c for a dedicated writer

#include "DediWriter.h"

void writeChar(char ch, int pos){
	DISABLE;
      ae:	78 94       	sei
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	f0 97       	sbiw	r30, 0x30	; 48
      b6:	ea 30       	cpi	r30, 0x0A	; 10
      b8:	f1 05       	cpc	r31, r1
      ba:	08 f0       	brcs	.+2      	; 0xbe <writeChar+0x10>
      bc:	54 c0       	rjmp	.+168    	; 0x166 <writeChar+0xb8>
      be:	e2 5d       	subi	r30, 0xD2	; 210
      c0:	ff 4f       	sbci	r31, 0xFF	; 255
      c2:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
      ca:	45 e0       	ldi	r20, 0x05	; 5
      cc:	50 e0       	ldi	r21, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
      ce:	e5 e0       	ldi	r30, 0x05	; 5
      d0:	f0 e0       	ldi	r31, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
      d6:	62 30       	cpi	r22, 0x02	; 2
      d8:	71 05       	cpc	r23, r1
      da:	09 f4       	brne	.+2      	; 0xde <writeChar+0x30>
      dc:	3a c1       	rjmp	.+628    	; 0x352 <writeChar+0x2a4>
      de:	0c f4       	brge	.+2      	; 0xe2 <writeChar+0x34>
      e0:	94 c0       	rjmp	.+296    	; 0x20a <writeChar+0x15c>
      e2:	64 30       	cpi	r22, 0x04	; 4
      e4:	71 05       	cpc	r23, r1
      e6:	09 f4       	brne	.+2      	; 0xea <writeChar+0x3c>
      e8:	c9 c0       	rjmp	.+402    	; 0x27c <writeChar+0x1ce>
      ea:	0c f4       	brge	.+2      	; 0xee <writeChar+0x40>
      ec:	01 c1       	rjmp	.+514    	; 0x2f0 <writeChar+0x242>
      ee:	65 30       	cpi	r22, 0x05	; 5
      f0:	71 05       	cpc	r23, r1
      f2:	c1 f5       	brne	.+112    	; 0x164 <writeChar+0xb6>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
      f4:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
      f8:	6f 76       	andi	r22, 0x6F	; 111
      fa:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
      fe:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     102:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
     104:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     108:	82 95       	swap	r24
     10a:	92 95       	swap	r25
     10c:	90 7f       	andi	r25, 0xF0	; 240
     10e:	98 27       	eor	r25, r24
     110:	80 7f       	andi	r24, 0xF0	; 240
     112:	98 27       	eor	r25, r24
     114:	86 2b       	or	r24, r22
     116:	87 2b       	or	r24, r23
     118:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     11c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     120:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     122:	e2 95       	swap	r30
     124:	f2 95       	swap	r31
     126:	f0 7f       	andi	r31, 0xF0	; 240
     128:	fe 27       	eor	r31, r30
     12a:	e0 7f       	andi	r30, 0xF0	; 240
     12c:	fe 27       	eor	r31, r30
     12e:	e8 2b       	or	r30, r24
     130:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     134:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     138:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     13a:	42 95       	swap	r20
     13c:	52 95       	swap	r21
     13e:	50 7f       	andi	r21, 0xF0	; 240
     140:	54 27       	eor	r21, r20
     142:	40 7f       	andi	r20, 0xF0	; 240
     144:	54 27       	eor	r21, r20
     146:	48 2b       	or	r20, r24
     148:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     14c:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     150:	8f 70       	andi	r24, 0x0F	; 15
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     152:	22 95       	swap	r18
     154:	32 95       	swap	r19
     156:	30 7f       	andi	r19, 0xF0	; 240
     158:	32 27       	eor	r19, r18
     15a:	20 7f       	andi	r18, 0xF0	; 240
     15c:	32 27       	eor	r19, r18
     15e:	28 2b       	or	r18, r24
     160:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
	default:
		ENABLE;
		return;
	}
	ENABLE;
     164:	f8 94       	cli
     166:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     16c:	41 e0       	ldi	r20, 0x01	; 1
     16e:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
     170:	e1 e0       	ldi	r30, 0x01	; 1
     172:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	ae cf       	rjmp	.-164    	; 0xd6 <writeChar+0x28>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
     17e:	4e e0       	ldi	r20, 0x0E	; 14
     180:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     182:	e1 e0       	ldi	r30, 0x01	; 1
     184:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
     18a:	a5 cf       	rjmp	.-182    	; 0xd6 <writeChar+0x28>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
     190:	4b e0       	ldi	r20, 0x0B	; 11
     192:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     194:	e1 e0       	ldi	r30, 0x01	; 1
     196:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     19c:	9c cf       	rjmp	.-200    	; 0xd6 <writeChar+0x28>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1a2:	4b e0       	ldi	r20, 0x0B	; 11
     1a4:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
     1a6:	e5 e0       	ldi	r30, 0x05	; 5
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
     1ae:	93 cf       	rjmp	.-218    	; 0xd6 <writeChar+0x28>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
     1b4:	4b e0       	ldi	r20, 0x0B	; 11
     1b6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1b8:	e4 e0       	ldi	r30, 0x04	; 4
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     1c0:	8a cf       	rjmp	.-236    	; 0xd6 <writeChar+0x28>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
     1c6:	4f e0       	ldi	r20, 0x0F	; 15
     1c8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1ca:	e4 e0       	ldi	r30, 0x04	; 4
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1d2:	81 cf       	rjmp	.-254    	; 0xd6 <writeChar+0x28>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     1dc:	e1 e0       	ldi	r30, 0x01	; 1
     1de:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
     1e4:	78 cf       	rjmp	.-272    	; 0xd6 <writeChar+0x28>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
     1ea:	4f e0       	ldi	r20, 0x0F	; 15
     1ec:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     1ee:	e5 e0       	ldi	r30, 0x05	; 5
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1f6:	6f cf       	rjmp	.-290    	; 0xd6 <writeChar+0x28>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1fc:	4b e0       	ldi	r20, 0x0B	; 11
     1fe:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     200:	e5 e0       	ldi	r30, 0x05	; 5
     202:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     208:	66 cf       	rjmp	.-308    	; 0xd6 <writeChar+0x28>
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
     20a:	61 15       	cp	r22, r1
     20c:	71 05       	cpc	r23, r1
     20e:	09 f4       	brne	.+2      	; 0x212 <writeChar+0x164>
     210:	56 c0       	rjmp	.+172    	; 0x2be <writeChar+0x210>
     212:	61 30       	cpi	r22, 0x01	; 1
     214:	71 05       	cpc	r23, r1
     216:	09 f0       	breq	.+2      	; 0x21a <writeChar+0x16c>
     218:	a5 cf       	rjmp	.-182    	; 0x164 <writeChar+0xb6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     21a:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     21e:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     220:	82 95       	swap	r24
     222:	92 95       	swap	r25
     224:	90 7f       	andi	r25, 0xF0	; 240
     226:	98 27       	eor	r25, r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	98 27       	eor	r25, r24
     22c:	86 2b       	or	r24, r22
     22e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     232:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     236:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     238:	e2 95       	swap	r30
     23a:	f2 95       	swap	r31
     23c:	f0 7f       	andi	r31, 0xF0	; 240
     23e:	fe 27       	eor	r31, r30
     240:	e0 7f       	andi	r30, 0xF0	; 240
     242:	fe 27       	eor	r31, r30
     244:	e8 2b       	or	r30, r24
     246:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     24a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     24e:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     250:	42 95       	swap	r20
     252:	52 95       	swap	r21
     254:	50 7f       	andi	r21, 0xF0	; 240
     256:	54 27       	eor	r21, r20
     258:	40 7f       	andi	r20, 0xF0	; 240
     25a:	54 27       	eor	r21, r20
     25c:	48 2b       	or	r20, r24
     25e:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     262:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     266:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     268:	22 95       	swap	r18
     26a:	32 95       	swap	r19
     26c:	30 7f       	andi	r19, 0xF0	; 240
     26e:	32 27       	eor	r19, r18
     270:	20 7f       	andi	r18, 0xF0	; 240
     272:	32 27       	eor	r19, r18
     274:	28 2b       	or	r18, r24
     276:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     27a:	74 cf       	rjmp	.-280    	; 0x164 <writeChar+0xb6>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
     27c:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     280:	66 7f       	andi	r22, 0xF6	; 246
     282:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     286:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     28a:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     28c:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     290:	86 2b       	or	r24, r22
     292:	87 2b       	or	r24, r23
     294:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     298:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     29c:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     29e:	e8 2b       	or	r30, r24
     2a0:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     2a4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2a8:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     2aa:	48 2b       	or	r20, r24
     2ac:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     2b0:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2b4:	80 7f       	andi	r24, 0xF0	; 240
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     2b6:	28 2b       	or	r18, r24
     2b8:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
     2bc:	53 cf       	rjmp	.-346    	; 0x164 <writeChar+0xb6>
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     2be:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2c2:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     2c4:	86 2b       	or	r24, r22
     2c6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     2ca:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2ce:	80 7f       	andi	r24, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     2d0:	e8 2b       	or	r30, r24
     2d2:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     2d6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2da:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     2dc:	48 2b       	or	r20, r24
     2de:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     2e2:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2e6:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     2e8:	28 2b       	or	r18, r24
     2ea:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     2ee:	3a cf       	rjmp	.-396    	; 0x164 <writeChar+0xb6>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2f0:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2f4:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2f6:	82 95       	swap	r24
     2f8:	92 95       	swap	r25
     2fa:	90 7f       	andi	r25, 0xF0	; 240
     2fc:	98 27       	eor	r25, r24
     2fe:	80 7f       	andi	r24, 0xF0	; 240
     300:	98 27       	eor	r25, r24
     302:	86 2b       	or	r24, r22
     304:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     308:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     30c:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     30e:	e2 95       	swap	r30
     310:	f2 95       	swap	r31
     312:	f0 7f       	andi	r31, 0xF0	; 240
     314:	fe 27       	eor	r31, r30
     316:	e0 7f       	andi	r30, 0xF0	; 240
     318:	fe 27       	eor	r31, r30
     31a:	e8 2b       	or	r30, r24
     31c:	e0 93 f2 00 	sts	0x00F2, r30	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     320:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     324:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     326:	42 95       	swap	r20
     328:	52 95       	swap	r21
     32a:	50 7f       	andi	r21, 0xF0	; 240
     32c:	54 27       	eor	r21, r20
     32e:	40 7f       	andi	r20, 0xF0	; 240
     330:	54 27       	eor	r21, r20
     332:	48 2b       	or	r20, r24
     334:	40 93 f7 00 	sts	0x00F7, r20	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     338:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     33c:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     33e:	22 95       	swap	r18
     340:	32 95       	swap	r19
     342:	30 7f       	andi	r19, 0xF0	; 240
     344:	32 27       	eor	r19, r18
     346:	20 7f       	andi	r18, 0xF0	; 240
     348:	32 27       	eor	r19, r18
     34a:	28 2b       	or	r18, r24
     34c:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     350:	09 cf       	rjmp	.-494    	; 0x164 <writeChar+0xb6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     352:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     356:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     358:	86 2b       	or	r24, r22
     35a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     35e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     362:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     364:	e8 2b       	or	r30, r24
     366:	e0 93 f2 00 	sts	0x00F2, r30	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     36a:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     36e:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     370:	48 2b       	or	r20, r24
     372:	40 93 f7 00 	sts	0x00F7, r20	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     376:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     37a:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     37c:	28 2b       	or	r18, r24
     37e:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     382:	f0 ce       	rjmp	.-544    	; 0x164 <writeChar+0xb6>

00000384 <printActivePulse>:
		self->activePulse = self->p;
	}
}


void printActivePulse(GUI *self) {
     384:	cf 92       	push	r12
     386:	df 92       	push	r13
     388:	ef 92       	push	r14
     38a:	ff 92       	push	r15
     38c:	0f 93       	push	r16
     38e:	1f 93       	push	r17
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	ec 01       	movw	r28, r24
	//ASYNC(&self->p, addFreq, NULL);
	if (self->activePulse.iD == 0) {
     396:	8e a1       	ldd	r24, Y+38	; 0x26
     398:	9f a1       	ldd	r25, Y+39	; 0x27
     39a:	89 2b       	or	r24, r25
     39c:	89 f1       	breq	.+98     	; 0x400 <__LOCK_REGION_LENGTH__>
		LCDDR2 &= 0x9F;
		LCDDR2 |= 0x06;
	} else {
		LCDDR2 &= 0xF9;
     39e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     3a2:	89 7f       	andi	r24, 0xF9	; 249
     3a4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= 0x60;
     3a8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     3ac:	80 66       	ori	r24, 0x60	; 96
     3ae:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	}
	ASYNC(&self->p, printAt, 0);
     3b2:	8e 01       	movw	r16, r28
     3b4:	0c 5f       	subi	r16, 0xFC	; 252
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	c1 2c       	mov	r12, r1
     3ba:	d1 2c       	mov	r13, r1
     3bc:	8e ea       	ldi	r24, 0xAE	; 174
     3be:	e8 2e       	mov	r14, r24
     3c0:	83 e0       	ldi	r24, 0x03	; 3
     3c2:	f8 2e       	mov	r15, r24
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	a9 01       	movw	r20, r18
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	cb 01       	movw	r24, r22
     3d0:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
	ASYNC(&self->q, printAt, 4);
     3d4:	04 5f       	subi	r16, 0xF4	; 244
     3d6:	1f 4f       	sbci	r17, 0xFF	; 255
     3d8:	94 e0       	ldi	r25, 0x04	; 4
     3da:	c9 2e       	mov	r12, r25
     3dc:	d1 2c       	mov	r13, r1
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	a9 01       	movw	r20, r18
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	cb 01       	movw	r24, r22
     3ea:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
}
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	df 90       	pop	r13
     3fc:	cf 90       	pop	r12
     3fe:	08 95       	ret


void printActivePulse(GUI *self) {
	//ASYNC(&self->p, addFreq, NULL);
	if (self->activePulse.iD == 0) {
		LCDDR2 &= 0x9F;
     400:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     404:	8f 79       	andi	r24, 0x9F	; 159
     406:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= 0x06;
     40a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     40e:	86 60       	ori	r24, 0x06	; 6
     410:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     414:	ce cf       	rjmp	.-100    	; 0x3b2 <printActivePulse+0x2e>

00000416 <pressing>:
			ASYNC(self, printActivePulse, NULL);
		}
	}
}

void pressing(GUI *self) {
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	ec 01       	movw	r28, r24
	if (self->heldU == false || self->heldD == false) {
     428:	89 a5       	ldd	r24, Y+41	; 0x29
     42a:	88 23       	and	r24, r24
     42c:	19 f0       	breq	.+6      	; 0x434 <pressing+0x1e>
     42e:	88 a5       	ldd	r24, Y+40	; 0x28
     430:	81 11       	cpse	r24, r1
     432:	22 c0       	rjmp	.+68     	; 0x478 <pressing+0x62>
		if (((PINB >> 6) & 1) == 0) {self->heldU = true; }
     434:	1e 9b       	sbis	0x03, 6	; 3
     436:	1d c0       	rjmp	.+58     	; 0x472 <pressing+0x5c>
		else if (((PINB >> 7) & 1) == 0) {self->heldD = true; }
     438:	1f 99       	sbic	0x03, 7	; 3
     43a:	02 c0       	rjmp	.+4      	; 0x440 <pressing+0x2a>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	88 a7       	std	Y+40, r24	; 0x28
		AFTER(MSEC(500), self, pressing, NULL);
     440:	c1 2c       	mov	r12, r1
     442:	d1 2c       	mov	r13, r1
     444:	2b e0       	ldi	r18, 0x0B	; 11
     446:	e2 2e       	mov	r14, r18
     448:	22 e0       	ldi	r18, 0x02	; 2
     44a:	f2 2e       	mov	r15, r18
     44c:	8e 01       	movw	r16, r28
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	a9 01       	movw	r20, r18
     454:	69 e0       	ldi	r22, 0x09	; 9
     456:	7d e3       	ldi	r23, 0x3D	; 61
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
		} else {
			self->heldU = false;
			self->heldD = false;
		}
	}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	cf 90       	pop	r12
     470:	08 95       	ret
	}
}

void pressing(GUI *self) {
	if (self->heldU == false || self->heldD == false) {
		if (((PINB >> 6) & 1) == 0) {self->heldU = true; }
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	89 a7       	std	Y+41, r24	; 0x29
     476:	e4 cf       	rjmp	.-56     	; 0x440 <pressing+0x2a>
		else if (((PINB >> 7) & 1) == 0) {self->heldD = true; }
		AFTER(MSEC(500), self, pressing, NULL);
		return;
	} else if (self->heldU || self->heldD) {
		if (((PINB >> 6) & 1) == 0 && self->heldU) {
     478:	1e 9b       	sbis	0x03, 6	; 3
     47a:	02 c0       	rjmp	.+4      	; 0x480 <pressing+0x6a>
			SYNC(&self->activePulse, addFreq, NULL);
			ASYNC(self, printActivePulse, NULL);
			AFTER(MSEC(100), self, pressing, NULL);
			return;
		} else if (((PINB >> 7) & 1) == 0 && self->heldD) {
     47c:	1f 99       	sbic	0x03, 7	; 3
     47e:	25 c0       	rjmp	.+74     	; 0x4ca <pressing+0xb4>
		else if (((PINB >> 7) & 1) == 0) {self->heldD = true; }
		AFTER(MSEC(500), self, pressing, NULL);
		return;
	} else if (self->heldU || self->heldD) {
		if (((PINB >> 6) & 1) == 0 && self->heldU) {
			SYNC(&self->activePulse, addFreq, NULL);
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	6f e8       	ldi	r22, 0x8F	; 143
     486:	73 e0       	ldi	r23, 0x03	; 3
     488:	ce 01       	movw	r24, r28
     48a:	4c 96       	adiw	r24, 0x1c	; 28
     48c:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <sync>
			ASYNC(self, printActivePulse, NULL);
     490:	c1 2c       	mov	r12, r1
     492:	d1 2c       	mov	r13, r1
     494:	82 ec       	ldi	r24, 0xC2	; 194
     496:	e8 2e       	mov	r14, r24
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	f8 2e       	mov	r15, r24
     49c:	8e 01       	movw	r16, r28
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	a9 01       	movw	r20, r18
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	cb 01       	movw	r24, r22
     4aa:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
			AFTER(MSEC(100), self, pressing, NULL);
     4ae:	9b e0       	ldi	r25, 0x0B	; 11
     4b0:	e9 2e       	mov	r14, r25
     4b2:	92 e0       	ldi	r25, 0x02	; 2
     4b4:	f9 2e       	mov	r15, r25
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	a9 01       	movw	r20, r18
     4bc:	65 e3       	ldi	r22, 0x35	; 53
     4be:	7c e0       	ldi	r23, 0x0C	; 12
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
			return;
     4c8:	cb cf       	rjmp	.-106    	; 0x460 <pressing+0x4a>
			SYNC(&self->activePulse, addFreq, NULL);
			ASYNC(self, printActivePulse, NULL);
			AFTER(MSEC(100), self, pressing, NULL);
			return;
		} else {
			self->heldU = false;
     4ca:	19 a6       	std	Y+41, r1	; 0x29
			self->heldD = false;
     4cc:	18 a6       	std	Y+40, r1	; 0x28
     4ce:	c8 cf       	rjmp	.-112    	; 0x460 <pressing+0x4a>

000004d0 <switchPulse>:
 */ 

#include "GUI.h"

void switchPulse(GUI *self) {
	if (self->activePulse.iD == 0) {
     4d0:	fc 01       	movw	r30, r24
     4d2:	26 a1       	ldd	r18, Z+38	; 0x26
     4d4:	37 a1       	ldd	r19, Z+39	; 0x27
     4d6:	23 2b       	or	r18, r19
     4d8:	51 f0       	breq	.+20     	; 0x4ee <switchPulse+0x1e>
		self->activePulse = self->q;
	} else {
		self->activePulse = self->p;
     4da:	2c e0       	ldi	r18, 0x0C	; 12
     4dc:	fc 01       	movw	r30, r24
     4de:	34 96       	adiw	r30, 0x04	; 4
     4e0:	dc 01       	movw	r26, r24
     4e2:	5c 96       	adiw	r26, 0x1c	; 28
     4e4:	01 90       	ld	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	2a 95       	dec	r18
     4ea:	e1 f7       	brne	.-8      	; 0x4e4 <switchPulse+0x14>
     4ec:	08 95       	ret

#include "GUI.h"

void switchPulse(GUI *self) {
	if (self->activePulse.iD == 0) {
		self->activePulse = self->q;
     4ee:	2c e0       	ldi	r18, 0x0C	; 12
     4f0:	70 96       	adiw	r30, 0x10	; 16
     4f2:	dc 01       	movw	r26, r24
     4f4:	5c 96       	adiw	r26, 0x1c	; 28
     4f6:	01 90       	ld	r0, Z+
     4f8:	0d 92       	st	X+, r0
     4fa:	2a 95       	dec	r18
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <switchPulse+0x26>
     4fe:	08 95       	ret

00000500 <interHandlerSwitch>:
	}
	ASYNC(&self->p, printAt, 0);
	ASYNC(&self->q, printAt, 4);
}

void interHandlerSwitch(GUI *self, int arg) {
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	8c 01       	movw	r16, r24
	//printAt(11, 2);
	if (((PINE >> 2) & 1) == 0 || ((PINE >> 3) & 1) == 0) {
     50e:	62 9b       	sbis	0x0c, 2	; 12
     510:	02 c0       	rjmp	.+4      	; 0x516 <interHandlerSwitch+0x16>
     512:	63 99       	sbic	0x0c, 3	; 12
     514:	07 c0       	rjmp	.+14     	; 0x524 <interHandlerSwitch+0x24>
		SYNC(self, switchPulse, NULL);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	68 e6       	ldi	r22, 0x68	; 104
     51c:	72 e0       	ldi	r23, 0x02	; 2
     51e:	c8 01       	movw	r24, r16
     520:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <sync>
	}
	ASYNC(self, printActivePulse, NULL);
     524:	c1 2c       	mov	r12, r1
     526:	d1 2c       	mov	r13, r1
     528:	82 ec       	ldi	r24, 0xC2	; 194
     52a:	e8 2e       	mov	r14, r24
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	f8 2e       	mov	r15, r24
     530:	20 e0       	ldi	r18, 0x00	; 0
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	a9 01       	movw	r20, r18
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	cb 01       	movw	r24, r22
     53c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
}
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	08 95       	ret

0000054e <interHandlerFreq>:

void interHandlerFreq(GUI *self, int arg) {
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24
	if (((PINB >> 6) & 1) == 0) {
     560:	1e 9b       	sbis	0x03, 6	; 3
     562:	30 c0       	rjmp	.+96     	; 0x5c4 <interHandlerFreq+0x76>
		//printAt(99, 2);
		SYNC(&self->activePulse, addFreq, NULL);
		ASYNC(self, pressing, NULL);
		ASYNC(self, printActivePulse, NULL);
		return;
	} else if (((PINB >> 7) & 1) == 0) {
     564:	1f 9b       	sbis	0x03, 7	; 3
     566:	54 c0       	rjmp	.+168    	; 0x610 <interHandlerFreq+0xc2>
		SYNC(&self->activePulse, subFreq, NULL);
		ASYNC(self, pressing, NULL);
		ASYNC(self, printActivePulse, NULL);
		return;
	} else if (((PINB >> 4) & 1) == 0) {
     568:	1c 9b       	sbis	0x03, 4	; 3
     56a:	09 c0       	rjmp	.+18     	; 0x57e <interHandlerFreq+0x30>
		else {
			SYNC(&self->activePulse, restoreFreq, NULL);
			ASYNC(self, printActivePulse, NULL);
		}
	}
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	df 90       	pop	r13
     57a:	cf 90       	pop	r12
     57c:	08 95       	ret
		SYNC(&self->activePulse, subFreq, NULL);
		ASYNC(self, pressing, NULL);
		ASYNC(self, printActivePulse, NULL);
		return;
	} else if (((PINB >> 4) & 1) == 0) {
		if (SYNC(&self->activePulse, getFreq, NULL) != 0) {
     57e:	8c 01       	movw	r16, r24
     580:	04 5e       	subi	r16, 0xE4	; 228
     582:	1f 4f       	sbci	r17, 0xFF	; 255
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	50 e0       	ldi	r21, 0x00	; 0
     588:	6a ea       	ldi	r22, 0xAA	; 170
     58a:	73 e0       	ldi	r23, 0x03	; 3
     58c:	c8 01       	movw	r24, r16
     58e:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <sync>
			SYNC(&self->activePulse, storeFreq, NULL);
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
		SYNC(&self->activePulse, subFreq, NULL);
		ASYNC(self, pressing, NULL);
		ASYNC(self, printActivePulse, NULL);
		return;
	} else if (((PINB >> 4) & 1) == 0) {
		if (SYNC(&self->activePulse, getFreq, NULL) != 0) {
     596:	89 2b       	or	r24, r25
     598:	c1 f5       	brne	.+112    	; 0x60a <interHandlerFreq+0xbc>
			SYNC(&self->activePulse, storeFreq, NULL);
			ASYNC(self, printActivePulse, NULL);
		}
		else {
			SYNC(&self->activePulse, restoreFreq, NULL);
     59a:	62 ea       	ldi	r22, 0xA2	; 162
     59c:	73 e0       	ldi	r23, 0x03	; 3
     59e:	c8 01       	movw	r24, r16
     5a0:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <sync>
			ASYNC(self, printActivePulse, NULL);
     5a4:	c1 2c       	mov	r12, r1
     5a6:	d1 2c       	mov	r13, r1
     5a8:	82 ec       	ldi	r24, 0xC2	; 194
     5aa:	e8 2e       	mov	r14, r24
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	f8 2e       	mov	r15, r24
     5b0:	8e 01       	movw	r16, r28
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	a9 01       	movw	r20, r18
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	cb 01       	movw	r24, r22
     5be:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
     5c2:	d4 cf       	rjmp	.-88     	; 0x56c <interHandlerFreq+0x1e>
}

void interHandlerFreq(GUI *self, int arg) {
	if (((PINB >> 6) & 1) == 0) {
		//printAt(99, 2);
		SYNC(&self->activePulse, addFreq, NULL);
     5c4:	40 e0       	ldi	r20, 0x00	; 0
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	6f e8       	ldi	r22, 0x8F	; 143
     5ca:	73 e0       	ldi	r23, 0x03	; 3
		ASYNC(self, pressing, NULL);
		ASYNC(self, printActivePulse, NULL);
		return;
	} else if (((PINB >> 7) & 1) == 0) {
		SYNC(&self->activePulse, subFreq, NULL);
     5cc:	4c 96       	adiw	r24, 0x1c	; 28
     5ce:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <sync>
		ASYNC(self, pressing, NULL);
     5d2:	c1 2c       	mov	r12, r1
     5d4:	d1 2c       	mov	r13, r1
     5d6:	9b e0       	ldi	r25, 0x0B	; 11
     5d8:	e9 2e       	mov	r14, r25
     5da:	92 e0       	ldi	r25, 0x02	; 2
     5dc:	f9 2e       	mov	r15, r25
     5de:	8e 01       	movw	r16, r28
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	a9 01       	movw	r20, r18
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	cb 01       	movw	r24, r22
     5ec:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
		ASYNC(self, printActivePulse, NULL);
     5f0:	22 ec       	ldi	r18, 0xC2	; 194
     5f2:	e2 2e       	mov	r14, r18
     5f4:	21 e0       	ldi	r18, 0x01	; 1
     5f6:	f2 2e       	mov	r15, r18
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	a9 01       	movw	r20, r18
     5fe:	60 e0       	ldi	r22, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	cb 01       	movw	r24, r22
     604:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
		return;
     608:	b1 cf       	rjmp	.-158    	; 0x56c <interHandlerFreq+0x1e>
	} else if (((PINB >> 4) & 1) == 0) {
		if (SYNC(&self->activePulse, getFreq, NULL) != 0) {
			SYNC(&self->activePulse, storeFreq, NULL);
     60a:	6a e9       	ldi	r22, 0x9A	; 154
     60c:	73 e0       	ldi	r23, 0x03	; 3
     60e:	c7 cf       	rjmp	.-114    	; 0x59e <interHandlerFreq+0x50>
		SYNC(&self->activePulse, addFreq, NULL);
		ASYNC(self, pressing, NULL);
		ASYNC(self, printActivePulse, NULL);
		return;
	} else if (((PINB >> 7) & 1) == 0) {
		SYNC(&self->activePulse, subFreq, NULL);
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	64 e8       	ldi	r22, 0x84	; 132
     616:	73 e0       	ldi	r23, 0x03	; 3
     618:	d9 cf       	rjmp	.-78     	; 0x5cc <interHandlerFreq+0x7e>

0000061a <LCDInit>:
#include "LCD.h"
#include "DediWriter.h"

void LCDInit(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
     61a:	86 e3       	ldi	r24, 0x36	; 54
     61c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
     620:	87 e0       	ldi	r24, 0x07	; 7
     622:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
     626:	8f e0       	ldi	r24, 0x0F	; 15
     628:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
     62c:	80 ec       	ldi	r24, 0xC0	; 192
     62e:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
     632:	9d e0       	ldi	r25, 0x0D	; 13
     634:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	PCMSK0 = 0x0c;
     638:	9c e0       	ldi	r25, 0x0C	; 12
     63a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	PCMSK1 = 0xd0;
     63e:	20 ed       	ldi	r18, 0xD0	; 208
     640:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	EIFR = 0xc0;
     644:	8c bb       	out	0x1c, r24	; 28
	EIMSK = 0xc0;
     646:	8d bb       	out	0x1d, r24	; 29
	PORTB = (1 << PB7)|(1 << PB6)|(1 << PB4);
     648:	25 b9       	out	0x05, r18	; 5
	PORTE = (1 << PE3)|(1 << PE2);
     64a:	9e b9       	out	0x0e, r25	; 14
	DDRB = (0<<DDB7)|(0<<DDB6);
     64c:	14 b8       	out	0x04, r1	; 4
	MCUCR = (0 << PUD);
     64e:	15 be       	out	0x35, r1	; 53
     650:	08 95       	ret

00000652 <main>:
#include "LCD.h"
#include <avr/io.h>


int main(void)
{
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	c2 54       	subi	r28, 0x42	; 66
     65c:	d1 09       	sbc	r29, r1
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
	LCDInit();
     668:	0e 94 0d 03 	call	0x61a	; 0x61a <LCDInit>
    pulse p = initPulse(0, 0, 0);
     66c:	ce 01       	movw	r24, r28
     66e:	c7 96       	adiw	r24, 0x37	; 55
     670:	2c e0       	ldi	r18, 0x0C	; 12
     672:	fc 01       	movw	r30, r24
     674:	11 92       	st	Z+, r1
     676:	2a 95       	dec	r18
     678:	e9 f7       	brne	.-6      	; 0x674 <main+0x22>
	pulse q = initPulse(30, 1, 1);
     67a:	2c e0       	ldi	r18, 0x0C	; 12
     67c:	e8 e0       	ldi	r30, 0x08	; 8
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	de 01       	movw	r26, r28
     682:	9b 96       	adiw	r26, 0x2b	; 43
     684:	01 90       	ld	r0, Z+
     686:	0d 92       	st	X+, r0
     688:	2a 95       	dec	r18
     68a:	e1 f7       	brne	.-8      	; 0x684 <main+0x32>
	GUI g = GUI_init(p, q);
     68c:	1a 82       	std	Y+2, r1	; 0x02
     68e:	19 82       	std	Y+1, r1	; 0x01
     690:	1c 82       	std	Y+4, r1	; 0x04
     692:	1b 82       	std	Y+3, r1	; 0x03
     694:	2c e0       	ldi	r18, 0x0C	; 12
     696:	fc 01       	movw	r30, r24
     698:	de 01       	movw	r26, r28
     69a:	15 96       	adiw	r26, 0x05	; 5
     69c:	01 90       	ld	r0, Z+
     69e:	0d 92       	st	X+, r0
     6a0:	2a 95       	dec	r18
     6a2:	e1 f7       	brne	.-8      	; 0x69c <main+0x4a>
     6a4:	2c e0       	ldi	r18, 0x0C	; 12
     6a6:	fe 01       	movw	r30, r28
     6a8:	bb 96       	adiw	r30, 0x2b	; 43
     6aa:	de 01       	movw	r26, r28
     6ac:	51 96       	adiw	r26, 0x11	; 17
     6ae:	01 90       	ld	r0, Z+
     6b0:	0d 92       	st	X+, r0
     6b2:	2a 95       	dec	r18
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <main+0x5c>
     6b6:	2c e0       	ldi	r18, 0x0C	; 12
     6b8:	fc 01       	movw	r30, r24
     6ba:	de 01       	movw	r26, r28
     6bc:	5d 96       	adiw	r26, 0x1d	; 29
     6be:	01 90       	ld	r0, Z+
     6c0:	0d 92       	st	X+, r0
     6c2:	2a 95       	dec	r18
     6c4:	e1 f7       	brne	.-8      	; 0x6be <main+0x6c>
     6c6:	19 a6       	std	Y+41, r1	; 0x29
     6c8:	1a a6       	std	Y+42, r1	; 0x2a
	INSTALL(&g, interHandlerFreq, IRQ_PCINT1);
     6ca:	42 e0       	ldi	r20, 0x02	; 2
     6cc:	67 ea       	ldi	r22, 0xA7	; 167
     6ce:	72 e0       	ldi	r23, 0x02	; 2
     6d0:	c6 97       	sbiw	r24, 0x36	; 54
     6d2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <install>
	INSTALL(&g, interHandlerSwitch, IRQ_PCINT0);
     6d6:	41 e0       	ldi	r20, 0x01	; 1
     6d8:	60 e8       	ldi	r22, 0x80	; 128
     6da:	72 e0       	ldi	r23, 0x02	; 2
     6dc:	ce 01       	movw	r24, r28
     6de:	01 96       	adiw	r24, 0x01	; 1
     6e0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <install>
	return TINYTIMBER(&g, printActivePulse, NULL);
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	62 ec       	ldi	r22, 0xC2	; 194
     6ea:	71 e0       	ldi	r23, 0x01	; 1
     6ec:	ce 01       	movw	r24, r28
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	0e 94 0e 10 	call	0x201c	; 0x201c <tinytimber>
	//addFreq(&q);
	//printAt(getFreq(&p), getPos(&p));
	//printAt(getFreq(&q), getPos(&q));
     6f4:	ce 5b       	subi	r28, 0xBE	; 190
     6f6:	df 4f       	sbci	r29, 0xFF	; 255
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <subFreq>:

#include "LCD.h"


void subFreq(pulse *self) {
	if (self->freq > 0) {
     708:	fc 01       	movw	r30, r24
     70a:	24 81       	ldd	r18, Z+4	; 0x04
     70c:	35 81       	ldd	r19, Z+5	; 0x05
     70e:	12 16       	cp	r1, r18
     710:	13 06       	cpc	r1, r19
     712:	24 f4       	brge	.+8      	; 0x71c <subFreq+0x14>
		self->freq--;
     714:	21 50       	subi	r18, 0x01	; 1
     716:	31 09       	sbc	r19, r1
     718:	35 83       	std	Z+5, r19	; 0x05
     71a:	24 83       	std	Z+4, r18	; 0x04
     71c:	08 95       	ret

0000071e <addFreq>:
	}
}

void addFreq(pulse *self) {
	if (self->freq < 99) {
     71e:	fc 01       	movw	r30, r24
     720:	24 81       	ldd	r18, Z+4	; 0x04
     722:	35 81       	ldd	r19, Z+5	; 0x05
     724:	23 36       	cpi	r18, 0x63	; 99
     726:	31 05       	cpc	r19, r1
     728:	24 f4       	brge	.+8      	; 0x732 <addFreq+0x14>
		self->freq++;
     72a:	2f 5f       	subi	r18, 0xFF	; 255
     72c:	3f 4f       	sbci	r19, 0xFF	; 255
     72e:	35 83       	std	Z+5, r19	; 0x05
     730:	24 83       	std	Z+4, r18	; 0x04
     732:	08 95       	ret

00000734 <storeFreq>:
	}
}

void storeFreq(pulse *self) {
     734:	fc 01       	movw	r30, r24
	self->saved_freq = self->freq;
     736:	84 81       	ldd	r24, Z+4	; 0x04
     738:	95 81       	ldd	r25, Z+5	; 0x05
     73a:	97 83       	std	Z+7, r25	; 0x07
     73c:	86 83       	std	Z+6, r24	; 0x06
	self->freq = 0;
     73e:	15 82       	std	Z+5, r1	; 0x05
     740:	14 82       	std	Z+4, r1	; 0x04
     742:	08 95       	ret

00000744 <restoreFreq>:
}

void restoreFreq(pulse *self) {
     744:	fc 01       	movw	r30, r24
	self->freq = self->saved_freq;
     746:	86 81       	ldd	r24, Z+6	; 0x06
     748:	97 81       	ldd	r25, Z+7	; 0x07
     74a:	95 83       	std	Z+5, r25	; 0x05
     74c:	84 83       	std	Z+4, r24	; 0x04
	self->saved_freq = 0;
     74e:	17 82       	std	Z+7, r1	; 0x07
     750:	16 82       	std	Z+6, r1	; 0x06
     752:	08 95       	ret

00000754 <getFreq>:
	
}

int getFreq(pulse *self) {
	return self->freq;
}
     754:	fc 01       	movw	r30, r24
     756:	84 81       	ldd	r24, Z+4	; 0x04
     758:	95 81       	ldd	r25, Z+5	; 0x05
     75a:	08 95       	ret

0000075c <printAt>:

void printAt(pulse *self, int pos) {
     75c:	ef 92       	push	r14
     75e:	ff 92       	push	r15
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	eb 01       	movw	r28, r22
	int num = self->freq;
     76a:	fc 01       	movw	r30, r24
     76c:	e4 80       	ldd	r14, Z+4	; 0x04
     76e:	f5 80       	ldd	r15, Z+5	; 0x05
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     770:	c7 01       	movw	r24, r14
     772:	64 e6       	ldi	r22, 0x64	; 100
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	0e 94 2a 10 	call	0x2054	; 0x2054 <__divmodhi4>
     77a:	0a e0       	ldi	r16, 0x0A	; 10
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	b8 01       	movw	r22, r16
     780:	0e 94 2a 10 	call	0x2054	; 0x2054 <__divmodhi4>
     784:	86 2f       	mov	r24, r22
     786:	be 01       	movw	r22, r28
     788:	80 5d       	subi	r24, 0xD0	; 208
     78a:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     78e:	21 96       	adiw	r28, 0x01	; 1
     790:	c7 01       	movw	r24, r14
     792:	b8 01       	movw	r22, r16
     794:	0e 94 2a 10 	call	0x2054	; 0x2054 <__divmodhi4>
     798:	be 01       	movw	r22, r28
     79a:	80 5d       	subi	r24, 0xD0	; 208
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
void printAt(pulse *self, int pos) {
	int num = self->freq;
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     7a8:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

000007ac <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <initialize+0x6>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <initialize+0x8>
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	87 e0       	ldi	r24, 0x07	; 7
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	27 ee       	ldi	r18, 0xE7	; 231
     7be:	32 e0       	ldi	r19, 0x02	; 2
     7c0:	fc 01       	movw	r30, r24
     7c2:	70 97       	sbiw	r30, 0x10	; 16
     7c4:	91 83       	std	Z+1, r25	; 0x01
     7c6:	80 83       	st	Z, r24
     7c8:	40 96       	adiw	r24, 0x10	; 16
     7ca:	82 17       	cp	r24, r18
     7cc:	93 07       	cpc	r25, r19
     7ce:	c1 f7       	brne	.-16     	; 0x7c0 <initialize+0x14>
     7d0:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <messages+0xe1>
     7d4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <messages+0xe0>
     7d8:	e2 e4       	ldi	r30, 0x42	; 66
     7da:	f1 e0       	ldi	r31, 0x01	; 1
     7dc:	8f e5       	ldi	r24, 0x5F	; 95
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	91 83       	std	Z+1, r25	; 0x01
     7e2:	80 83       	st	Z, r24
     7e4:	8c e7       	ldi	r24, 0x7C	; 124
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	96 8f       	std	Z+30, r25	; 0x1e
     7ea:	85 8f       	std	Z+29, r24	; 0x1d
     7ec:	a9 e9       	ldi	r26, 0x99	; 153
     7ee:	b1 e0       	ldi	r27, 0x01	; 1
     7f0:	b3 af       	std	Z+59, r27	; 0x3b
     7f2:	a2 af       	std	Z+58, r26	; 0x3a
     7f4:	1d 92       	st	X+, r1
     7f6:	1c 92       	st	X, r1
     7f8:	fa 83       	std	Y+2, r31	; 0x02
     7fa:	e9 83       	std	Y+1, r30	; 0x01
     7fc:	e3 e4       	ldi	r30, 0x43	; 67
     7fe:	f3 e0       	ldi	r31, 0x03	; 3
     800:	fc 83       	std	Y+4, r31	; 0x04
     802:	eb 83       	std	Y+3, r30	; 0x03
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	06 96       	adiw	r24, 0x06	; 6
     80a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <setjmp>
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	e9 81       	ldd	r30, Y+1	; 0x01
     814:	fa 81       	ldd	r31, Y+2	; 0x02
     816:	97 8b       	std	Z+23, r25	; 0x17
     818:	86 8b       	std	Z+22, r24	; 0x16
     81a:	91 8f       	std	Z+25, r25	; 0x19
     81c:	80 8f       	std	Z+24, r24	; 0x18
     81e:	89 e7       	ldi	r24, 0x79	; 121
     820:	9f e0       	ldi	r25, 0x0F	; 15
     822:	94 8f       	std	Z+28, r25	; 0x1c
     824:	83 8f       	std	Z+27, r24	; 0x1b
     826:	15 82       	std	Z+5, r1	; 0x05
     828:	14 82       	std	Z+4, r1	; 0x04
     82a:	7d 96       	adiw	r30, 0x1d	; 29
     82c:	fa 83       	std	Y+2, r31	; 0x02
     82e:	e9 83       	std	Y+1, r30	; 0x01
     830:	eb 81       	ldd	r30, Y+3	; 0x03
     832:	fc 81       	ldd	r31, Y+4	; 0x04
     834:	e0 5a       	subi	r30, 0xA0	; 160
     836:	ff 4f       	sbci	r31, 0xFF	; 255
     838:	fc 83       	std	Y+4, r31	; 0x04
     83a:	eb 83       	std	Y+3, r30	; 0x03
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	86 5b       	subi	r24, 0xB6	; 182
     842:	91 40       	sbci	r25, 0x01	; 1
     844:	f9 f6       	brne	.-66     	; 0x804 <initialize+0x58>
     846:	ea ed       	ldi	r30, 0xDA	; 218
     848:	f1 e0       	ldi	r31, 0x01	; 1
     84a:	11 82       	std	Z+1, r1	; 0x01
     84c:	10 82       	st	Z, r1
     84e:	15 82       	std	Z+5, r1	; 0x05
     850:	14 82       	std	Z+4, r1	; 0x04
     852:	13 82       	std	Z+3, r1	; 0x03
     854:	12 82       	std	Z+2, r1	; 0x02
     856:	e1 e6       	ldi	r30, 0x61	; 97
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 e8       	ldi	r24, 0x80	; 128
     85c:	80 83       	st	Z, r24
     85e:	10 82       	st	Z, r1
     860:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     864:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <dispatch>:
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <dispatch+0x6>
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	9a 83       	std	Y+2, r25	; 0x02
     88e:	89 83       	std	Y+1, r24	; 0x01
     890:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     894:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     898:	06 96       	adiw	r24, 0x06	; 6
     89a:	0e 94 58 10 	call	0x20b0	; 0x20b0 <setjmp>
     89e:	89 2b       	or	r24, r25
     8a0:	29 f0       	breq	.+10     	; 0x8ac <dispatch+0x2a>
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     8b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     8b8:	61 e0       	ldi	r22, 0x01	; 1
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	06 96       	adiw	r24, 0x06	; 6
     8be:	0e 94 78 10 	call	0x20f0	; 0x20f0 <longjmp>

000008c2 <schedule>:
     8c2:	0f 93       	push	r16
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <msgQ>
     8ce:	f0 91 1d 01 	lds	r31, 0x011D	; 0x80011d <msgQ+0x1>
     8d2:	30 97       	sbiw	r30, 0x00	; 0
     8d4:	f1 f0       	breq	.+60     	; 0x912 <schedule+0x50>
     8d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     8da:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     8de:	00 97       	sbiw	r24, 0x00	; 0
     8e0:	c1 f0       	breq	.+48     	; 0x912 <schedule+0x50>
     8e2:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     8e6:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     8ea:	aa 81       	ldd	r26, Y+2	; 0x02
     8ec:	bb 81       	ldd	r27, Y+3	; 0x03
     8ee:	10 97       	sbiw	r26, 0x00	; 0
     8f0:	a9 f0       	breq	.+42     	; 0x91c <schedule+0x5a>
     8f2:	46 81       	ldd	r20, Z+6	; 0x06
     8f4:	57 81       	ldd	r21, Z+7	; 0x07
     8f6:	60 85       	ldd	r22, Z+8	; 0x08
     8f8:	71 85       	ldd	r23, Z+9	; 0x09
     8fa:	16 96       	adiw	r26, 0x06	; 6
     8fc:	0d 91       	ld	r16, X+
     8fe:	1d 91       	ld	r17, X+
     900:	2d 91       	ld	r18, X+
     902:	3c 91       	ld	r19, X
     904:	19 97       	sbiw	r26, 0x09	; 9
     906:	40 1b       	sub	r20, r16
     908:	51 0b       	sbc	r21, r17
     90a:	62 0b       	sbc	r22, r18
     90c:	73 0b       	sbc	r23, r19
     90e:	77 fd       	sbrc	r23, 7
     910:	05 c0       	rjmp	.+10     	; 0x91c <schedule+0x5a>
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	08 95       	ret
     91c:	fc 01       	movw	r30, r24
     91e:	20 81       	ld	r18, Z
     920:	31 81       	ldd	r19, Z+1	; 0x01
     922:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     926:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     92a:	d1 83       	std	Z+1, r29	; 0x01
     92c:	c0 83       	st	Z, r28
     92e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     932:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	0c 94 41 04 	jmp	0x882	; 0x882 <dispatch>

00000942 <dequeue.part.0>:
     942:	8f ef       	ldi	r24, 0xFF	; 255
     944:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     948:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     94c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	83 bf       	out	0x33, r24	; 51
     954:	88 95       	sleep
     956:	fd cf       	rjmp	.-6      	; 0x952 <dequeue.part.0+0x10>

00000958 <__vector_1>:
     958:	1f 92       	push	r1
     95a:	0f 92       	push	r0
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	0f 92       	push	r0
     960:	11 24       	eor	r1, r1
     962:	2f 93       	push	r18
     964:	3f 93       	push	r19
     966:	4f 93       	push	r20
     968:	5f 93       	push	r21
     96a:	6f 93       	push	r22
     96c:	7f 93       	push	r23
     96e:	8f 93       	push	r24
     970:	9f 93       	push	r25
     972:	af 93       	push	r26
     974:	bf 93       	push	r27
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
     97a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     97e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     982:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     986:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     98a:	c9 01       	movw	r24, r18
     98c:	03 2e       	mov	r0, r19
     98e:	00 0c       	add	r0, r0
     990:	aa 0b       	sbc	r26, r26
     992:	bb 0b       	sbc	r27, r27
     994:	dc 01       	movw	r26, r24
     996:	99 27       	eor	r25, r25
     998:	88 27       	eor	r24, r24
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	84 2b       	or	r24, r20
     9a0:	95 2b       	or	r25, r21
     9a2:	a6 2b       	or	r26, r22
     9a4:	b7 2b       	or	r27, r23
     9a6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     9aa:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     9ae:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     9b2:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     9b6:	b0 9b       	sbis	0x16, 0	; 22
     9b8:	1b c0       	rjmp	.+54     	; 0x9f0 <__vector_1+0x98>
     9ba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9be:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9c2:	c9 01       	movw	r24, r18
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	09 2e       	mov	r0, r25
     9c8:	00 0c       	add	r0, r0
     9ca:	aa 0b       	sbc	r26, r26
     9cc:	bb 0b       	sbc	r27, r27
     9ce:	dc 01       	movw	r26, r24
     9d0:	99 27       	eor	r25, r25
     9d2:	88 27       	eor	r24, r24
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	84 2b       	or	r24, r20
     9da:	95 2b       	or	r25, r21
     9dc:	a6 2b       	or	r26, r22
     9de:	b7 2b       	or	r27, r23
     9e0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     9e4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     9e8:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     9ec:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     9f0:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable>
     9f4:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0x1>
     9f8:	30 97       	sbiw	r30, 0x00	; 0
     9fa:	39 f0       	breq	.+14     	; 0xa0a <__vector_1+0xb2>
     9fc:	60 e0       	ldi	r22, 0x00	; 0
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable>
     a04:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0x1>
     a08:	09 95       	icall
     a0a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     a0e:	ff 91       	pop	r31
     a10:	ef 91       	pop	r30
     a12:	bf 91       	pop	r27
     a14:	af 91       	pop	r26
     a16:	9f 91       	pop	r25
     a18:	8f 91       	pop	r24
     a1a:	7f 91       	pop	r23
     a1c:	6f 91       	pop	r22
     a1e:	5f 91       	pop	r21
     a20:	4f 91       	pop	r20
     a22:	3f 91       	pop	r19
     a24:	2f 91       	pop	r18
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <__vector_2>:
     a30:	1f 92       	push	r1
     a32:	0f 92       	push	r0
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	0f 92       	push	r0
     a38:	11 24       	eor	r1, r1
     a3a:	2f 93       	push	r18
     a3c:	3f 93       	push	r19
     a3e:	4f 93       	push	r20
     a40:	5f 93       	push	r21
     a42:	6f 93       	push	r22
     a44:	7f 93       	push	r23
     a46:	8f 93       	push	r24
     a48:	9f 93       	push	r25
     a4a:	af 93       	push	r26
     a4c:	bf 93       	push	r27
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
     a52:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     a56:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     a5a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a5e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a62:	c9 01       	movw	r24, r18
     a64:	03 2e       	mov	r0, r19
     a66:	00 0c       	add	r0, r0
     a68:	aa 0b       	sbc	r26, r26
     a6a:	bb 0b       	sbc	r27, r27
     a6c:	dc 01       	movw	r26, r24
     a6e:	99 27       	eor	r25, r25
     a70:	88 27       	eor	r24, r24
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	84 2b       	or	r24, r20
     a78:	95 2b       	or	r25, r21
     a7a:	a6 2b       	or	r26, r22
     a7c:	b7 2b       	or	r27, r23
     a7e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     a82:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     a86:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     a8a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     a8e:	b0 9b       	sbis	0x16, 0	; 22
     a90:	1b c0       	rjmp	.+54     	; 0xac8 <__vector_2+0x98>
     a92:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a96:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a9a:	c9 01       	movw	r24, r18
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	09 2e       	mov	r0, r25
     aa0:	00 0c       	add	r0, r0
     aa2:	aa 0b       	sbc	r26, r26
     aa4:	bb 0b       	sbc	r27, r27
     aa6:	dc 01       	movw	r26, r24
     aa8:	99 27       	eor	r25, r25
     aaa:	88 27       	eor	r24, r24
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	84 2b       	or	r24, r20
     ab2:	95 2b       	or	r25, r21
     ab4:	a6 2b       	or	r26, r22
     ab6:	b7 2b       	or	r27, r23
     ab8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     abc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     ac0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     ac4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     ac8:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x2>
     acc:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x3>
     ad0:	30 97       	sbiw	r30, 0x00	; 0
     ad2:	39 f0       	breq	.+14     	; 0xae2 <__vector_2+0xb2>
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x2>
     adc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x3>
     ae0:	09 95       	icall
     ae2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_3>:
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	2f 93       	push	r18
     b14:	3f 93       	push	r19
     b16:	4f 93       	push	r20
     b18:	5f 93       	push	r21
     b1a:	6f 93       	push	r22
     b1c:	7f 93       	push	r23
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	af 93       	push	r26
     b24:	bf 93       	push	r27
     b26:	ef 93       	push	r30
     b28:	ff 93       	push	r31
     b2a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     b2e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     b32:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b36:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b3a:	c9 01       	movw	r24, r18
     b3c:	03 2e       	mov	r0, r19
     b3e:	00 0c       	add	r0, r0
     b40:	aa 0b       	sbc	r26, r26
     b42:	bb 0b       	sbc	r27, r27
     b44:	dc 01       	movw	r26, r24
     b46:	99 27       	eor	r25, r25
     b48:	88 27       	eor	r24, r24
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	84 2b       	or	r24, r20
     b50:	95 2b       	or	r25, r21
     b52:	a6 2b       	or	r26, r22
     b54:	b7 2b       	or	r27, r23
     b56:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     b5a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     b5e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     b62:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     b66:	b0 9b       	sbis	0x16, 0	; 22
     b68:	1b c0       	rjmp	.+54     	; 0xba0 <__vector_3+0x98>
     b6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b72:	c9 01       	movw	r24, r18
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	09 2e       	mov	r0, r25
     b78:	00 0c       	add	r0, r0
     b7a:	aa 0b       	sbc	r26, r26
     b7c:	bb 0b       	sbc	r27, r27
     b7e:	dc 01       	movw	r26, r24
     b80:	99 27       	eor	r25, r25
     b82:	88 27       	eor	r24, r24
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	84 2b       	or	r24, r20
     b8a:	95 2b       	or	r25, r21
     b8c:	a6 2b       	or	r26, r22
     b8e:	b7 2b       	or	r27, r23
     b90:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     b94:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     b98:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     b9c:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     ba0:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x4>
     ba4:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x5>
     ba8:	30 97       	sbiw	r30, 0x00	; 0
     baa:	39 f0       	breq	.+14     	; 0xbba <__vector_3+0xb2>
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x4>
     bb4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x5>
     bb8:	09 95       	icall
     bba:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     bbe:	ff 91       	pop	r31
     bc0:	ef 91       	pop	r30
     bc2:	bf 91       	pop	r27
     bc4:	af 91       	pop	r26
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	7f 91       	pop	r23
     bcc:	6f 91       	pop	r22
     bce:	5f 91       	pop	r21
     bd0:	4f 91       	pop	r20
     bd2:	3f 91       	pop	r19
     bd4:	2f 91       	pop	r18
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <__vector_4>:
     be0:	1f 92       	push	r1
     be2:	0f 92       	push	r0
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	0f 92       	push	r0
     be8:	11 24       	eor	r1, r1
     bea:	2f 93       	push	r18
     bec:	3f 93       	push	r19
     bee:	4f 93       	push	r20
     bf0:	5f 93       	push	r21
     bf2:	6f 93       	push	r22
     bf4:	7f 93       	push	r23
     bf6:	8f 93       	push	r24
     bf8:	9f 93       	push	r25
     bfa:	af 93       	push	r26
     bfc:	bf 93       	push	r27
     bfe:	ef 93       	push	r30
     c00:	ff 93       	push	r31
     c02:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     c06:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     c0a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c0e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c12:	c9 01       	movw	r24, r18
     c14:	03 2e       	mov	r0, r19
     c16:	00 0c       	add	r0, r0
     c18:	aa 0b       	sbc	r26, r26
     c1a:	bb 0b       	sbc	r27, r27
     c1c:	dc 01       	movw	r26, r24
     c1e:	99 27       	eor	r25, r25
     c20:	88 27       	eor	r24, r24
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	84 2b       	or	r24, r20
     c28:	95 2b       	or	r25, r21
     c2a:	a6 2b       	or	r26, r22
     c2c:	b7 2b       	or	r27, r23
     c2e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     c32:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     c36:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     c3a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     c3e:	b0 9b       	sbis	0x16, 0	; 22
     c40:	1b c0       	rjmp	.+54     	; 0xc78 <__vector_4+0x98>
     c42:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c46:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c4a:	c9 01       	movw	r24, r18
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	09 2e       	mov	r0, r25
     c50:	00 0c       	add	r0, r0
     c52:	aa 0b       	sbc	r26, r26
     c54:	bb 0b       	sbc	r27, r27
     c56:	dc 01       	movw	r26, r24
     c58:	99 27       	eor	r25, r25
     c5a:	88 27       	eor	r24, r24
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	84 2b       	or	r24, r20
     c62:	95 2b       	or	r25, r21
     c64:	a6 2b       	or	r26, r22
     c66:	b7 2b       	or	r27, r23
     c68:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     c6c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     c70:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     c74:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     c78:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x6>
     c7c:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x7>
     c80:	30 97       	sbiw	r30, 0x00	; 0
     c82:	39 f0       	breq	.+14     	; 0xc92 <__vector_4+0xb2>
     c84:	63 e0       	ldi	r22, 0x03	; 3
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x6>
     c8c:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x7>
     c90:	09 95       	icall
     c92:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <__vector_5>:
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	2f 93       	push	r18
     cc4:	3f 93       	push	r19
     cc6:	4f 93       	push	r20
     cc8:	5f 93       	push	r21
     cca:	6f 93       	push	r22
     ccc:	7f 93       	push	r23
     cce:	8f 93       	push	r24
     cd0:	9f 93       	push	r25
     cd2:	af 93       	push	r26
     cd4:	bf 93       	push	r27
     cd6:	ef 93       	push	r30
     cd8:	ff 93       	push	r31
     cda:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     cde:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     ce2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ce6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cea:	c9 01       	movw	r24, r18
     cec:	03 2e       	mov	r0, r19
     cee:	00 0c       	add	r0, r0
     cf0:	aa 0b       	sbc	r26, r26
     cf2:	bb 0b       	sbc	r27, r27
     cf4:	dc 01       	movw	r26, r24
     cf6:	99 27       	eor	r25, r25
     cf8:	88 27       	eor	r24, r24
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	70 e0       	ldi	r23, 0x00	; 0
     cfe:	84 2b       	or	r24, r20
     d00:	95 2b       	or	r25, r21
     d02:	a6 2b       	or	r26, r22
     d04:	b7 2b       	or	r27, r23
     d06:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     d0a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     d0e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     d12:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     d16:	b0 9b       	sbis	0x16, 0	; 22
     d18:	1b c0       	rjmp	.+54     	; 0xd50 <__vector_5+0x98>
     d1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d22:	c9 01       	movw	r24, r18
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	09 2e       	mov	r0, r25
     d28:	00 0c       	add	r0, r0
     d2a:	aa 0b       	sbc	r26, r26
     d2c:	bb 0b       	sbc	r27, r27
     d2e:	dc 01       	movw	r26, r24
     d30:	99 27       	eor	r25, r25
     d32:	88 27       	eor	r24, r24
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	84 2b       	or	r24, r20
     d3a:	95 2b       	or	r25, r21
     d3c:	a6 2b       	or	r26, r22
     d3e:	b7 2b       	or	r27, r23
     d40:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     d44:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     d48:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     d4c:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     d50:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x8>
     d54:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x9>
     d58:	30 97       	sbiw	r30, 0x00	; 0
     d5a:	39 f0       	breq	.+14     	; 0xd6a <__vector_5+0xb2>
     d5c:	64 e0       	ldi	r22, 0x04	; 4
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x8>
     d64:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x9>
     d68:	09 95       	icall
     d6a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     d6e:	ff 91       	pop	r31
     d70:	ef 91       	pop	r30
     d72:	bf 91       	pop	r27
     d74:	af 91       	pop	r26
     d76:	9f 91       	pop	r25
     d78:	8f 91       	pop	r24
     d7a:	7f 91       	pop	r23
     d7c:	6f 91       	pop	r22
     d7e:	5f 91       	pop	r21
     d80:	4f 91       	pop	r20
     d82:	3f 91       	pop	r19
     d84:	2f 91       	pop	r18
     d86:	0f 90       	pop	r0
     d88:	0f be       	out	0x3f, r0	; 63
     d8a:	0f 90       	pop	r0
     d8c:	1f 90       	pop	r1
     d8e:	18 95       	reti

00000d90 <__vector_10>:
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	0f 92       	push	r0
     d98:	11 24       	eor	r1, r1
     d9a:	2f 93       	push	r18
     d9c:	3f 93       	push	r19
     d9e:	4f 93       	push	r20
     da0:	5f 93       	push	r21
     da2:	6f 93       	push	r22
     da4:	7f 93       	push	r23
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
     dae:	ef 93       	push	r30
     db0:	ff 93       	push	r31
     db2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     db6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     dba:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dbe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dc2:	c9 01       	movw	r24, r18
     dc4:	03 2e       	mov	r0, r19
     dc6:	00 0c       	add	r0, r0
     dc8:	aa 0b       	sbc	r26, r26
     dca:	bb 0b       	sbc	r27, r27
     dcc:	dc 01       	movw	r26, r24
     dce:	99 27       	eor	r25, r25
     dd0:	88 27       	eor	r24, r24
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	84 2b       	or	r24, r20
     dd8:	95 2b       	or	r25, r21
     dda:	a6 2b       	or	r26, r22
     ddc:	b7 2b       	or	r27, r23
     dde:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     de2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     de6:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     dea:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     dee:	b0 9b       	sbis	0x16, 0	; 22
     df0:	1b c0       	rjmp	.+54     	; 0xe28 <__vector_10+0x98>
     df2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     df6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dfa:	c9 01       	movw	r24, r18
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	09 2e       	mov	r0, r25
     e00:	00 0c       	add	r0, r0
     e02:	aa 0b       	sbc	r26, r26
     e04:	bb 0b       	sbc	r27, r27
     e06:	dc 01       	movw	r26, r24
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	84 2b       	or	r24, r20
     e12:	95 2b       	or	r25, r21
     e14:	a6 2b       	or	r26, r22
     e16:	b7 2b       	or	r27, r23
     e18:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     e1c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     e20:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     e24:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     e28:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0xa>
     e2c:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0xb>
     e30:	30 97       	sbiw	r30, 0x00	; 0
     e32:	39 f0       	breq	.+14     	; 0xe42 <__vector_10+0xb2>
     e34:	65 e0       	ldi	r22, 0x05	; 5
     e36:	70 e0       	ldi	r23, 0x00	; 0
     e38:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0xa>
     e3c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0xb>
     e40:	09 95       	icall
     e42:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	bf 91       	pop	r27
     e4c:	af 91       	pop	r26
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	7f 91       	pop	r23
     e54:	6f 91       	pop	r22
     e56:	5f 91       	pop	r21
     e58:	4f 91       	pop	r20
     e5a:	3f 91       	pop	r19
     e5c:	2f 91       	pop	r18
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <__vector_11>:
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	2f 93       	push	r18
     e74:	3f 93       	push	r19
     e76:	4f 93       	push	r20
     e78:	5f 93       	push	r21
     e7a:	6f 93       	push	r22
     e7c:	7f 93       	push	r23
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	af 93       	push	r26
     e84:	bf 93       	push	r27
     e86:	ef 93       	push	r30
     e88:	ff 93       	push	r31
     e8a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     e8e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     e92:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e96:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e9a:	c9 01       	movw	r24, r18
     e9c:	03 2e       	mov	r0, r19
     e9e:	00 0c       	add	r0, r0
     ea0:	aa 0b       	sbc	r26, r26
     ea2:	bb 0b       	sbc	r27, r27
     ea4:	dc 01       	movw	r26, r24
     ea6:	99 27       	eor	r25, r25
     ea8:	88 27       	eor	r24, r24
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	84 2b       	or	r24, r20
     eb0:	95 2b       	or	r25, r21
     eb2:	a6 2b       	or	r26, r22
     eb4:	b7 2b       	or	r27, r23
     eb6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     eba:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     ebe:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     ec2:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     ec6:	b0 9b       	sbis	0x16, 0	; 22
     ec8:	1b c0       	rjmp	.+54     	; 0xf00 <__vector_11+0x98>
     eca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ece:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ed2:	c9 01       	movw	r24, r18
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	09 2e       	mov	r0, r25
     ed8:	00 0c       	add	r0, r0
     eda:	aa 0b       	sbc	r26, r26
     edc:	bb 0b       	sbc	r27, r27
     ede:	dc 01       	movw	r26, r24
     ee0:	99 27       	eor	r25, r25
     ee2:	88 27       	eor	r24, r24
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	84 2b       	or	r24, r20
     eea:	95 2b       	or	r25, r21
     eec:	a6 2b       	or	r26, r22
     eee:	b7 2b       	or	r27, r23
     ef0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     ef4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     ef8:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     efc:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     f00:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0xc>
     f04:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0xd>
     f08:	30 97       	sbiw	r30, 0x00	; 0
     f0a:	39 f0       	breq	.+14     	; 0xf1a <__vector_11+0xb2>
     f0c:	66 e0       	ldi	r22, 0x06	; 6
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0xc>
     f14:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0xd>
     f18:	09 95       	icall
     f1a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	7f 91       	pop	r23
     f2c:	6f 91       	pop	r22
     f2e:	5f 91       	pop	r21
     f30:	4f 91       	pop	r20
     f32:	3f 91       	pop	r19
     f34:	2f 91       	pop	r18
     f36:	0f 90       	pop	r0
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	0f 90       	pop	r0
     f3c:	1f 90       	pop	r1
     f3e:	18 95       	reti

00000f40 <__vector_12>:
     f40:	1f 92       	push	r1
     f42:	0f 92       	push	r0
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	0f 92       	push	r0
     f48:	11 24       	eor	r1, r1
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
     f62:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
     f66:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
     f6a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f6e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f72:	c9 01       	movw	r24, r18
     f74:	03 2e       	mov	r0, r19
     f76:	00 0c       	add	r0, r0
     f78:	aa 0b       	sbc	r26, r26
     f7a:	bb 0b       	sbc	r27, r27
     f7c:	dc 01       	movw	r26, r24
     f7e:	99 27       	eor	r25, r25
     f80:	88 27       	eor	r24, r24
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	84 2b       	or	r24, r20
     f88:	95 2b       	or	r25, r21
     f8a:	a6 2b       	or	r26, r22
     f8c:	b7 2b       	or	r27, r23
     f8e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     f92:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     f96:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     f9a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     f9e:	b0 9b       	sbis	0x16, 0	; 22
     fa0:	1b c0       	rjmp	.+54     	; 0xfd8 <__vector_12+0x98>
     fa2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fa6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     faa:	c9 01       	movw	r24, r18
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	09 2e       	mov	r0, r25
     fb0:	00 0c       	add	r0, r0
     fb2:	aa 0b       	sbc	r26, r26
     fb4:	bb 0b       	sbc	r27, r27
     fb6:	dc 01       	movw	r26, r24
     fb8:	99 27       	eor	r25, r25
     fba:	88 27       	eor	r24, r24
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	84 2b       	or	r24, r20
     fc2:	95 2b       	or	r25, r21
     fc4:	a6 2b       	or	r26, r22
     fc6:	b7 2b       	or	r27, r23
     fc8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
     fcc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
     fd0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
     fd4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
     fd8:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0xe>
     fdc:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0xf>
     fe0:	30 97       	sbiw	r30, 0x00	; 0
     fe2:	39 f0       	breq	.+14     	; 0xff2 <__vector_12+0xb2>
     fe4:	67 e0       	ldi	r22, 0x07	; 7
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0xe>
     fec:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0xf>
     ff0:	09 95       	icall
     ff2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	bf 91       	pop	r27
     ffc:	af 91       	pop	r26
     ffe:	9f 91       	pop	r25
    1000:	8f 91       	pop	r24
    1002:	7f 91       	pop	r23
    1004:	6f 91       	pop	r22
    1006:	5f 91       	pop	r21
    1008:	4f 91       	pop	r20
    100a:	3f 91       	pop	r19
    100c:	2f 91       	pop	r18
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <__vector_13>:
    1018:	1f 92       	push	r1
    101a:	0f 92       	push	r0
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	0f 92       	push	r0
    1020:	11 24       	eor	r1, r1
    1022:	2f 93       	push	r18
    1024:	3f 93       	push	r19
    1026:	4f 93       	push	r20
    1028:	5f 93       	push	r21
    102a:	6f 93       	push	r22
    102c:	7f 93       	push	r23
    102e:	8f 93       	push	r24
    1030:	9f 93       	push	r25
    1032:	af 93       	push	r26
    1034:	bf 93       	push	r27
    1036:	ef 93       	push	r30
    1038:	ff 93       	push	r31
    103a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    103e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    1042:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1046:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    104a:	c9 01       	movw	r24, r18
    104c:	03 2e       	mov	r0, r19
    104e:	00 0c       	add	r0, r0
    1050:	aa 0b       	sbc	r26, r26
    1052:	bb 0b       	sbc	r27, r27
    1054:	dc 01       	movw	r26, r24
    1056:	99 27       	eor	r25, r25
    1058:	88 27       	eor	r24, r24
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	84 2b       	or	r24, r20
    1060:	95 2b       	or	r25, r21
    1062:	a6 2b       	or	r26, r22
    1064:	b7 2b       	or	r27, r23
    1066:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    106a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    106e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1072:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1076:	b0 9b       	sbis	0x16, 0	; 22
    1078:	1b c0       	rjmp	.+54     	; 0x10b0 <__vector_13+0x98>
    107a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    107e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1082:	c9 01       	movw	r24, r18
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	09 2e       	mov	r0, r25
    1088:	00 0c       	add	r0, r0
    108a:	aa 0b       	sbc	r26, r26
    108c:	bb 0b       	sbc	r27, r27
    108e:	dc 01       	movw	r26, r24
    1090:	99 27       	eor	r25, r25
    1092:	88 27       	eor	r24, r24
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	84 2b       	or	r24, r20
    109a:	95 2b       	or	r25, r21
    109c:	a6 2b       	or	r26, r22
    109e:	b7 2b       	or	r27, r23
    10a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    10a4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    10a8:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    10ac:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    10b0:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x10>
    10b4:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x11>
    10b8:	30 97       	sbiw	r30, 0x00	; 0
    10ba:	39 f0       	breq	.+14     	; 0x10ca <__vector_13+0xb2>
    10bc:	68 e0       	ldi	r22, 0x08	; 8
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x10>
    10c4:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x11>
    10c8:	09 95       	icall
    10ca:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    10ce:	ff 91       	pop	r31
    10d0:	ef 91       	pop	r30
    10d2:	bf 91       	pop	r27
    10d4:	af 91       	pop	r26
    10d6:	9f 91       	pop	r25
    10d8:	8f 91       	pop	r24
    10da:	7f 91       	pop	r23
    10dc:	6f 91       	pop	r22
    10de:	5f 91       	pop	r21
    10e0:	4f 91       	pop	r20
    10e2:	3f 91       	pop	r19
    10e4:	2f 91       	pop	r18
    10e6:	0f 90       	pop	r0
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	0f 90       	pop	r0
    10ec:	1f 90       	pop	r1
    10ee:	18 95       	reti

000010f0 <__vector_14>:
    10f0:	1f 92       	push	r1
    10f2:	0f 92       	push	r0
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	0f 92       	push	r0
    10f8:	11 24       	eor	r1, r1
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
    1112:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    1116:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    111a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    111e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1122:	c9 01       	movw	r24, r18
    1124:	03 2e       	mov	r0, r19
    1126:	00 0c       	add	r0, r0
    1128:	aa 0b       	sbc	r26, r26
    112a:	bb 0b       	sbc	r27, r27
    112c:	dc 01       	movw	r26, r24
    112e:	99 27       	eor	r25, r25
    1130:	88 27       	eor	r24, r24
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	84 2b       	or	r24, r20
    1138:	95 2b       	or	r25, r21
    113a:	a6 2b       	or	r26, r22
    113c:	b7 2b       	or	r27, r23
    113e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    1142:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1146:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    114a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    114e:	b0 9b       	sbis	0x16, 0	; 22
    1150:	1b c0       	rjmp	.+54     	; 0x1188 <__vector_14+0x98>
    1152:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1156:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    115a:	c9 01       	movw	r24, r18
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	09 2e       	mov	r0, r25
    1160:	00 0c       	add	r0, r0
    1162:	aa 0b       	sbc	r26, r26
    1164:	bb 0b       	sbc	r27, r27
    1166:	dc 01       	movw	r26, r24
    1168:	99 27       	eor	r25, r25
    116a:	88 27       	eor	r24, r24
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	84 2b       	or	r24, r20
    1172:	95 2b       	or	r25, r21
    1174:	a6 2b       	or	r26, r22
    1176:	b7 2b       	or	r27, r23
    1178:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    117c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1180:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1184:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1188:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x12>
    118c:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x13>
    1190:	30 97       	sbiw	r30, 0x00	; 0
    1192:	39 f0       	breq	.+14     	; 0x11a2 <__vector_14+0xb2>
    1194:	69 e0       	ldi	r22, 0x09	; 9
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x12>
    119c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x13>
    11a0:	09 95       	icall
    11a2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    11a6:	ff 91       	pop	r31
    11a8:	ef 91       	pop	r30
    11aa:	bf 91       	pop	r27
    11ac:	af 91       	pop	r26
    11ae:	9f 91       	pop	r25
    11b0:	8f 91       	pop	r24
    11b2:	7f 91       	pop	r23
    11b4:	6f 91       	pop	r22
    11b6:	5f 91       	pop	r21
    11b8:	4f 91       	pop	r20
    11ba:	3f 91       	pop	r19
    11bc:	2f 91       	pop	r18
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <__vector_15>:
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	2f 93       	push	r18
    11d4:	3f 93       	push	r19
    11d6:	4f 93       	push	r20
    11d8:	5f 93       	push	r21
    11da:	6f 93       	push	r22
    11dc:	7f 93       	push	r23
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
    11e2:	af 93       	push	r26
    11e4:	bf 93       	push	r27
    11e6:	ef 93       	push	r30
    11e8:	ff 93       	push	r31
    11ea:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    11ee:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    11f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11fa:	c9 01       	movw	r24, r18
    11fc:	03 2e       	mov	r0, r19
    11fe:	00 0c       	add	r0, r0
    1200:	aa 0b       	sbc	r26, r26
    1202:	bb 0b       	sbc	r27, r27
    1204:	dc 01       	movw	r26, r24
    1206:	99 27       	eor	r25, r25
    1208:	88 27       	eor	r24, r24
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	70 e0       	ldi	r23, 0x00	; 0
    120e:	84 2b       	or	r24, r20
    1210:	95 2b       	or	r25, r21
    1212:	a6 2b       	or	r26, r22
    1214:	b7 2b       	or	r27, r23
    1216:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    121a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    121e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1222:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1226:	b0 9b       	sbis	0x16, 0	; 22
    1228:	1b c0       	rjmp	.+54     	; 0x1260 <__vector_15+0x98>
    122a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    122e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1232:	c9 01       	movw	r24, r18
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	09 2e       	mov	r0, r25
    1238:	00 0c       	add	r0, r0
    123a:	aa 0b       	sbc	r26, r26
    123c:	bb 0b       	sbc	r27, r27
    123e:	dc 01       	movw	r26, r24
    1240:	99 27       	eor	r25, r25
    1242:	88 27       	eor	r24, r24
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	84 2b       	or	r24, r20
    124a:	95 2b       	or	r25, r21
    124c:	a6 2b       	or	r26, r22
    124e:	b7 2b       	or	r27, r23
    1250:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    1254:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1258:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    125c:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1260:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x14>
    1264:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x15>
    1268:	30 97       	sbiw	r30, 0x00	; 0
    126a:	39 f0       	breq	.+14     	; 0x127a <__vector_15+0xb2>
    126c:	6a e0       	ldi	r22, 0x0A	; 10
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x14>
    1274:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x15>
    1278:	09 95       	icall
    127a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    127e:	ff 91       	pop	r31
    1280:	ef 91       	pop	r30
    1282:	bf 91       	pop	r27
    1284:	af 91       	pop	r26
    1286:	9f 91       	pop	r25
    1288:	8f 91       	pop	r24
    128a:	7f 91       	pop	r23
    128c:	6f 91       	pop	r22
    128e:	5f 91       	pop	r21
    1290:	4f 91       	pop	r20
    1292:	3f 91       	pop	r19
    1294:	2f 91       	pop	r18
    1296:	0f 90       	pop	r0
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	0f 90       	pop	r0
    129c:	1f 90       	pop	r1
    129e:	18 95       	reti

000012a0 <__vector_16>:
    12a0:	1f 92       	push	r1
    12a2:	0f 92       	push	r0
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	0f 92       	push	r0
    12a8:	11 24       	eor	r1, r1
    12aa:	2f 93       	push	r18
    12ac:	3f 93       	push	r19
    12ae:	4f 93       	push	r20
    12b0:	5f 93       	push	r21
    12b2:	6f 93       	push	r22
    12b4:	7f 93       	push	r23
    12b6:	8f 93       	push	r24
    12b8:	9f 93       	push	r25
    12ba:	af 93       	push	r26
    12bc:	bf 93       	push	r27
    12be:	ef 93       	push	r30
    12c0:	ff 93       	push	r31
    12c2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    12c6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    12ca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12ce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12d2:	c9 01       	movw	r24, r18
    12d4:	03 2e       	mov	r0, r19
    12d6:	00 0c       	add	r0, r0
    12d8:	aa 0b       	sbc	r26, r26
    12da:	bb 0b       	sbc	r27, r27
    12dc:	dc 01       	movw	r26, r24
    12de:	99 27       	eor	r25, r25
    12e0:	88 27       	eor	r24, r24
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	84 2b       	or	r24, r20
    12e8:	95 2b       	or	r25, r21
    12ea:	a6 2b       	or	r26, r22
    12ec:	b7 2b       	or	r27, r23
    12ee:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    12f2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    12f6:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    12fa:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    12fe:	b0 9b       	sbis	0x16, 0	; 22
    1300:	1b c0       	rjmp	.+54     	; 0x1338 <__vector_16+0x98>
    1302:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1306:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    130a:	c9 01       	movw	r24, r18
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	09 2e       	mov	r0, r25
    1310:	00 0c       	add	r0, r0
    1312:	aa 0b       	sbc	r26, r26
    1314:	bb 0b       	sbc	r27, r27
    1316:	dc 01       	movw	r26, r24
    1318:	99 27       	eor	r25, r25
    131a:	88 27       	eor	r24, r24
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	84 2b       	or	r24, r20
    1322:	95 2b       	or	r25, r21
    1324:	a6 2b       	or	r26, r22
    1326:	b7 2b       	or	r27, r23
    1328:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    132c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1330:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1334:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1338:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x16>
    133c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x17>
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	39 f0       	breq	.+14     	; 0x1352 <__vector_16+0xb2>
    1344:	6b e0       	ldi	r22, 0x0B	; 11
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x16>
    134c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x17>
    1350:	09 95       	icall
    1352:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <__vector_17>:
    1378:	1f 92       	push	r1
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	0f 92       	push	r0
    1380:	11 24       	eor	r1, r1
    1382:	2f 93       	push	r18
    1384:	3f 93       	push	r19
    1386:	4f 93       	push	r20
    1388:	5f 93       	push	r21
    138a:	6f 93       	push	r22
    138c:	7f 93       	push	r23
    138e:	8f 93       	push	r24
    1390:	9f 93       	push	r25
    1392:	af 93       	push	r26
    1394:	bf 93       	push	r27
    1396:	ef 93       	push	r30
    1398:	ff 93       	push	r31
    139a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    139e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    13a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13aa:	c9 01       	movw	r24, r18
    13ac:	03 2e       	mov	r0, r19
    13ae:	00 0c       	add	r0, r0
    13b0:	aa 0b       	sbc	r26, r26
    13b2:	bb 0b       	sbc	r27, r27
    13b4:	dc 01       	movw	r26, r24
    13b6:	99 27       	eor	r25, r25
    13b8:	88 27       	eor	r24, r24
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	84 2b       	or	r24, r20
    13c0:	95 2b       	or	r25, r21
    13c2:	a6 2b       	or	r26, r22
    13c4:	b7 2b       	or	r27, r23
    13c6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    13ca:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    13ce:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    13d2:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    13d6:	b0 9b       	sbis	0x16, 0	; 22
    13d8:	1b c0       	rjmp	.+54     	; 0x1410 <__vector_17+0x98>
    13da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13e2:	c9 01       	movw	r24, r18
    13e4:	01 96       	adiw	r24, 0x01	; 1
    13e6:	09 2e       	mov	r0, r25
    13e8:	00 0c       	add	r0, r0
    13ea:	aa 0b       	sbc	r26, r26
    13ec:	bb 0b       	sbc	r27, r27
    13ee:	dc 01       	movw	r26, r24
    13f0:	99 27       	eor	r25, r25
    13f2:	88 27       	eor	r24, r24
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	84 2b       	or	r24, r20
    13fa:	95 2b       	or	r25, r21
    13fc:	a6 2b       	or	r26, r22
    13fe:	b7 2b       	or	r27, r23
    1400:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    1404:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1408:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    140c:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1410:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x18>
    1414:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x19>
    1418:	30 97       	sbiw	r30, 0x00	; 0
    141a:	39 f0       	breq	.+14     	; 0x142a <__vector_17+0xb2>
    141c:	6c e0       	ldi	r22, 0x0C	; 12
    141e:	70 e0       	ldi	r23, 0x00	; 0
    1420:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x18>
    1424:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x19>
    1428:	09 95       	icall
    142a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    142e:	ff 91       	pop	r31
    1430:	ef 91       	pop	r30
    1432:	bf 91       	pop	r27
    1434:	af 91       	pop	r26
    1436:	9f 91       	pop	r25
    1438:	8f 91       	pop	r24
    143a:	7f 91       	pop	r23
    143c:	6f 91       	pop	r22
    143e:	5f 91       	pop	r21
    1440:	4f 91       	pop	r20
    1442:	3f 91       	pop	r19
    1444:	2f 91       	pop	r18
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0
    144c:	1f 90       	pop	r1
    144e:	18 95       	reti

00001450 <__vector_18>:
    1450:	1f 92       	push	r1
    1452:	0f 92       	push	r0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	0f 92       	push	r0
    1458:	11 24       	eor	r1, r1
    145a:	2f 93       	push	r18
    145c:	3f 93       	push	r19
    145e:	4f 93       	push	r20
    1460:	5f 93       	push	r21
    1462:	6f 93       	push	r22
    1464:	7f 93       	push	r23
    1466:	8f 93       	push	r24
    1468:	9f 93       	push	r25
    146a:	af 93       	push	r26
    146c:	bf 93       	push	r27
    146e:	ef 93       	push	r30
    1470:	ff 93       	push	r31
    1472:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    1476:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    147a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    147e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1482:	c9 01       	movw	r24, r18
    1484:	03 2e       	mov	r0, r19
    1486:	00 0c       	add	r0, r0
    1488:	aa 0b       	sbc	r26, r26
    148a:	bb 0b       	sbc	r27, r27
    148c:	dc 01       	movw	r26, r24
    148e:	99 27       	eor	r25, r25
    1490:	88 27       	eor	r24, r24
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	84 2b       	or	r24, r20
    1498:	95 2b       	or	r25, r21
    149a:	a6 2b       	or	r26, r22
    149c:	b7 2b       	or	r27, r23
    149e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    14a2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    14a6:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    14aa:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    14ae:	b0 9b       	sbis	0x16, 0	; 22
    14b0:	1b c0       	rjmp	.+54     	; 0x14e8 <__vector_18+0x98>
    14b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14ba:	c9 01       	movw	r24, r18
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	09 2e       	mov	r0, r25
    14c0:	00 0c       	add	r0, r0
    14c2:	aa 0b       	sbc	r26, r26
    14c4:	bb 0b       	sbc	r27, r27
    14c6:	dc 01       	movw	r26, r24
    14c8:	99 27       	eor	r25, r25
    14ca:	88 27       	eor	r24, r24
    14cc:	60 e0       	ldi	r22, 0x00	; 0
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	84 2b       	or	r24, r20
    14d2:	95 2b       	or	r25, r21
    14d4:	a6 2b       	or	r26, r22
    14d6:	b7 2b       	or	r27, r23
    14d8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    14dc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    14e0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    14e4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    14e8:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x1a>
    14ec:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x1b>
    14f0:	30 97       	sbiw	r30, 0x00	; 0
    14f2:	39 f0       	breq	.+14     	; 0x1502 <__vector_18+0xb2>
    14f4:	6d e0       	ldi	r22, 0x0D	; 13
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x1a>
    14fc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x1b>
    1500:	09 95       	icall
    1502:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <__vector_19>:
    1528:	1f 92       	push	r1
    152a:	0f 92       	push	r0
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	0f 92       	push	r0
    1530:	11 24       	eor	r1, r1
    1532:	2f 93       	push	r18
    1534:	3f 93       	push	r19
    1536:	4f 93       	push	r20
    1538:	5f 93       	push	r21
    153a:	6f 93       	push	r22
    153c:	7f 93       	push	r23
    153e:	8f 93       	push	r24
    1540:	9f 93       	push	r25
    1542:	af 93       	push	r26
    1544:	bf 93       	push	r27
    1546:	ef 93       	push	r30
    1548:	ff 93       	push	r31
    154a:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    154e:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    1552:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1556:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    155a:	c9 01       	movw	r24, r18
    155c:	03 2e       	mov	r0, r19
    155e:	00 0c       	add	r0, r0
    1560:	aa 0b       	sbc	r26, r26
    1562:	bb 0b       	sbc	r27, r27
    1564:	dc 01       	movw	r26, r24
    1566:	99 27       	eor	r25, r25
    1568:	88 27       	eor	r24, r24
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	84 2b       	or	r24, r20
    1570:	95 2b       	or	r25, r21
    1572:	a6 2b       	or	r26, r22
    1574:	b7 2b       	or	r27, r23
    1576:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    157a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    157e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1582:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1586:	b0 9b       	sbis	0x16, 0	; 22
    1588:	1b c0       	rjmp	.+54     	; 0x15c0 <__vector_19+0x98>
    158a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    158e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1592:	c9 01       	movw	r24, r18
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	09 2e       	mov	r0, r25
    1598:	00 0c       	add	r0, r0
    159a:	aa 0b       	sbc	r26, r26
    159c:	bb 0b       	sbc	r27, r27
    159e:	dc 01       	movw	r26, r24
    15a0:	99 27       	eor	r25, r25
    15a2:	88 27       	eor	r24, r24
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	84 2b       	or	r24, r20
    15aa:	95 2b       	or	r25, r21
    15ac:	a6 2b       	or	r26, r22
    15ae:	b7 2b       	or	r27, r23
    15b0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    15b4:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    15b8:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    15bc:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    15c0:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x1c>
    15c4:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x1d>
    15c8:	30 97       	sbiw	r30, 0x00	; 0
    15ca:	39 f0       	breq	.+14     	; 0x15da <__vector_19+0xb2>
    15cc:	6e e0       	ldi	r22, 0x0E	; 14
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x1c>
    15d4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x1d>
    15d8:	09 95       	icall
    15da:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <__vector_20>:
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
    1622:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    1626:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    162a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    162e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1632:	c9 01       	movw	r24, r18
    1634:	03 2e       	mov	r0, r19
    1636:	00 0c       	add	r0, r0
    1638:	aa 0b       	sbc	r26, r26
    163a:	bb 0b       	sbc	r27, r27
    163c:	dc 01       	movw	r26, r24
    163e:	99 27       	eor	r25, r25
    1640:	88 27       	eor	r24, r24
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	84 2b       	or	r24, r20
    1648:	95 2b       	or	r25, r21
    164a:	a6 2b       	or	r26, r22
    164c:	b7 2b       	or	r27, r23
    164e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    1652:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1656:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    165a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    165e:	b0 9b       	sbis	0x16, 0	; 22
    1660:	1b c0       	rjmp	.+54     	; 0x1698 <__vector_20+0x98>
    1662:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1666:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    166a:	c9 01       	movw	r24, r18
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	09 2e       	mov	r0, r25
    1670:	00 0c       	add	r0, r0
    1672:	aa 0b       	sbc	r26, r26
    1674:	bb 0b       	sbc	r27, r27
    1676:	dc 01       	movw	r26, r24
    1678:	99 27       	eor	r25, r25
    167a:	88 27       	eor	r24, r24
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	84 2b       	or	r24, r20
    1682:	95 2b       	or	r25, r21
    1684:	a6 2b       	or	r26, r22
    1686:	b7 2b       	or	r27, r23
    1688:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    168c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1690:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1694:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1698:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x1e>
    169c:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x1f>
    16a0:	30 97       	sbiw	r30, 0x00	; 0
    16a2:	39 f0       	breq	.+14     	; 0x16b2 <__vector_20+0xb2>
    16a4:	6f e0       	ldi	r22, 0x0F	; 15
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x1e>
    16ac:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x1f>
    16b0:	09 95       	icall
    16b2:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    16b6:	ff 91       	pop	r31
    16b8:	ef 91       	pop	r30
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	0f 90       	pop	r0
    16d4:	1f 90       	pop	r1
    16d6:	18 95       	reti

000016d8 <__vector_21>:
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    16fe:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    1702:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1706:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    170a:	c9 01       	movw	r24, r18
    170c:	03 2e       	mov	r0, r19
    170e:	00 0c       	add	r0, r0
    1710:	aa 0b       	sbc	r26, r26
    1712:	bb 0b       	sbc	r27, r27
    1714:	dc 01       	movw	r26, r24
    1716:	99 27       	eor	r25, r25
    1718:	88 27       	eor	r24, r24
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	84 2b       	or	r24, r20
    1720:	95 2b       	or	r25, r21
    1722:	a6 2b       	or	r26, r22
    1724:	b7 2b       	or	r27, r23
    1726:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    172a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    172e:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1732:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1736:	b0 9b       	sbis	0x16, 0	; 22
    1738:	1b c0       	rjmp	.+54     	; 0x1770 <__vector_21+0x98>
    173a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    173e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1742:	c9 01       	movw	r24, r18
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	09 2e       	mov	r0, r25
    1748:	00 0c       	add	r0, r0
    174a:	aa 0b       	sbc	r26, r26
    174c:	bb 0b       	sbc	r27, r27
    174e:	dc 01       	movw	r26, r24
    1750:	99 27       	eor	r25, r25
    1752:	88 27       	eor	r24, r24
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	84 2b       	or	r24, r20
    175a:	95 2b       	or	r25, r21
    175c:	a6 2b       	or	r26, r22
    175e:	b7 2b       	or	r27, r23
    1760:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    1764:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1768:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    176c:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1770:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x20>
    1774:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x21>
    1778:	30 97       	sbiw	r30, 0x00	; 0
    177a:	39 f0       	breq	.+14     	; 0x178a <__vector_21+0xb2>
    177c:	60 e1       	ldi	r22, 0x10	; 16
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x20>
    1784:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x21>
    1788:	09 95       	icall
    178a:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    178e:	ff 91       	pop	r31
    1790:	ef 91       	pop	r30
    1792:	bf 91       	pop	r27
    1794:	af 91       	pop	r26
    1796:	9f 91       	pop	r25
    1798:	8f 91       	pop	r24
    179a:	7f 91       	pop	r23
    179c:	6f 91       	pop	r22
    179e:	5f 91       	pop	r21
    17a0:	4f 91       	pop	r20
    17a2:	3f 91       	pop	r19
    17a4:	2f 91       	pop	r18
    17a6:	0f 90       	pop	r0
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	0f 90       	pop	r0
    17ac:	1f 90       	pop	r1
    17ae:	18 95       	reti

000017b0 <__vector_22>:
    17b0:	1f 92       	push	r1
    17b2:	0f 92       	push	r0
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	0f 92       	push	r0
    17b8:	11 24       	eor	r1, r1
    17ba:	2f 93       	push	r18
    17bc:	3f 93       	push	r19
    17be:	4f 93       	push	r20
    17c0:	5f 93       	push	r21
    17c2:	6f 93       	push	r22
    17c4:	7f 93       	push	r23
    17c6:	8f 93       	push	r24
    17c8:	9f 93       	push	r25
    17ca:	af 93       	push	r26
    17cc:	bf 93       	push	r27
    17ce:	ef 93       	push	r30
    17d0:	ff 93       	push	r31
    17d2:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__data_end>
    17d6:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__data_end+0x1>
    17da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17e2:	c9 01       	movw	r24, r18
    17e4:	03 2e       	mov	r0, r19
    17e6:	00 0c       	add	r0, r0
    17e8:	aa 0b       	sbc	r26, r26
    17ea:	bb 0b       	sbc	r27, r27
    17ec:	dc 01       	movw	r26, r24
    17ee:	99 27       	eor	r25, r25
    17f0:	88 27       	eor	r24, r24
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	84 2b       	or	r24, r20
    17f8:	95 2b       	or	r25, r21
    17fa:	a6 2b       	or	r26, r22
    17fc:	b7 2b       	or	r27, r23
    17fe:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    1802:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1806:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    180a:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    180e:	b0 9b       	sbis	0x16, 0	; 22
    1810:	1b c0       	rjmp	.+54     	; 0x1848 <__vector_22+0x98>
    1812:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1816:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    181a:	c9 01       	movw	r24, r18
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	09 2e       	mov	r0, r25
    1820:	00 0c       	add	r0, r0
    1822:	aa 0b       	sbc	r26, r26
    1824:	bb 0b       	sbc	r27, r27
    1826:	dc 01       	movw	r26, r24
    1828:	99 27       	eor	r25, r25
    182a:	88 27       	eor	r24, r24
    182c:	60 e0       	ldi	r22, 0x00	; 0
    182e:	70 e0       	ldi	r23, 0x00	; 0
    1830:	84 2b       	or	r24, r20
    1832:	95 2b       	or	r25, r21
    1834:	a6 2b       	or	r26, r22
    1836:	b7 2b       	or	r27, r23
    1838:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <timestamp>
    183c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <timestamp+0x1>
    1840:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <timestamp+0x2>
    1844:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <timestamp+0x3>
    1848:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x22>
    184c:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x23>
    1850:	30 97       	sbiw	r30, 0x00	; 0
    1852:	39 f0       	breq	.+14     	; 0x1862 <__vector_22+0xb2>
    1854:	61 e1       	ldi	r22, 0x11	; 17
    1856:	70 e0       	ldi	r23, 0x00	; 0
    1858:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x22>
    185c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x23>
    1860:	09 95       	icall
    1862:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    1866:	ff 91       	pop	r31
    1868:	ef 91       	pop	r30
    186a:	bf 91       	pop	r27
    186c:	af 91       	pop	r26
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	7f 91       	pop	r23
    1874:	6f 91       	pop	r22
    1876:	5f 91       	pop	r21
    1878:	4f 91       	pop	r20
    187a:	3f 91       	pop	r19
    187c:	2f 91       	pop	r18
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <__vector_9>:
    1888:	1f 92       	push	r1
    188a:	0f 92       	push	r0
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	0f 92       	push	r0
    1890:	11 24       	eor	r1, r1
    1892:	2f 93       	push	r18
    1894:	3f 93       	push	r19
    1896:	4f 93       	push	r20
    1898:	5f 93       	push	r21
    189a:	6f 93       	push	r22
    189c:	7f 93       	push	r23
    189e:	8f 93       	push	r24
    18a0:	9f 93       	push	r25
    18a2:	ef 93       	push	r30
    18a4:	ff 93       	push	r31
    18a6:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
    18aa:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
    18ae:	01 96       	adiw	r24, 0x01	; 1
    18b0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
    18b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
    18b8:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <timerQ>
    18bc:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <timerQ+0x1>
    18c0:	30 97       	sbiw	r30, 0x00	; 0
    18c2:	39 f0       	breq	.+14     	; 0x18d2 <__vector_9+0x4a>
    18c4:	42 81       	ldd	r20, Z+2	; 0x02
    18c6:	53 81       	ldd	r21, Z+3	; 0x03
    18c8:	64 81       	ldd	r22, Z+4	; 0x04
    18ca:	75 81       	ldd	r23, Z+5	; 0x05
    18cc:	86 17       	cp	r24, r22
    18ce:	97 07       	cpc	r25, r23
    18d0:	a1 f0       	breq	.+40     	; 0x18fa <__vector_9+0x72>
    18d2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    18d6:	8d 7f       	andi	r24, 0xFD	; 253
    18d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    18dc:	ff 91       	pop	r31
    18de:	ef 91       	pop	r30
    18e0:	9f 91       	pop	r25
    18e2:	8f 91       	pop	r24
    18e4:	7f 91       	pop	r23
    18e6:	6f 91       	pop	r22
    18e8:	5f 91       	pop	r21
    18ea:	4f 91       	pop	r20
    18ec:	3f 91       	pop	r19
    18ee:	2f 91       	pop	r18
    18f0:	0f 90       	pop	r0
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	0f 90       	pop	r0
    18f6:	1f 90       	pop	r1
    18f8:	18 95       	reti
    18fa:	ca 01       	movw	r24, r20
    18fc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1900:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1904:	42 1b       	sub	r20, r18
    1906:	53 0b       	sbc	r21, r19
    1908:	41 30       	cpi	r20, 0x01	; 1
    190a:	51 05       	cpc	r21, r1
    190c:	51 f0       	breq	.+20     	; 0x1922 <__vector_9+0x9a>
    190e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1912:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1916:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    191a:	82 60       	ori	r24, 0x02	; 2
    191c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1920:	dd cf       	rjmp	.-70     	; 0x18dc <__vector_9+0x54>
    1922:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1926:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	f0 cf       	rjmp	.-32     	; 0x190e <__vector_9+0x86>

0000192e <__vector_7>:
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	8f 92       	push	r8
    193a:	9f 92       	push	r9
    193c:	af 92       	push	r10
    193e:	bf 92       	push	r11
    1940:	cf 92       	push	r12
    1942:	df 92       	push	r13
    1944:	ef 92       	push	r14
    1946:	ff 92       	push	r15
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	ef 93       	push	r30
    1966:	ff 93       	push	r31
    1968:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <__data_end>
    196c:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <__data_end+0x1>
    1970:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1974:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1978:	b0 99       	sbic	0x16, 0	; 22
    197a:	98 c0       	rjmp	.+304    	; 0x1aac <__vector_7+0x17e>
    197c:	47 01       	movw	r8, r14
    197e:	0f 2c       	mov	r0, r15
    1980:	00 0c       	add	r0, r0
    1982:	aa 08       	sbc	r10, r10
    1984:	bb 08       	sbc	r11, r11
    1986:	54 01       	movw	r10, r8
    1988:	99 24       	eor	r9, r9
    198a:	88 24       	eor	r8, r8
    198c:	a0 e0       	ldi	r26, 0x00	; 0
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	88 2a       	or	r8, r24
    1992:	99 2a       	or	r9, r25
    1994:	aa 2a       	or	r10, r26
    1996:	bb 2a       	or	r11, r27
    1998:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <timerQ>
    199c:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <timerQ+0x1>
    19a0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <msgQ>
    19a4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <msgQ+0x1>
    19a8:	20 97       	sbiw	r28, 0x00	; 0
    19aa:	09 f4       	brne	.+2      	; 0x19ae <__vector_7+0x80>
    19ac:	3f c0       	rjmp	.+126    	; 0x1a2c <__vector_7+0xfe>
    19ae:	4a 81       	ldd	r20, Y+2	; 0x02
    19b0:	5b 81       	ldd	r21, Y+3	; 0x03
    19b2:	6c 81       	ldd	r22, Y+4	; 0x04
    19b4:	7d 81       	ldd	r23, Y+5	; 0x05
    19b6:	8a 01       	movw	r16, r20
    19b8:	9b 01       	movw	r18, r22
    19ba:	08 19       	sub	r16, r8
    19bc:	19 09       	sbc	r17, r9
    19be:	2a 09       	sbc	r18, r10
    19c0:	3b 09       	sbc	r19, r11
    19c2:	10 16       	cp	r1, r16
    19c4:	11 06       	cpc	r1, r17
    19c6:	12 06       	cpc	r1, r18
    19c8:	13 06       	cpc	r1, r19
    19ca:	0c f4       	brge	.+2      	; 0x19ce <__vector_7+0xa0>
    19cc:	40 c0       	rjmp	.+128    	; 0x1a4e <__vector_7+0x120>
    19ce:	d8 80       	ld	r13, Y
    19d0:	c9 80       	ldd	r12, Y+1	; 0x01
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	b9 f1       	breq	.+110    	; 0x1a44 <__vector_7+0x116>
    19d6:	0e 81       	ldd	r16, Y+6	; 0x06
    19d8:	1f 81       	ldd	r17, Y+7	; 0x07
    19da:	28 85       	ldd	r18, Y+8	; 0x08
    19dc:	39 85       	ldd	r19, Y+9	; 0x09
    19de:	fc 01       	movw	r30, r24
    19e0:	46 81       	ldd	r20, Z+6	; 0x06
    19e2:	57 81       	ldd	r21, Z+7	; 0x07
    19e4:	60 85       	ldd	r22, Z+8	; 0x08
    19e6:	71 85       	ldd	r23, Z+9	; 0x09
    19e8:	04 17       	cp	r16, r20
    19ea:	15 07       	cpc	r17, r21
    19ec:	26 07       	cpc	r18, r22
    19ee:	37 07       	cpc	r19, r23
    19f0:	4c f1       	brlt	.+82     	; 0x1a44 <__vector_7+0x116>
    19f2:	dc 01       	movw	r26, r24
    19f4:	0a c0       	rjmp	.+20     	; 0x1a0a <__vector_7+0xdc>
    19f6:	46 81       	ldd	r20, Z+6	; 0x06
    19f8:	57 81       	ldd	r21, Z+7	; 0x07
    19fa:	60 85       	ldd	r22, Z+8	; 0x08
    19fc:	71 85       	ldd	r23, Z+9	; 0x09
    19fe:	04 17       	cp	r16, r20
    1a00:	15 07       	cpc	r17, r21
    1a02:	26 07       	cpc	r18, r22
    1a04:	37 07       	cpc	r19, r23
    1a06:	dc f0       	brlt	.+54     	; 0x1a3e <__vector_7+0x110>
    1a08:	df 01       	movw	r26, r30
    1a0a:	ed 91       	ld	r30, X+
    1a0c:	fc 91       	ld	r31, X
    1a0e:	11 97       	sbiw	r26, 0x01	; 1
    1a10:	30 97       	sbiw	r30, 0x00	; 0
    1a12:	89 f7       	brne	.-30     	; 0x19f6 <__vector_7+0xc8>
    1a14:	19 82       	std	Y+1, r1	; 0x01
    1a16:	18 82       	st	Y, r1
    1a18:	cd 93       	st	X+, r28
    1a1a:	dc 93       	st	X, r29
    1a1c:	38 2f       	mov	r19, r24
    1a1e:	29 2f       	mov	r18, r25
    1a20:	cd 2d       	mov	r28, r13
    1a22:	dc 2d       	mov	r29, r12
    1a24:	83 2f       	mov	r24, r19
    1a26:	92 2f       	mov	r25, r18
    1a28:	20 97       	sbiw	r28, 0x00	; 0
    1a2a:	09 f6       	brne	.-126    	; 0x19ae <__vector_7+0x80>
    1a2c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <timerQ+0x1>
    1a30:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <timerQ>
    1a34:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <msgQ+0x1>
    1a38:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <msgQ>
    1a3c:	13 c0       	rjmp	.+38     	; 0x1a64 <__vector_7+0x136>
    1a3e:	f9 83       	std	Y+1, r31	; 0x01
    1a40:	e8 83       	st	Y, r30
    1a42:	ea cf       	rjmp	.-44     	; 0x1a18 <__vector_7+0xea>
    1a44:	99 83       	std	Y+1, r25	; 0x01
    1a46:	88 83       	st	Y, r24
    1a48:	3c 2f       	mov	r19, r28
    1a4a:	2d 2f       	mov	r18, r29
    1a4c:	e9 cf       	rjmp	.-46     	; 0x1a20 <__vector_7+0xf2>
    1a4e:	d0 93 1b 01 	sts	0x011B, r29	; 0x80011b <timerQ+0x1>
    1a52:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <timerQ>
    1a56:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <msgQ+0x1>
    1a5a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <msgQ>
    1a5e:	e6 16       	cp	r14, r22
    1a60:	f7 06       	cpc	r15, r23
    1a62:	d9 f1       	breq	.+118    	; 0x1ada <__vector_7+0x1ac>
    1a64:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a68:	8d 7f       	andi	r24, 0xFD	; 253
    1a6a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a6e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    1a72:	ff 91       	pop	r31
    1a74:	ef 91       	pop	r30
    1a76:	df 91       	pop	r29
    1a78:	cf 91       	pop	r28
    1a7a:	bf 91       	pop	r27
    1a7c:	af 91       	pop	r26
    1a7e:	9f 91       	pop	r25
    1a80:	8f 91       	pop	r24
    1a82:	7f 91       	pop	r23
    1a84:	6f 91       	pop	r22
    1a86:	5f 91       	pop	r21
    1a88:	4f 91       	pop	r20
    1a8a:	3f 91       	pop	r19
    1a8c:	2f 91       	pop	r18
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	ff 90       	pop	r15
    1a94:	ef 90       	pop	r14
    1a96:	df 90       	pop	r13
    1a98:	cf 90       	pop	r12
    1a9a:	bf 90       	pop	r11
    1a9c:	af 90       	pop	r10
    1a9e:	9f 90       	pop	r9
    1aa0:	8f 90       	pop	r8
    1aa2:	0f 90       	pop	r0
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	0f 90       	pop	r0
    1aa8:	1f 90       	pop	r1
    1aaa:	18 95       	reti
    1aac:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ab0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ab4:	47 01       	movw	r8, r14
    1ab6:	8f ef       	ldi	r24, 0xFF	; 255
    1ab8:	88 1a       	sub	r8, r24
    1aba:	98 0a       	sbc	r9, r24
    1abc:	09 2c       	mov	r0, r9
    1abe:	00 0c       	add	r0, r0
    1ac0:	aa 08       	sbc	r10, r10
    1ac2:	bb 08       	sbc	r11, r11
    1ac4:	d4 01       	movw	r26, r8
    1ac6:	99 27       	eor	r25, r25
    1ac8:	88 27       	eor	r24, r24
    1aca:	49 01       	movw	r8, r18
    1acc:	a1 2c       	mov	r10, r1
    1ace:	b1 2c       	mov	r11, r1
    1ad0:	88 2a       	or	r8, r24
    1ad2:	99 2a       	or	r9, r25
    1ad4:	aa 2a       	or	r10, r26
    1ad6:	bb 2a       	or	r11, r27
    1ad8:	5f cf       	rjmp	.-322    	; 0x1998 <__vector_7+0x6a>
    1ada:	ca 01       	movw	r24, r20
    1adc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ae0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1ae4:	42 1b       	sub	r20, r18
    1ae6:	53 0b       	sbc	r21, r19
    1ae8:	41 30       	cpi	r20, 0x01	; 1
    1aea:	51 05       	cpc	r21, r1
    1aec:	51 f0       	breq	.+20     	; 0x1b02 <__vector_7+0x1d4>
    1aee:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1af2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1af6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1afa:	82 60       	ori	r24, 0x02	; 2
    1afc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1b00:	b6 cf       	rjmp	.-148    	; 0x1a6e <__vector_7+0x140>
    1b02:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b06:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	f0 cf       	rjmp	.-32     	; 0x1aee <__vector_7+0x1c0>

00001b0e <async>:
    1b0e:	3f 92       	push	r3
    1b10:	4f 92       	push	r4
    1b12:	5f 92       	push	r5
    1b14:	6f 92       	push	r6
    1b16:	7f 92       	push	r7
    1b18:	8f 92       	push	r8
    1b1a:	9f 92       	push	r9
    1b1c:	af 92       	push	r10
    1b1e:	bf 92       	push	r11
    1b20:	cf 92       	push	r12
    1b22:	df 92       	push	r13
    1b24:	ef 92       	push	r14
    1b26:	ff 92       	push	r15
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	ef b7       	in	r30, 0x3f	; 63
    1b32:	e0 78       	andi	r30, 0x80	; 128
    1b34:	3e 2e       	mov	r3, r30
    1b36:	f8 94       	cli
    1b38:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <msgPool>
    1b3c:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <msgPool+0x1>
    1b40:	20 97       	sbiw	r28, 0x00	; 0
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <async+0x38>
    1b44:	52 c1       	rjmp	.+676    	; 0x1dea <async+0x2dc>
    1b46:	e8 81       	ld	r30, Y
    1b48:	f9 81       	ldd	r31, Y+1	; 0x01
    1b4a:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <msgPool+0x1>
    1b4e:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <msgPool>
    1b52:	1b 87       	std	Y+11, r17	; 0x0b
    1b54:	0a 87       	std	Y+10, r16	; 0x0a
    1b56:	fd 86       	std	Y+13, r15	; 0x0d
    1b58:	ec 86       	std	Y+12, r14	; 0x0c
    1b5a:	df 86       	std	Y+15, r13	; 0x0f
    1b5c:	ce 86       	std	Y+14, r12	; 0x0e
    1b5e:	33 20       	and	r3, r3
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <async+0x56>
    1b62:	6f c0       	rjmp	.+222    	; 0x1c42 <async+0x134>
    1b64:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1b68:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1b6c:	02 80       	ldd	r0, Z+2	; 0x02
    1b6e:	f3 81       	ldd	r31, Z+3	; 0x03
    1b70:	e0 2d       	mov	r30, r0
    1b72:	c2 80       	ldd	r12, Z+2	; 0x02
    1b74:	d3 80       	ldd	r13, Z+3	; 0x03
    1b76:	e4 80       	ldd	r14, Z+4	; 0x04
    1b78:	f5 80       	ldd	r15, Z+5	; 0x05
    1b7a:	c6 0e       	add	r12, r22
    1b7c:	d7 1e       	adc	r13, r23
    1b7e:	e8 1e       	adc	r14, r24
    1b80:	f9 1e       	adc	r15, r25
    1b82:	ca 82       	std	Y+2, r12	; 0x02
    1b84:	db 82       	std	Y+3, r13	; 0x03
    1b86:	ec 82       	std	Y+4, r14	; 0x04
    1b88:	fd 82       	std	Y+5, r15	; 0x05
    1b8a:	12 16       	cp	r1, r18
    1b8c:	13 06       	cpc	r1, r19
    1b8e:	14 06       	cpc	r1, r20
    1b90:	15 06       	cpc	r1, r21
    1b92:	0c f0       	brlt	.+2      	; 0x1b96 <async+0x88>
    1b94:	f8 c0       	rjmp	.+496    	; 0x1d86 <async+0x278>
    1b96:	da 01       	movw	r26, r20
    1b98:	c9 01       	movw	r24, r18
    1b9a:	8c 01       	movw	r16, r24
    1b9c:	9d 01       	movw	r18, r26
    1b9e:	0c 0d       	add	r16, r12
    1ba0:	1d 1d       	adc	r17, r13
    1ba2:	2e 1d       	adc	r18, r14
    1ba4:	3f 1d       	adc	r19, r15
    1ba6:	0e 83       	std	Y+6, r16	; 0x06
    1ba8:	1f 83       	std	Y+7, r17	; 0x07
    1baa:	28 87       	std	Y+8, r18	; 0x08
    1bac:	39 87       	std	Y+9, r19	; 0x09
    1bae:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
    1bb2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
    1bb6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bba:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bbe:	b0 99       	sbic	0x16, 0	; 22
    1bc0:	49 c0       	rjmp	.+146    	; 0x1c54 <async+0x146>
    1bc2:	2c 01       	movw	r4, r24
    1bc4:	09 2e       	mov	r0, r25
    1bc6:	00 0c       	add	r0, r0
    1bc8:	66 08       	sbc	r6, r6
    1bca:	77 08       	sbc	r7, r7
    1bcc:	52 01       	movw	r10, r4
    1bce:	99 24       	eor	r9, r9
    1bd0:	88 24       	eor	r8, r8
    1bd2:	2b 01       	movw	r4, r22
    1bd4:	61 2c       	mov	r6, r1
    1bd6:	71 2c       	mov	r7, r1
    1bd8:	48 28       	or	r4, r8
    1bda:	59 28       	or	r5, r9
    1bdc:	6a 28       	or	r6, r10
    1bde:	7b 28       	or	r7, r11
    1be0:	b7 01       	movw	r22, r14
    1be2:	a6 01       	movw	r20, r12
    1be4:	44 19       	sub	r20, r4
    1be6:	55 09       	sbc	r21, r5
    1be8:	66 09       	sbc	r22, r6
    1bea:	77 09       	sbc	r23, r7
    1bec:	14 16       	cp	r1, r20
    1bee:	15 06       	cpc	r1, r21
    1bf0:	16 06       	cpc	r1, r22
    1bf2:	17 06       	cpc	r1, r23
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <async+0xea>
    1bf6:	68 c0       	rjmp	.+208    	; 0x1cc8 <async+0x1ba>
    1bf8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <timerQ>
    1bfc:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <timerQ+0x1>
    1c00:	10 97       	sbiw	r26, 0x00	; 0
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <async+0xf8>
    1c04:	dc c0       	rjmp	.+440    	; 0x1dbe <async+0x2b0>
    1c06:	12 96       	adiw	r26, 0x02	; 2
    1c08:	0d 91       	ld	r16, X+
    1c0a:	1d 91       	ld	r17, X+
    1c0c:	2d 91       	ld	r18, X+
    1c0e:	3c 91       	ld	r19, X
    1c10:	15 97       	sbiw	r26, 0x05	; 5
    1c12:	c0 16       	cp	r12, r16
    1c14:	d1 06       	cpc	r13, r17
    1c16:	e2 06       	cpc	r14, r18
    1c18:	f3 06       	cpc	r15, r19
    1c1a:	5c f4       	brge	.+22     	; 0x1c32 <async+0x124>
    1c1c:	d0 c0       	rjmp	.+416    	; 0x1dbe <async+0x2b0>
    1c1e:	42 81       	ldd	r20, Z+2	; 0x02
    1c20:	53 81       	ldd	r21, Z+3	; 0x03
    1c22:	64 81       	ldd	r22, Z+4	; 0x04
    1c24:	75 81       	ldd	r23, Z+5	; 0x05
    1c26:	c4 16       	cp	r12, r20
    1c28:	d5 06       	cpc	r13, r21
    1c2a:	e6 06       	cpc	r14, r22
    1c2c:	f7 06       	cpc	r15, r23
    1c2e:	4c f1       	brlt	.+82     	; 0x1c82 <async+0x174>
    1c30:	df 01       	movw	r26, r30
    1c32:	ed 91       	ld	r30, X+
    1c34:	fc 91       	ld	r31, X
    1c36:	11 97       	sbiw	r26, 0x01	; 1
    1c38:	30 97       	sbiw	r30, 0x00	; 0
    1c3a:	89 f7       	brne	.-30     	; 0x1c1e <async+0x110>
    1c3c:	19 82       	std	Y+1, r1	; 0x01
    1c3e:	18 82       	st	Y, r1
    1c40:	22 c0       	rjmp	.+68     	; 0x1c86 <async+0x178>
    1c42:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <timestamp>
    1c46:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <timestamp+0x1>
    1c4a:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <timestamp+0x2>
    1c4e:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <timestamp+0x3>
    1c52:	93 cf       	rjmp	.-218    	; 0x1b7a <async+0x6c>
    1c54:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1c58:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1c5c:	2c 01       	movw	r4, r24
    1c5e:	4f ef       	ldi	r20, 0xFF	; 255
    1c60:	44 1a       	sub	r4, r20
    1c62:	54 0a       	sbc	r5, r20
    1c64:	05 2c       	mov	r0, r5
    1c66:	00 0c       	add	r0, r0
    1c68:	66 08       	sbc	r6, r6
    1c6a:	77 08       	sbc	r7, r7
    1c6c:	b2 01       	movw	r22, r4
    1c6e:	55 27       	eor	r21, r21
    1c70:	44 27       	eor	r20, r20
    1c72:	2f 01       	movw	r4, r30
    1c74:	61 2c       	mov	r6, r1
    1c76:	71 2c       	mov	r7, r1
    1c78:	44 2a       	or	r4, r20
    1c7a:	55 2a       	or	r5, r21
    1c7c:	66 2a       	or	r6, r22
    1c7e:	77 2a       	or	r7, r23
    1c80:	af cf       	rjmp	.-162    	; 0x1be0 <async+0xd2>
    1c82:	f9 83       	std	Y+1, r31	; 0x01
    1c84:	e8 83       	st	Y, r30
    1c86:	cd 93       	st	X+, r28
    1c88:	dc 93       	st	X, r29
    1c8a:	82 17       	cp	r24, r18
    1c8c:	93 07       	cpc	r25, r19
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <async+0x184>
    1c90:	7f c0       	rjmp	.+254    	; 0x1d90 <async+0x282>
    1c92:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c96:	8d 7f       	andi	r24, 0xFD	; 253
    1c98:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c9c:	33 20       	and	r3, r3
    1c9e:	09 f0       	breq	.+2      	; 0x1ca2 <async+0x194>
    1ca0:	78 94       	sei
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	bf 90       	pop	r11
    1cb6:	af 90       	pop	r10
    1cb8:	9f 90       	pop	r9
    1cba:	8f 90       	pop	r8
    1cbc:	7f 90       	pop	r7
    1cbe:	6f 90       	pop	r6
    1cc0:	5f 90       	pop	r5
    1cc2:	4f 90       	pop	r4
    1cc4:	3f 90       	pop	r3
    1cc6:	08 95       	ret
    1cc8:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <msgQ>
    1ccc:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <msgQ+0x1>
    1cd0:	10 97       	sbiw	r26, 0x00	; 0
    1cd2:	09 f4       	brne	.+2      	; 0x1cd6 <async+0x1c8>
    1cd4:	83 c0       	rjmp	.+262    	; 0x1ddc <async+0x2ce>
    1cd6:	16 96       	adiw	r26, 0x06	; 6
    1cd8:	cd 90       	ld	r12, X+
    1cda:	dd 90       	ld	r13, X+
    1cdc:	ed 90       	ld	r14, X+
    1cde:	fc 90       	ld	r15, X
    1ce0:	19 97       	sbiw	r26, 0x09	; 9
    1ce2:	0c 15       	cp	r16, r12
    1ce4:	1d 05       	cpc	r17, r13
    1ce6:	2e 05       	cpc	r18, r14
    1ce8:	3f 05       	cpc	r19, r15
    1cea:	64 f4       	brge	.+24     	; 0x1d04 <async+0x1f6>
    1cec:	77 c0       	rjmp	.+238    	; 0x1ddc <async+0x2ce>
    1cee:	c6 80       	ldd	r12, Z+6	; 0x06
    1cf0:	d7 80       	ldd	r13, Z+7	; 0x07
    1cf2:	e0 84       	ldd	r14, Z+8	; 0x08
    1cf4:	f1 84       	ldd	r15, Z+9	; 0x09
    1cf6:	0c 15       	cp	r16, r12
    1cf8:	1d 05       	cpc	r17, r13
    1cfa:	2e 05       	cpc	r18, r14
    1cfc:	3f 05       	cpc	r19, r15
    1cfe:	0c f4       	brge	.+2      	; 0x1d02 <async+0x1f4>
    1d00:	5b c0       	rjmp	.+182    	; 0x1db8 <async+0x2aa>
    1d02:	df 01       	movw	r26, r30
    1d04:	ed 91       	ld	r30, X+
    1d06:	fc 91       	ld	r31, X
    1d08:	11 97       	sbiw	r26, 0x01	; 1
    1d0a:	30 97       	sbiw	r30, 0x00	; 0
    1d0c:	81 f7       	brne	.-32     	; 0x1cee <async+0x1e0>
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    1d10:	18 82       	st	Y, r1
    1d12:	cd 93       	st	X+, r28
    1d14:	dc 93       	st	X, r29
    1d16:	33 20       	and	r3, r3
    1d18:	21 f2       	breq	.-120    	; 0x1ca2 <async+0x194>
    1d1a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1d1e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <async+0x21a>
    1d26:	bc cf       	rjmp	.-136    	; 0x1ca0 <async+0x192>
    1d28:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1d2c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1d30:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <msgQ>
    1d34:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <msgQ+0x1>
    1d38:	02 81       	ldd	r16, Z+2	; 0x02
    1d3a:	13 81       	ldd	r17, Z+3	; 0x03
    1d3c:	d9 01       	movw	r26, r18
    1d3e:	16 96       	adiw	r26, 0x06	; 6
    1d40:	4d 91       	ld	r20, X+
    1d42:	5d 91       	ld	r21, X+
    1d44:	6d 91       	ld	r22, X+
    1d46:	7c 91       	ld	r23, X
    1d48:	19 97       	sbiw	r26, 0x09	; 9
    1d4a:	d8 01       	movw	r26, r16
    1d4c:	16 96       	adiw	r26, 0x06	; 6
    1d4e:	0d 91       	ld	r16, X+
    1d50:	1d 91       	ld	r17, X+
    1d52:	2d 91       	ld	r18, X+
    1d54:	3c 91       	ld	r19, X
    1d56:	19 97       	sbiw	r26, 0x09	; 9
    1d58:	40 1b       	sub	r20, r16
    1d5a:	51 0b       	sbc	r21, r17
    1d5c:	62 0b       	sbc	r22, r18
    1d5e:	73 0b       	sbc	r23, r19
    1d60:	77 ff       	sbrs	r23, 7
    1d62:	9e cf       	rjmp	.-196    	; 0x1ca0 <async+0x192>
    1d64:	dc 01       	movw	r26, r24
    1d66:	2d 91       	ld	r18, X+
    1d68:	3c 91       	ld	r19, X
    1d6a:	11 97       	sbiw	r26, 0x01	; 1
    1d6c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1d70:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1d74:	ed 93       	st	X+, r30
    1d76:	fc 93       	st	X, r31
    1d78:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1d7c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1d80:	0e 94 41 04 	call	0x882	; 0x882 <dispatch>
    1d84:	8d cf       	rjmp	.-230    	; 0x1ca0 <async+0x192>
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	9f ef       	ldi	r25, 0xFF	; 255
    1d8a:	af ef       	ldi	r26, 0xFF	; 255
    1d8c:	bf e7       	ldi	r27, 0x7F	; 127
    1d8e:	05 cf       	rjmp	.-502    	; 0x1b9a <async+0x8c>
    1d90:	c8 01       	movw	r24, r16
    1d92:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d96:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d9a:	04 1b       	sub	r16, r20
    1d9c:	15 0b       	sbc	r17, r21
    1d9e:	01 30       	cpi	r16, 0x01	; 1
    1da0:	11 05       	cpc	r17, r1
    1da2:	b1 f0       	breq	.+44     	; 0x1dd0 <async+0x2c2>
    1da4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1da8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1dac:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1db0:	82 60       	ori	r24, 0x02	; 2
    1db2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1db6:	72 cf       	rjmp	.-284    	; 0x1c9c <async+0x18e>
    1db8:	f9 83       	std	Y+1, r31	; 0x01
    1dba:	e8 83       	st	Y, r30
    1dbc:	aa cf       	rjmp	.-172    	; 0x1d12 <async+0x204>
    1dbe:	b9 83       	std	Y+1, r27	; 0x01
    1dc0:	a8 83       	st	Y, r26
    1dc2:	d0 93 1b 01 	sts	0x011B, r29	; 0x80011b <timerQ+0x1>
    1dc6:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <timerQ>
    1dca:	97 01       	movw	r18, r14
    1dcc:	86 01       	movw	r16, r12
    1dce:	5d cf       	rjmp	.-326    	; 0x1c8a <async+0x17c>
    1dd0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1dd4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	e4 cf       	rjmp	.-56     	; 0x1da4 <async+0x296>
    1ddc:	b9 83       	std	Y+1, r27	; 0x01
    1dde:	a8 83       	st	Y, r26
    1de0:	d0 93 1d 01 	sts	0x011D, r29	; 0x80011d <msgQ+0x1>
    1de4:	c0 93 1c 01 	sts	0x011C, r28	; 0x80011c <msgQ>
    1de8:	96 cf       	rjmp	.-212    	; 0x1d16 <async+0x208>
    1dea:	0e 94 a1 04 	call	0x942	; 0x942 <dequeue.part.0>

00001dee <sync>:
    1dee:	cf 92       	push	r12
    1df0:	df 92       	push	r13
    1df2:	ef 92       	push	r14
    1df4:	ff 92       	push	r15
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	cf 93       	push	r28
    1dfc:	df 93       	push	r29
    1dfe:	ec 01       	movw	r28, r24
    1e00:	7b 01       	movw	r14, r22
    1e02:	6a 01       	movw	r12, r20
    1e04:	1f b7       	in	r17, 0x3f	; 63
    1e06:	10 78       	andi	r17, 0x80	; 128
    1e08:	f8 94       	cli
    1e0a:	a8 81       	ld	r26, Y
    1e0c:	b9 81       	ldd	r27, Y+1	; 0x01
    1e0e:	10 97       	sbiw	r26, 0x00	; 0
    1e10:	19 f4       	brne	.+6      	; 0x1e18 <sync+0x2a>
    1e12:	62 c0       	rjmp	.+196    	; 0x1ed8 <sync+0xea>
    1e14:	a0 81       	ld	r26, Z
    1e16:	b1 81       	ldd	r27, Z+1	; 0x01
    1e18:	14 96       	adiw	r26, 0x04	; 4
    1e1a:	ed 91       	ld	r30, X+
    1e1c:	fc 91       	ld	r31, X
    1e1e:	15 97       	sbiw	r26, 0x05	; 5
    1e20:	30 97       	sbiw	r30, 0x00	; 0
    1e22:	c1 f7       	brne	.-16     	; 0x1e14 <sync+0x26>
    1e24:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1e28:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1e2c:	2a 17       	cp	r18, r26
    1e2e:	3b 07       	cpc	r19, r27
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <sync+0x46>
    1e32:	4c c0       	rjmp	.+152    	; 0x1ecc <sync+0xde>
    1e34:	11 23       	and	r17, r17
    1e36:	a1 f1       	breq	.+104    	; 0x1ea0 <sync+0xb2>
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	19 f0       	breq	.+6      	; 0x1e46 <sync+0x58>
    1e40:	fc 01       	movw	r30, r24
    1e42:	15 82       	std	Z+5, r1	; 0x05
    1e44:	14 82       	std	Z+4, r1	; 0x04
    1e46:	3b 83       	std	Y+3, r19	; 0x03
    1e48:	2a 83       	std	Y+2, r18	; 0x02
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	d5 83       	std	Z+5, r29	; 0x05
    1e4e:	c4 83       	std	Z+4, r28	; 0x04
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 41 04 	call	0x882	; 0x882 <dispatch>
    1e56:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1e5a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1e5e:	82 81       	ldd	r24, Z+2	; 0x02
    1e60:	93 81       	ldd	r25, Z+3	; 0x03
    1e62:	89 2b       	or	r24, r25
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <sync+0x7a>
    1e66:	41 c0       	rjmp	.+130    	; 0x1eea <sync+0xfc>
    1e68:	f9 83       	std	Y+1, r31	; 0x01
    1e6a:	e8 83       	st	Y, r30
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <sync+0x88>
    1e74:	78 94       	sei
    1e76:	b6 01       	movw	r22, r12
    1e78:	ce 01       	movw	r24, r28
    1e7a:	f7 01       	movw	r30, r14
    1e7c:	09 95       	icall
    1e7e:	f8 2e       	mov	r15, r24
    1e80:	09 2f       	mov	r16, r25
    1e82:	8f b7       	in	r24, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	19 82       	std	Y+1, r1	; 0x01
    1e88:	18 82       	st	Y, r1
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	82 30       	cpi	r24, 0x02	; 2
    1e90:	91 05       	cpc	r25, r1
    1e92:	a0 f4       	brcc	.+40     	; 0x1ebc <sync+0xce>
    1e94:	11 23       	and	r17, r17
    1e96:	79 f0       	breq	.+30     	; 0x1eb6 <sync+0xc8>
    1e98:	78 94       	sei
    1e9a:	8f 2d       	mov	r24, r15
    1e9c:	90 2f       	mov	r25, r16
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <sync+0xb6>
    1ea0:	8f ef       	ldi	r24, 0xFF	; 255
    1ea2:	9f ef       	ldi	r25, 0xFF	; 255
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	ff 90       	pop	r15
    1eae:	ef 90       	pop	r14
    1eb0:	df 90       	pop	r13
    1eb2:	cf 90       	pop	r12
    1eb4:	08 95       	ret
    1eb6:	8f 2d       	mov	r24, r15
    1eb8:	90 2f       	mov	r25, r16
    1eba:	f4 cf       	rjmp	.-24     	; 0x1ea4 <sync+0xb6>
    1ebc:	1b 82       	std	Y+3, r1	; 0x03
    1ebe:	1a 82       	std	Y+2, r1	; 0x02
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	15 82       	std	Z+5, r1	; 0x05
    1ec4:	14 82       	std	Z+4, r1	; 0x04
    1ec6:	0e 94 41 04 	call	0x882	; 0x882 <dispatch>
    1eca:	e4 cf       	rjmp	.-56     	; 0x1e94 <sync+0xa6>
    1ecc:	11 23       	and	r17, r17
    1ece:	41 f3       	breq	.-48     	; 0x1ea0 <sync+0xb2>
    1ed0:	78 94       	sei
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    1ed4:	9f ef       	ldi	r25, 0xFF	; 255
    1ed6:	e6 cf       	rjmp	.-52     	; 0x1ea4 <sync+0xb6>
    1ed8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1edc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1ee0:	99 83       	std	Y+1, r25	; 0x01
    1ee2:	88 83       	st	Y, r24
    1ee4:	11 23       	and	r17, r17
    1ee6:	39 f2       	breq	.-114    	; 0x1e76 <sync+0x88>
    1ee8:	c1 cf       	rjmp	.-126    	; 0x1e6c <sync+0x7e>
    1eea:	78 94       	sei
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	d9 cf       	rjmp	.-78     	; 0x1ea4 <sync+0xb6>

00001ef2 <run>:
    1ef2:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <msgQ>
    1ef6:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <msgQ+0x1>
    1efa:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1efe:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1f02:	20 97       	sbiw	r28, 0x00	; 0
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <run+0x16>
    1f06:	6e c0       	rjmp	.+220    	; 0x1fe4 <run+0xf2>
    1f08:	88 81       	ld	r24, Y
    1f0a:	99 81       	ldd	r25, Y+1	; 0x01
    1f0c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <msgQ+0x1>
    1f10:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <msgQ>
    1f14:	d3 83       	std	Z+3, r29	; 0x03
    1f16:	c2 83       	std	Z+2, r28	; 0x02
    1f18:	78 94       	sei
    1f1a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f1c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f1e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f20:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f22:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f24:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f26:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <sync>
    1f2a:	8f b7       	in	r24, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    1f32:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    1f36:	99 83       	std	Y+1, r25	; 0x01
    1f38:	88 83       	st	Y, r24
    1f3a:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    1f3e:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    1f42:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <activeStack>
    1f46:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <activeStack+0x1>
    1f4a:	f7 01       	movw	r30, r14
    1f4c:	a0 81       	ld	r26, Z
    1f4e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f50:	12 96       	adiw	r26, 0x02	; 2
    1f52:	8d 91       	ld	r24, X+
    1f54:	9c 91       	ld	r25, X
    1f56:	13 97       	sbiw	r26, 0x03	; 3
    1f58:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <msgQ>
    1f5c:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <msgQ+0x1>
    1f60:	20 97       	sbiw	r28, 0x00	; 0
    1f62:	a9 f0       	breq	.+42     	; 0x1f8e <run+0x9c>
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	49 f2       	breq	.-110    	; 0x1efa <run+0x8>
    1f68:	4e 81       	ldd	r20, Y+6	; 0x06
    1f6a:	5f 81       	ldd	r21, Y+7	; 0x07
    1f6c:	68 85       	ldd	r22, Y+8	; 0x08
    1f6e:	79 85       	ldd	r23, Y+9	; 0x09
    1f70:	fc 01       	movw	r30, r24
    1f72:	06 81       	ldd	r16, Z+6	; 0x06
    1f74:	17 81       	ldd	r17, Z+7	; 0x07
    1f76:	20 85       	ldd	r18, Z+8	; 0x08
    1f78:	31 85       	ldd	r19, Z+9	; 0x09
    1f7a:	40 1b       	sub	r20, r16
    1f7c:	51 0b       	sbc	r21, r17
    1f7e:	62 0b       	sbc	r22, r18
    1f80:	73 0b       	sbc	r23, r19
    1f82:	14 16       	cp	r1, r20
    1f84:	15 06       	cpc	r1, r21
    1f86:	16 06       	cpc	r1, r22
    1f88:	17 06       	cpc	r1, r23
    1f8a:	0c f0       	brlt	.+2      	; 0x1f8e <run+0x9c>
    1f8c:	b6 cf       	rjmp	.-148    	; 0x1efa <run+0x8>
    1f8e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <activeStack+0x1>
    1f92:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <activeStack>
    1f96:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f9a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f9e:	f7 01       	movw	r30, r14
    1fa0:	91 83       	std	Z+1, r25	; 0x01
    1fa2:	80 83       	st	Z, r24
    1fa4:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <threadPool+0x1>
    1fa8:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <threadPool>
    1fac:	14 96       	adiw	r26, 0x04	; 4
    1fae:	ed 91       	ld	r30, X+
    1fb0:	fc 91       	ld	r31, X
    1fb2:	15 97       	sbiw	r26, 0x05	; 5
    1fb4:	30 97       	sbiw	r30, 0x00	; 0
    1fb6:	41 f0       	breq	.+16     	; 0x1fc8 <run+0xd6>
    1fb8:	a0 81       	ld	r26, Z
    1fba:	b1 81       	ldd	r27, Z+1	; 0x01
    1fbc:	14 96       	adiw	r26, 0x04	; 4
    1fbe:	ed 91       	ld	r30, X+
    1fc0:	fc 91       	ld	r31, X
    1fc2:	15 97       	sbiw	r26, 0x05	; 5
    1fc4:	30 97       	sbiw	r30, 0x00	; 0
    1fc6:	c1 f7       	brne	.-16     	; 0x1fb8 <run+0xc6>
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 41 04 	call	0x882	; 0x882 <dispatch>
    1fce:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <msgQ>
    1fd2:	d0 91 1d 01 	lds	r29, 0x011D	; 0x80011d <msgQ+0x1>
    1fd6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1fda:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1fde:	20 97       	sbiw	r28, 0x00	; 0
    1fe0:	09 f0       	breq	.+2      	; 0x1fe4 <run+0xf2>
    1fe2:	92 cf       	rjmp	.-220    	; 0x1f08 <run+0x16>
    1fe4:	0e 94 a1 04 	call	0x942	; 0x942 <dequeue.part.0>

00001fe8 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1fe8:	42 31       	cpi	r20, 0x12	; 18
    1fea:	b8 f4       	brcc	.+46     	; 0x201a <install+0x32>
        char status;
        DISABLE(status);
    1fec:	2f b7       	in	r18, 0x3f	; 63
    1fee:	f8 94       	cli
        otable[i] = obj;
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	44 0f       	add	r20, r20
    1ff4:	55 1f       	adc	r21, r21
    1ff6:	fa 01       	movw	r30, r20
    1ff8:	e2 5e       	subi	r30, 0xE2	; 226
    1ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
        mtable[i] = m;
    2000:	fa 01       	movw	r30, r20
    2002:	ea 54       	subi	r30, 0x4A	; 74
    2004:	fe 4f       	sbci	r31, 0xFE	; 254
    2006:	71 83       	std	Z+1, r23	; 0x01
    2008:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    200a:	41 e0       	ldi	r20, 0x01	; 1
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	fc 01       	movw	r30, r24
    2010:	53 83       	std	Z+3, r21	; 0x03
    2012:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    2014:	27 ff       	sbrs	r18, 7
    2016:	01 c0       	rjmp	.+2      	; 0x201a <install+0x32>
    2018:	78 94       	sei
    201a:	08 95       	ret

0000201c <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    201c:	8c 01       	movw	r16, r24
    201e:	7b 01       	movw	r14, r22
    2020:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2022:	8f b7       	in	r24, 0x3f	; 63
    2024:	f8 94       	cli
    initialize();
    2026:	0e 94 d6 03 	call	0x7ac	; 0x7ac <initialize>
    ENABLE(1);
    202a:	78 94       	sei
    if (m != NULL)
    202c:	e1 14       	cp	r14, r1
    202e:	f1 04       	cpc	r15, r1
    2030:	41 f0       	breq	.+16     	; 0x2042 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	a9 01       	movw	r20, r18
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	cb 01       	movw	r24, r22
    203e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <async>
    DISABLE(status);
    2042:	8f b7       	in	r24, 0x3f	; 63
    2044:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    2046:	0e 94 61 04 	call	0x8c2	; 0x8c2 <schedule>
    ENABLE(1);
    204a:	78 94       	sei
    while (1) {
        SLEEP();
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	83 bf       	out	0x33, r24	; 51
    2050:	88 95       	sleep
    2052:	fd cf       	rjmp	.-6      	; 0x204e <tinytimber+0x32>

00002054 <__divmodhi4>:
    2054:	97 fb       	bst	r25, 7
    2056:	07 2e       	mov	r0, r23
    2058:	16 f4       	brtc	.+4      	; 0x205e <__divmodhi4+0xa>
    205a:	00 94       	com	r0
    205c:	07 d0       	rcall	.+14     	; 0x206c <__divmodhi4_neg1>
    205e:	77 fd       	sbrc	r23, 7
    2060:	09 d0       	rcall	.+18     	; 0x2074 <__divmodhi4_neg2>
    2062:	0e 94 44 10 	call	0x2088	; 0x2088 <__udivmodhi4>
    2066:	07 fc       	sbrc	r0, 7
    2068:	05 d0       	rcall	.+10     	; 0x2074 <__divmodhi4_neg2>
    206a:	3e f4       	brtc	.+14     	; 0x207a <__divmodhi4_exit>

0000206c <__divmodhi4_neg1>:
    206c:	90 95       	com	r25
    206e:	81 95       	neg	r24
    2070:	9f 4f       	sbci	r25, 0xFF	; 255
    2072:	08 95       	ret

00002074 <__divmodhi4_neg2>:
    2074:	70 95       	com	r23
    2076:	61 95       	neg	r22
    2078:	7f 4f       	sbci	r23, 0xFF	; 255

0000207a <__divmodhi4_exit>:
    207a:	08 95       	ret

0000207c <__tablejump2__>:
    207c:	ee 0f       	add	r30, r30
    207e:	ff 1f       	adc	r31, r31
    2080:	05 90       	lpm	r0, Z+
    2082:	f4 91       	lpm	r31, Z
    2084:	e0 2d       	mov	r30, r0
    2086:	09 94       	ijmp

00002088 <__udivmodhi4>:
    2088:	aa 1b       	sub	r26, r26
    208a:	bb 1b       	sub	r27, r27
    208c:	51 e1       	ldi	r21, 0x11	; 17
    208e:	07 c0       	rjmp	.+14     	; 0x209e <__udivmodhi4_ep>

00002090 <__udivmodhi4_loop>:
    2090:	aa 1f       	adc	r26, r26
    2092:	bb 1f       	adc	r27, r27
    2094:	a6 17       	cp	r26, r22
    2096:	b7 07       	cpc	r27, r23
    2098:	10 f0       	brcs	.+4      	; 0x209e <__udivmodhi4_ep>
    209a:	a6 1b       	sub	r26, r22
    209c:	b7 0b       	sbc	r27, r23

0000209e <__udivmodhi4_ep>:
    209e:	88 1f       	adc	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	5a 95       	dec	r21
    20a4:	a9 f7       	brne	.-22     	; 0x2090 <__udivmodhi4_loop>
    20a6:	80 95       	com	r24
    20a8:	90 95       	com	r25
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	08 95       	ret

000020b0 <setjmp>:
    20b0:	dc 01       	movw	r26, r24
    20b2:	2d 92       	st	X+, r2
    20b4:	3d 92       	st	X+, r3
    20b6:	4d 92       	st	X+, r4
    20b8:	5d 92       	st	X+, r5
    20ba:	6d 92       	st	X+, r6
    20bc:	7d 92       	st	X+, r7
    20be:	8d 92       	st	X+, r8
    20c0:	9d 92       	st	X+, r9
    20c2:	ad 92       	st	X+, r10
    20c4:	bd 92       	st	X+, r11
    20c6:	cd 92       	st	X+, r12
    20c8:	dd 92       	st	X+, r13
    20ca:	ed 92       	st	X+, r14
    20cc:	fd 92       	st	X+, r15
    20ce:	0d 93       	st	X+, r16
    20d0:	1d 93       	st	X+, r17
    20d2:	cd 93       	st	X+, r28
    20d4:	dd 93       	st	X+, r29
    20d6:	ff 91       	pop	r31
    20d8:	ef 91       	pop	r30
    20da:	8d b7       	in	r24, 0x3d	; 61
    20dc:	8d 93       	st	X+, r24
    20de:	8e b7       	in	r24, 0x3e	; 62
    20e0:	8d 93       	st	X+, r24
    20e2:	8f b7       	in	r24, 0x3f	; 63
    20e4:	8d 93       	st	X+, r24
    20e6:	ed 93       	st	X+, r30
    20e8:	fd 93       	st	X+, r31
    20ea:	88 27       	eor	r24, r24
    20ec:	99 27       	eor	r25, r25
    20ee:	09 94       	ijmp

000020f0 <longjmp>:
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	91 05       	cpc	r25, r1
    20f8:	81 1d       	adc	r24, r1
    20fa:	2d 90       	ld	r2, X+
    20fc:	3d 90       	ld	r3, X+
    20fe:	4d 90       	ld	r4, X+
    2100:	5d 90       	ld	r5, X+
    2102:	6d 90       	ld	r6, X+
    2104:	7d 90       	ld	r7, X+
    2106:	8d 90       	ld	r8, X+
    2108:	9d 90       	ld	r9, X+
    210a:	ad 90       	ld	r10, X+
    210c:	bd 90       	ld	r11, X+
    210e:	cd 90       	ld	r12, X+
    2110:	dd 90       	ld	r13, X+
    2112:	ed 90       	ld	r14, X+
    2114:	fd 90       	ld	r15, X+
    2116:	0d 91       	ld	r16, X+
    2118:	1d 91       	ld	r17, X+
    211a:	cd 91       	ld	r28, X+
    211c:	dd 91       	ld	r29, X+
    211e:	ed 91       	ld	r30, X+
    2120:	fd 91       	ld	r31, X+
    2122:	0d 90       	ld	r0, X+
    2124:	f8 94       	cli
    2126:	fe bf       	out	0x3e, r31	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	ed bf       	out	0x3d, r30	; 61
    212c:	ed 91       	ld	r30, X+
    212e:	fd 91       	ld	r31, X+
    2130:	09 94       	ijmp

00002132 <_exit>:
    2132:	f8 94       	cli

00002134 <__stop_program>:
    2134:	ff cf       	rjmp	.-2      	; 0x2134 <__stop_program>
