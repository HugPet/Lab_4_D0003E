
Lab_4_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000020d8  0000216c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800112  00800112  0000217e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000217e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000238  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b31  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001069  00000000  00000000  00004f59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000172c  00000000  00000000  00005fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b78  00000000  00000000  000076f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091d  00000000  00000000  00008268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003450  00000000  00000000  00008b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000bfd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_1>
       8:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__vector_2>
       c:	0c 94 55 05 	jmp	0xaaa	; 0xaaa <__vector_3>
      10:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_4>
      14:	0c 94 2d 06 	jmp	0xc5a	; 0xc5a <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_9>
      28:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__vector_10>
      2c:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_11>
      30:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__vector_12>
      34:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__vector_13>
      38:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_14>
      3c:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_15>
      40:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__vector_16>
      44:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_17>
      48:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__vector_18>
      4c:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__vector_19>
      50:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_20>
      54:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_21>
      58:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_22>
      5c:	63 00       	.word	0x0063	; ????
      5e:	b4 00       	.word	0x00b4	; ????
      60:	bd 00       	.word	0x00bd	; ????
      62:	c6 00       	.word	0x00c6	; ????
      64:	cf 00       	.word	0x00cf	; ????
      66:	d8 00       	.word	0x00d8	; ????
      68:	e1 00       	.word	0x00e1	; ????
      6a:	ea 00       	.word	0x00ea	; ????
      6c:	f3 00       	.word	0x00f3	; ????
      6e:	fc 00       	.word	0x00fc	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 ed       	ldi	r30, 0xD8	; 216
      84:	f0 e2       	ldi	r31, 0x20	; 32
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 31       	cpi	r26, 0x12	; 18
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a2 e1       	ldi	r26, 0x12	; 18
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a5 36       	cpi	r26, 0x65	; 101
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 07 03 	call	0x60e	; 0x60e <main>
      a6:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <writeChar>:
// .c for a dedicated writer

#include "DediWriter.h"

void writeChar(char ch, int pos){
	DISABLE;
      ae:	78 94       	sei
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	f0 97       	sbiw	r30, 0x30	; 48
      b6:	ea 30       	cpi	r30, 0x0A	; 10
      b8:	f1 05       	cpc	r31, r1
      ba:	08 f0       	brcs	.+2      	; 0xbe <writeChar+0x10>
      bc:	54 c0       	rjmp	.+168    	; 0x166 <writeChar+0xb8>
      be:	e2 5d       	subi	r30, 0xD2	; 210
      c0:	ff 4f       	sbci	r31, 0xFF	; 255
      c2:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
      ca:	45 e0       	ldi	r20, 0x05	; 5
      cc:	50 e0       	ldi	r21, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
      ce:	e5 e0       	ldi	r30, 0x05	; 5
      d0:	f0 e0       	ldi	r31, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
      d6:	62 30       	cpi	r22, 0x02	; 2
      d8:	71 05       	cpc	r23, r1
      da:	09 f4       	brne	.+2      	; 0xde <writeChar+0x30>
      dc:	3a c1       	rjmp	.+628    	; 0x352 <writeChar+0x2a4>
      de:	0c f4       	brge	.+2      	; 0xe2 <writeChar+0x34>
      e0:	94 c0       	rjmp	.+296    	; 0x20a <writeChar+0x15c>
      e2:	64 30       	cpi	r22, 0x04	; 4
      e4:	71 05       	cpc	r23, r1
      e6:	09 f4       	brne	.+2      	; 0xea <writeChar+0x3c>
      e8:	c9 c0       	rjmp	.+402    	; 0x27c <writeChar+0x1ce>
      ea:	0c f4       	brge	.+2      	; 0xee <writeChar+0x40>
      ec:	01 c1       	rjmp	.+514    	; 0x2f0 <writeChar+0x242>
      ee:	65 30       	cpi	r22, 0x05	; 5
      f0:	71 05       	cpc	r23, r1
      f2:	c1 f5       	brne	.+112    	; 0x164 <writeChar+0xb6>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
      f4:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
      f8:	6f 76       	andi	r22, 0x6F	; 111
      fa:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
      fe:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     102:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
     104:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     108:	82 95       	swap	r24
     10a:	92 95       	swap	r25
     10c:	90 7f       	andi	r25, 0xF0	; 240
     10e:	98 27       	eor	r25, r24
     110:	80 7f       	andi	r24, 0xF0	; 240
     112:	98 27       	eor	r25, r24
     114:	86 2b       	or	r24, r22
     116:	87 2b       	or	r24, r23
     118:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     11c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     120:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     122:	e2 95       	swap	r30
     124:	f2 95       	swap	r31
     126:	f0 7f       	andi	r31, 0xF0	; 240
     128:	fe 27       	eor	r31, r30
     12a:	e0 7f       	andi	r30, 0xF0	; 240
     12c:	fe 27       	eor	r31, r30
     12e:	e8 2b       	or	r30, r24
     130:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     134:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     138:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     13a:	42 95       	swap	r20
     13c:	52 95       	swap	r21
     13e:	50 7f       	andi	r21, 0xF0	; 240
     140:	54 27       	eor	r21, r20
     142:	40 7f       	andi	r20, 0xF0	; 240
     144:	54 27       	eor	r21, r20
     146:	48 2b       	or	r20, r24
     148:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     14c:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     150:	8f 70       	andi	r24, 0x0F	; 15
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     152:	22 95       	swap	r18
     154:	32 95       	swap	r19
     156:	30 7f       	andi	r19, 0xF0	; 240
     158:	32 27       	eor	r19, r18
     15a:	20 7f       	andi	r18, 0xF0	; 240
     15c:	32 27       	eor	r19, r18
     15e:	28 2b       	or	r18, r24
     160:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
	default:
		ENABLE;
		return;
	}
	ENABLE;
     164:	f8 94       	cli
     166:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     16c:	41 e0       	ldi	r20, 0x01	; 1
     16e:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
     170:	e1 e0       	ldi	r30, 0x01	; 1
     172:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	ae cf       	rjmp	.-164    	; 0xd6 <writeChar+0x28>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
     17e:	4e e0       	ldi	r20, 0x0E	; 14
     180:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     182:	e1 e0       	ldi	r30, 0x01	; 1
     184:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
     18a:	a5 cf       	rjmp	.-182    	; 0xd6 <writeChar+0x28>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
     190:	4b e0       	ldi	r20, 0x0B	; 11
     192:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     194:	e1 e0       	ldi	r30, 0x01	; 1
     196:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     19c:	9c cf       	rjmp	.-200    	; 0xd6 <writeChar+0x28>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1a2:	4b e0       	ldi	r20, 0x0B	; 11
     1a4:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
     1a6:	e5 e0       	ldi	r30, 0x05	; 5
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
     1ae:	93 cf       	rjmp	.-218    	; 0xd6 <writeChar+0x28>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
     1b4:	4b e0       	ldi	r20, 0x0B	; 11
     1b6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1b8:	e4 e0       	ldi	r30, 0x04	; 4
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     1c0:	8a cf       	rjmp	.-236    	; 0xd6 <writeChar+0x28>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
     1c6:	4f e0       	ldi	r20, 0x0F	; 15
     1c8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1ca:	e4 e0       	ldi	r30, 0x04	; 4
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1d2:	81 cf       	rjmp	.-254    	; 0xd6 <writeChar+0x28>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     1dc:	e1 e0       	ldi	r30, 0x01	; 1
     1de:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
     1e4:	78 cf       	rjmp	.-272    	; 0xd6 <writeChar+0x28>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
     1ea:	4f e0       	ldi	r20, 0x0F	; 15
     1ec:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     1ee:	e5 e0       	ldi	r30, 0x05	; 5
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1f6:	6f cf       	rjmp	.-290    	; 0xd6 <writeChar+0x28>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1fc:	4b e0       	ldi	r20, 0x0B	; 11
     1fe:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     200:	e5 e0       	ldi	r30, 0x05	; 5
     202:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     208:	66 cf       	rjmp	.-308    	; 0xd6 <writeChar+0x28>
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
     20a:	61 15       	cp	r22, r1
     20c:	71 05       	cpc	r23, r1
     20e:	09 f4       	brne	.+2      	; 0x212 <writeChar+0x164>
     210:	56 c0       	rjmp	.+172    	; 0x2be <writeChar+0x210>
     212:	61 30       	cpi	r22, 0x01	; 1
     214:	71 05       	cpc	r23, r1
     216:	09 f0       	breq	.+2      	; 0x21a <writeChar+0x16c>
     218:	a5 cf       	rjmp	.-182    	; 0x164 <writeChar+0xb6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     21a:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     21e:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     220:	82 95       	swap	r24
     222:	92 95       	swap	r25
     224:	90 7f       	andi	r25, 0xF0	; 240
     226:	98 27       	eor	r25, r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	98 27       	eor	r25, r24
     22c:	86 2b       	or	r24, r22
     22e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     232:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     236:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     238:	e2 95       	swap	r30
     23a:	f2 95       	swap	r31
     23c:	f0 7f       	andi	r31, 0xF0	; 240
     23e:	fe 27       	eor	r31, r30
     240:	e0 7f       	andi	r30, 0xF0	; 240
     242:	fe 27       	eor	r31, r30
     244:	e8 2b       	or	r30, r24
     246:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     24a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     24e:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     250:	42 95       	swap	r20
     252:	52 95       	swap	r21
     254:	50 7f       	andi	r21, 0xF0	; 240
     256:	54 27       	eor	r21, r20
     258:	40 7f       	andi	r20, 0xF0	; 240
     25a:	54 27       	eor	r21, r20
     25c:	48 2b       	or	r20, r24
     25e:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     262:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     266:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     268:	22 95       	swap	r18
     26a:	32 95       	swap	r19
     26c:	30 7f       	andi	r19, 0xF0	; 240
     26e:	32 27       	eor	r19, r18
     270:	20 7f       	andi	r18, 0xF0	; 240
     272:	32 27       	eor	r19, r18
     274:	28 2b       	or	r18, r24
     276:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     27a:	74 cf       	rjmp	.-280    	; 0x164 <writeChar+0xb6>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
     27c:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     280:	66 7f       	andi	r22, 0xF6	; 246
     282:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     286:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     28a:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     28c:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     290:	86 2b       	or	r24, r22
     292:	87 2b       	or	r24, r23
     294:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     298:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     29c:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     29e:	e8 2b       	or	r30, r24
     2a0:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     2a4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2a8:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     2aa:	48 2b       	or	r20, r24
     2ac:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     2b0:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2b4:	80 7f       	andi	r24, 0xF0	; 240
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     2b6:	28 2b       	or	r18, r24
     2b8:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
     2bc:	53 cf       	rjmp	.-346    	; 0x164 <writeChar+0xb6>
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     2be:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2c2:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     2c4:	86 2b       	or	r24, r22
     2c6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     2ca:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2ce:	80 7f       	andi	r24, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     2d0:	e8 2b       	or	r30, r24
     2d2:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     2d6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2da:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     2dc:	48 2b       	or	r20, r24
     2de:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     2e2:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2e6:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     2e8:	28 2b       	or	r18, r24
     2ea:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     2ee:	3a cf       	rjmp	.-396    	; 0x164 <writeChar+0xb6>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2f0:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2f4:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2f6:	82 95       	swap	r24
     2f8:	92 95       	swap	r25
     2fa:	90 7f       	andi	r25, 0xF0	; 240
     2fc:	98 27       	eor	r25, r24
     2fe:	80 7f       	andi	r24, 0xF0	; 240
     300:	98 27       	eor	r25, r24
     302:	86 2b       	or	r24, r22
     304:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     308:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     30c:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     30e:	e2 95       	swap	r30
     310:	f2 95       	swap	r31
     312:	f0 7f       	andi	r31, 0xF0	; 240
     314:	fe 27       	eor	r31, r30
     316:	e0 7f       	andi	r30, 0xF0	; 240
     318:	fe 27       	eor	r31, r30
     31a:	e8 2b       	or	r30, r24
     31c:	e0 93 f2 00 	sts	0x00F2, r30	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     320:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     324:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     326:	42 95       	swap	r20
     328:	52 95       	swap	r21
     32a:	50 7f       	andi	r21, 0xF0	; 240
     32c:	54 27       	eor	r21, r20
     32e:	40 7f       	andi	r20, 0xF0	; 240
     330:	54 27       	eor	r21, r20
     332:	48 2b       	or	r20, r24
     334:	40 93 f7 00 	sts	0x00F7, r20	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     338:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     33c:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     33e:	22 95       	swap	r18
     340:	32 95       	swap	r19
     342:	30 7f       	andi	r19, 0xF0	; 240
     344:	32 27       	eor	r19, r18
     346:	20 7f       	andi	r18, 0xF0	; 240
     348:	32 27       	eor	r19, r18
     34a:	28 2b       	or	r18, r24
     34c:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     350:	09 cf       	rjmp	.-494    	; 0x164 <writeChar+0xb6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     352:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     356:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     358:	86 2b       	or	r24, r22
     35a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     35e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     362:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     364:	e8 2b       	or	r30, r24
     366:	e0 93 f2 00 	sts	0x00F2, r30	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     36a:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     36e:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     370:	48 2b       	or	r20, r24
     372:	40 93 f7 00 	sts	0x00F7, r20	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     376:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     37a:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     37c:	28 2b       	or	r18, r24
     37e:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     382:	f0 ce       	rjmp	.-544    	; 0x164 <writeChar+0xb6>

00000384 <switchPulse>:
 */ 

#include "GUI.h"

void switchPulse(GUI *g) {
	if (g->pulseSwitch == 0) {
     384:	fc 01       	movw	r30, r24
     386:	20 8d       	ldd	r18, Z+24	; 0x18
     388:	22 23       	and	r18, r18
     38a:	19 f0       	breq	.+6      	; 0x392 <switchPulse+0xe>
		g->pulseSwitch = 1;
	} else {
		g->pulseSwitch = 0;
     38c:	fc 01       	movw	r30, r24
     38e:	10 8e       	std	Z+24, r1	; 0x18
     390:	08 95       	ret

#include "GUI.h"

void switchPulse(GUI *g) {
	if (g->pulseSwitch == 0) {
		g->pulseSwitch = 1;
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	20 8f       	std	Z+24, r18	; 0x18
     396:	08 95       	ret

00000398 <printActivePulse>:
		g->pulseSwitch = 0;
	}
}


void printActivePulse(GUI *self) {
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	ec 01       	movw	r28, r24
	if (self->pulseSwitch == 0) {
     3aa:	88 8d       	ldd	r24, Y+24	; 0x18
     3ac:	88 23       	and	r24, r24
     3ae:	89 f1       	breq	.+98     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		LCDDR2 &= 0x9F;
		LCDDR2 |= 0x06;
	} else {
		LCDDR2 &= 0xF9;
     3b0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     3b4:	89 7f       	andi	r24, 0xF9	; 249
     3b6:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= 0x60;
     3ba:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     3be:	80 66       	ori	r24, 0x60	; 96
     3c0:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	}
	ASYNC(&self->p, printAt, 0);
     3c4:	8e 01       	movw	r16, r28
     3c6:	0c 5f       	subi	r16, 0xFC	; 252
     3c8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ca:	c1 2c       	mov	r12, r1
     3cc:	d1 2c       	mov	r13, r1
     3ce:	8f e7       	ldi	r24, 0x7F	; 127
     3d0:	e8 2e       	mov	r14, r24
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	f8 2e       	mov	r15, r24
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	a9 01       	movw	r20, r18
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	cb 01       	movw	r24, r22
     3e2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
	ASYNC(&self->q, printAt, 4);
     3e6:	06 5f       	subi	r16, 0xF6	; 246
     3e8:	1f 4f       	sbci	r17, 0xFF	; 255
     3ea:	94 e0       	ldi	r25, 0x04	; 4
     3ec:	c9 2e       	mov	r12, r25
     3ee:	d1 2c       	mov	r13, r1
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	a9 01       	movw	r20, r18
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	cb 01       	movw	r24, r22
     3fc:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	08 95       	ret
}


void printActivePulse(GUI *self) {
	if (self->pulseSwitch == 0) {
		LCDDR2 &= 0x9F;
     412:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     416:	8f 79       	andi	r24, 0x9F	; 159
     418:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= 0x06;
     41c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     420:	86 60       	ori	r24, 0x06	; 6
     422:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     426:	ce cf       	rjmp	.-100    	; 0x3c4 <printActivePulse+0x2c>

00000428 <interHandlerSwitch>:
	}
	ASYNC(&self->p, printAt, 0);
	ASYNC(&self->q, printAt, 4);
}

void interHandlerSwitch(GUI *self, int arg) {
     428:	cf 92       	push	r12
     42a:	df 92       	push	r13
     42c:	ef 92       	push	r14
     42e:	ff 92       	push	r15
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	ec 01       	movw	r28, r24
	//printAt(11, 2);
	if ((PINB >> 4) == 0 || (PINB >> 3) == 0) {
     43a:	83 b1       	in	r24, 0x03	; 3
     43c:	82 95       	swap	r24
     43e:	8f 70       	andi	r24, 0x0F	; 15
     440:	29 f0       	breq	.+10     	; 0x44c <interHandlerSwitch+0x24>
     442:	83 b1       	in	r24, 0x03	; 3
     444:	86 95       	lsr	r24
     446:	86 95       	lsr	r24
     448:	86 95       	lsr	r24
     44a:	79 f4       	brne	.+30     	; 0x46a <interHandlerSwitch+0x42>
		ASYNC(self, switchPulse, NULL);
     44c:	c1 2c       	mov	r12, r1
     44e:	d1 2c       	mov	r13, r1
     450:	92 ec       	ldi	r25, 0xC2	; 194
     452:	e9 2e       	mov	r14, r25
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	f9 2e       	mov	r15, r25
     458:	8e 01       	movw	r16, r28
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	a9 01       	movw	r20, r18
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	70 e0       	ldi	r23, 0x00	; 0
     464:	cb 01       	movw	r24, r22
     466:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
	}
	ASYNC(self, printActivePulse, NULL);
     46a:	c1 2c       	mov	r12, r1
     46c:	d1 2c       	mov	r13, r1
     46e:	8c ec       	ldi	r24, 0xCC	; 204
     470:	e8 2e       	mov	r14, r24
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	f8 2e       	mov	r15, r24
     476:	8e 01       	movw	r16, r28
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	a9 01       	movw	r20, r18
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	cb 01       	movw	r24, r22
     484:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
}
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	df 90       	pop	r13
     496:	cf 90       	pop	r12
     498:	08 95       	ret

0000049a <interHandlerFreq>:

void interHandlerFreq(GUI *self, int arg) {
     49a:	af 92       	push	r10
     49c:	bf 92       	push	r11
     49e:	cf 92       	push	r12
     4a0:	df 92       	push	r13
     4a2:	ef 92       	push	r14
     4a4:	ff 92       	push	r15
     4a6:	0f 93       	push	r16
     4a8:	1f 93       	push	r17
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	2a 97       	sbiw	r28, 0x0a	; 10
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	5c 01       	movw	r10, r24
	int i = PINB & 0x40;
     4c0:	83 b1       	in	r24, 0x03	; 3
	//printAt(22, 2);
	pulse temp;
	if (self->pulseSwitch == 0) {
     4c2:	f5 01       	movw	r30, r10
     4c4:	80 8d       	ldd	r24, Z+24	; 0x18
     4c6:	81 11       	cpse	r24, r1
     4c8:	41 c0       	rjmp	.+130    	; 0x54c <__stack+0x4d>
		temp = self->p;
     4ca:	8a e0       	ldi	r24, 0x0A	; 10
     4cc:	34 96       	adiw	r30, 0x04	; 4
     4ce:	8e 01       	movw	r16, r28
     4d0:	0f 5f       	subi	r16, 0xFF	; 255
     4d2:	1f 4f       	sbci	r17, 0xFF	; 255
     4d4:	d8 01       	movw	r26, r16
     4d6:	01 90       	ld	r0, Z+
     4d8:	0d 92       	st	X+, r0
     4da:	8a 95       	dec	r24
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <interHandlerFreq+0x3c>
	} else {
		temp = self->q;
	}
	
	if (((PINB >> 6) & 1) == 0) {
     4de:	1e 9b       	sbis	0x03, 6	; 3
     4e0:	42 c0       	rjmp	.+132    	; 0x566 <__stack+0x67>
		//printAt(99, 2);
		ASYNC(&temp, addFreq, NULL);
		ASYNC(self, printActivePulse, NULL);
	} else if (((PINB >> 7) & 1) == 0) {
     4e2:	1f 9b       	sbis	0x03, 7	; 3
     4e4:	69 c0       	rjmp	.+210    	; 0x5b8 <__stack+0xb9>
			ASYNC(&temp, subFreq, NULL);
	} else {
		if (temp.freq != 0) {
     4e6:	8d 81       	ldd	r24, Y+5	; 0x05
     4e8:	9e 81       	ldd	r25, Y+6	; 0x06
			ASYNC(&temp, storeFreq, NULL);
     4ea:	c1 2c       	mov	r12, r1
     4ec:	d1 2c       	mov	r13, r1
		ASYNC(&temp, addFreq, NULL);
		ASYNC(self, printActivePulse, NULL);
	} else if (((PINB >> 7) & 1) == 0) {
			ASYNC(&temp, subFreq, NULL);
	} else {
		if (temp.freq != 0) {
     4ee:	89 2b       	or	r24, r25
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <interHandlerFreq+0x5a>
     4f2:	55 c0       	rjmp	.+170    	; 0x59e <__stack+0x9f>
			ASYNC(&temp, storeFreq, NULL);
		}
		else {
			ASYNC(&temp, restoreFreq, NULL);
     4f4:	97 e7       	ldi	r25, 0x77	; 119
     4f6:	e9 2e       	mov	r14, r25
     4f8:	93 e0       	ldi	r25, 0x03	; 3
     4fa:	f9 2e       	mov	r15, r25
     4fc:	20 e0       	ldi	r18, 0x00	; 0
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	a9 01       	movw	r20, r18
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	70 e0       	ldi	r23, 0x00	; 0
     506:	cb 01       	movw	r24, r22
     508:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
		}
	}
	ASYNC(self, printActivePulse, NULL);
     50c:	c1 2c       	mov	r12, r1
     50e:	d1 2c       	mov	r13, r1
     510:	8c ec       	ldi	r24, 0xCC	; 204
     512:	e8 2e       	mov	r14, r24
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	f8 2e       	mov	r15, r24
     518:	85 01       	movw	r16, r10
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	a9 01       	movw	r20, r18
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	cb 01       	movw	r24, r22
     526:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
     52a:	2a 96       	adiw	r28, 0x0a	; 10
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	df 90       	pop	r13
     544:	cf 90       	pop	r12
     546:	bf 90       	pop	r11
     548:	af 90       	pop	r10
     54a:	08 95       	ret
	//printAt(22, 2);
	pulse temp;
	if (self->pulseSwitch == 0) {
		temp = self->p;
	} else {
		temp = self->q;
     54c:	8a e0       	ldi	r24, 0x0A	; 10
     54e:	f5 01       	movw	r30, r10
     550:	3e 96       	adiw	r30, 0x0e	; 14
     552:	8e 01       	movw	r16, r28
     554:	0f 5f       	subi	r16, 0xFF	; 255
     556:	1f 4f       	sbci	r17, 0xFF	; 255
     558:	d8 01       	movw	r26, r16
     55a:	01 90       	ld	r0, Z+
     55c:	0d 92       	st	X+, r0
     55e:	8a 95       	dec	r24
     560:	e1 f7       	brne	.-8      	; 0x55a <__stack+0x5b>
	}
	
	if (((PINB >> 6) & 1) == 0) {
     562:	1e 99       	sbic	0x03, 6	; 3
     564:	be cf       	rjmp	.-132    	; 0x4e2 <interHandlerFreq+0x48>
		//printAt(99, 2);
		ASYNC(&temp, addFreq, NULL);
     566:	c1 2c       	mov	r12, r1
     568:	d1 2c       	mov	r13, r1
     56a:	44 e6       	ldi	r20, 0x64	; 100
     56c:	e4 2e       	mov	r14, r20
     56e:	43 e0       	ldi	r20, 0x03	; 3
     570:	f4 2e       	mov	r15, r20
     572:	20 e0       	ldi	r18, 0x00	; 0
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	a9 01       	movw	r20, r18
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	cb 01       	movw	r24, r22
     57e:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
		ASYNC(self, printActivePulse, NULL);
     582:	5c ec       	ldi	r21, 0xCC	; 204
     584:	e5 2e       	mov	r14, r21
     586:	51 e0       	ldi	r21, 0x01	; 1
     588:	f5 2e       	mov	r15, r21
     58a:	85 01       	movw	r16, r10
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	a9 01       	movw	r20, r18
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	cb 01       	movw	r24, r22
     598:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
     59c:	b7 cf       	rjmp	.-146    	; 0x50c <__stack+0xd>
	} else if (((PINB >> 7) & 1) == 0) {
			ASYNC(&temp, subFreq, NULL);
	} else {
		if (temp.freq != 0) {
			ASYNC(&temp, storeFreq, NULL);
     59e:	2f e6       	ldi	r18, 0x6F	; 111
     5a0:	e2 2e       	mov	r14, r18
     5a2:	23 e0       	ldi	r18, 0x03	; 3
     5a4:	f2 2e       	mov	r15, r18
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	a9 01       	movw	r20, r18
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	cb 01       	movw	r24, r22
     5b2:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
     5b6:	aa cf       	rjmp	.-172    	; 0x50c <__stack+0xd>
	if (((PINB >> 6) & 1) == 0) {
		//printAt(99, 2);
		ASYNC(&temp, addFreq, NULL);
		ASYNC(self, printActivePulse, NULL);
	} else if (((PINB >> 7) & 1) == 0) {
			ASYNC(&temp, subFreq, NULL);
     5b8:	c1 2c       	mov	r12, r1
     5ba:	d1 2c       	mov	r13, r1
     5bc:	39 e5       	ldi	r19, 0x59	; 89
     5be:	e3 2e       	mov	r14, r19
     5c0:	33 e0       	ldi	r19, 0x03	; 3
     5c2:	f3 2e       	mov	r15, r19
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	a9 01       	movw	r20, r18
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	cb 01       	movw	r24, r22
     5d0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
     5d4:	9b cf       	rjmp	.-202    	; 0x50c <__stack+0xd>

000005d6 <LCDInit>:
#include "LCD.h"
#include "DediWriter.h"

void LCDInit(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
     5d6:	86 e3       	ldi	r24, 0x36	; 54
     5d8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
     5dc:	87 e0       	ldi	r24, 0x07	; 7
     5de:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
     5e2:	8f e0       	ldi	r24, 0x0F	; 15
     5e4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
     5e8:	80 ec       	ldi	r24, 0xC0	; 192
     5ea:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
     5ee:	9d e0       	ldi	r25, 0x0D	; 13
     5f0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	PCMSK0 = 0x0c;
     5f4:	9c e0       	ldi	r25, 0x0C	; 12
     5f6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	PCMSK1 = 0xd0;
     5fa:	20 ed       	ldi	r18, 0xD0	; 208
     5fc:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	EIFR = 0xc0;
     600:	8c bb       	out	0x1c, r24	; 28
	EIMSK = 0xc0;
     602:	8d bb       	out	0x1d, r24	; 29
	PORTB = (1 << PB7)|(1 << PB6)|(1 << PB4);
     604:	25 b9       	out	0x05, r18	; 5
	PORTE = (1 << PE3)|(1 << PE2);
     606:	9e b9       	out	0x0e, r25	; 14
	DDRB = (0<<DDB7)|(0<<DDB6);
     608:	14 b8       	out	0x04, r1	; 4
	MCUCR = (0 << PUD);
     60a:	15 be       	out	0x35, r1	; 53
     60c:	08 95       	ret

0000060e <main>:
#include "LCD.h"
#include <avr/io.h>


int main(void)
{
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	ad 97       	sbiw	r28, 0x2d	; 45
     618:	0f b6       	in	r0, 0x3f	; 63
     61a:	f8 94       	cli
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	0f be       	out	0x3f, r0	; 63
     620:	cd bf       	out	0x3d, r28	; 61
	LCDInit();
     622:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCDInit>
    pulse p = initPulse(0, 0);
     626:	9e 01       	movw	r18, r28
     628:	2c 5d       	subi	r18, 0xDC	; 220
     62a:	3f 4f       	sbci	r19, 0xFF	; 255
     62c:	8a e0       	ldi	r24, 0x0A	; 10
     62e:	f9 01       	movw	r30, r18
     630:	11 92       	st	Z+, r1
     632:	8a 95       	dec	r24
     634:	e9 f7       	brne	.-6      	; 0x630 <main+0x22>
	pulse q = initPulse(30, 1);
     636:	8a e0       	ldi	r24, 0x0A	; 10
     638:	e8 e0       	ldi	r30, 0x08	; 8
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	de 01       	movw	r26, r28
     63e:	5a 96       	adiw	r26, 0x1a	; 26
     640:	01 90       	ld	r0, Z+
     642:	0d 92       	st	X+, r0
     644:	8a 95       	dec	r24
     646:	e1 f7       	brne	.-8      	; 0x640 <main+0x32>
	GUI g = GUI_init(p, q);
     648:	1a 82       	std	Y+2, r1	; 0x02
     64a:	19 82       	std	Y+1, r1	; 0x01
     64c:	1c 82       	std	Y+4, r1	; 0x04
     64e:	1b 82       	std	Y+3, r1	; 0x03
     650:	8a e0       	ldi	r24, 0x0A	; 10
     652:	f9 01       	movw	r30, r18
     654:	de 01       	movw	r26, r28
     656:	15 96       	adiw	r26, 0x05	; 5
     658:	01 90       	ld	r0, Z+
     65a:	0d 92       	st	X+, r0
     65c:	8a 95       	dec	r24
     65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x4a>
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	fe 01       	movw	r30, r28
     664:	7a 96       	adiw	r30, 0x1a	; 26
     666:	de 01       	movw	r26, r28
     668:	1f 96       	adiw	r26, 0x0f	; 15
     66a:	01 90       	ld	r0, Z+
     66c:	0d 92       	st	X+, r0
     66e:	8a 95       	dec	r24
     670:	e1 f7       	brne	.-8      	; 0x66a <main+0x5c>
     672:	19 8e       	std	Y+25, r1	; 0x19
	INSTALL(&g, interHandlerFreq, IRQ_PCINT1);
     674:	42 e0       	ldi	r20, 0x02	; 2
     676:	6d e4       	ldi	r22, 0x4D	; 77
     678:	72 e0       	ldi	r23, 0x02	; 2
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <install>
	INSTALL(&g, interHandlerSwitch, IRQ_PCINT0);
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	64 e1       	ldi	r22, 0x14	; 20
     686:	72 e0       	ldi	r23, 0x02	; 2
     688:	ce 01       	movw	r24, r28
     68a:	01 96       	adiw	r24, 0x01	; 1
     68c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <install>
	return TINYTIMBER(&g, printActivePulse, NULL);
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	6c ec       	ldi	r22, 0xCC	; 204
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <tinytimber>
	//addFreq(&q);
	//printAt(getFreq(&p), getPos(&p));
	//printAt(getFreq(&q), getPos(&q));
     6a0:	ad 96       	adiw	r28, 0x2d	; 45
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <subFreq>:
	self->saved_freq = 0;
}

int getFreq(pulse *self) {
	return self->freq;
}
     6b2:	fc 01       	movw	r30, r24
     6b4:	24 81       	ldd	r18, Z+4	; 0x04
     6b6:	35 81       	ldd	r19, Z+5	; 0x05
     6b8:	12 16       	cp	r1, r18
     6ba:	13 06       	cpc	r1, r19
     6bc:	24 f4       	brge	.+8      	; 0x6c6 <subFreq+0x14>
     6be:	21 50       	subi	r18, 0x01	; 1
     6c0:	31 09       	sbc	r19, r1
     6c2:	35 83       	std	Z+5, r19	; 0x05
     6c4:	24 83       	std	Z+4, r18	; 0x04
     6c6:	08 95       	ret

000006c8 <addFreq>:
     6c8:	fc 01       	movw	r30, r24
     6ca:	24 81       	ldd	r18, Z+4	; 0x04
     6cc:	35 81       	ldd	r19, Z+5	; 0x05
     6ce:	23 36       	cpi	r18, 0x63	; 99
     6d0:	31 05       	cpc	r19, r1
     6d2:	24 f4       	brge	.+8      	; 0x6dc <addFreq+0x14>
     6d4:	2f 5f       	subi	r18, 0xFF	; 255
     6d6:	3f 4f       	sbci	r19, 0xFF	; 255
     6d8:	35 83       	std	Z+5, r19	; 0x05
     6da:	24 83       	std	Z+4, r18	; 0x04
     6dc:	08 95       	ret

000006de <storeFreq>:
     6de:	fc 01       	movw	r30, r24
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	97 83       	std	Z+7, r25	; 0x07
     6e6:	86 83       	std	Z+6, r24	; 0x06
     6e8:	15 82       	std	Z+5, r1	; 0x05
     6ea:	14 82       	std	Z+4, r1	; 0x04
     6ec:	08 95       	ret

000006ee <restoreFreq>:
     6ee:	fc 01       	movw	r30, r24
     6f0:	86 81       	ldd	r24, Z+6	; 0x06
     6f2:	97 81       	ldd	r25, Z+7	; 0x07
     6f4:	95 83       	std	Z+5, r25	; 0x05
     6f6:	84 83       	std	Z+4, r24	; 0x04
     6f8:	17 82       	std	Z+7, r1	; 0x07
     6fa:	16 82       	std	Z+6, r1	; 0x06
     6fc:	08 95       	ret

000006fe <printAt>:

void printAt(pulse *self, int pos) {
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	eb 01       	movw	r28, r22
	int num = self->freq;
     70c:	fc 01       	movw	r30, r24
     70e:	e4 80       	ldd	r14, Z+4	; 0x04
     710:	f5 80       	ldd	r15, Z+5	; 0x05
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     712:	c7 01       	movw	r24, r14
     714:	64 e6       	ldi	r22, 0x64	; 100
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divmodhi4>
     71c:	0a e0       	ldi	r16, 0x0A	; 10
     71e:	10 e0       	ldi	r17, 0x00	; 0
     720:	b8 01       	movw	r22, r16
     722:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divmodhi4>
     726:	86 2f       	mov	r24, r22
     728:	be 01       	movw	r22, r28
     72a:	80 5d       	subi	r24, 0xD0	; 208
     72c:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     730:	21 96       	adiw	r28, 0x01	; 1
     732:	c7 01       	movw	r24, r14
     734:	b8 01       	movw	r22, r16
     736:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__divmodhi4>
     73a:	be 01       	movw	r22, r28
     73c:	80 5d       	subi	r24, 0xD0	; 208
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
void printAt(pulse *self, int pos) {
	int num = self->freq;
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     74a:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

0000074e <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <initialize+0x6>
     754:	00 d0       	rcall	.+0      	; 0x756 <initialize+0x8>
     756:	cd b7       	in	r28, 0x3d	; 61
     758:	de b7       	in	r29, 0x3e	; 62
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	92 e0       	ldi	r25, 0x02	; 2
     75e:	25 ee       	ldi	r18, 0xE5	; 229
     760:	32 e0       	ldi	r19, 0x02	; 2
     762:	fc 01       	movw	r30, r24
     764:	70 97       	sbiw	r30, 0x10	; 16
     766:	91 83       	std	Z+1, r25	; 0x01
     768:	80 83       	st	Z, r24
     76a:	40 96       	adiw	r24, 0x10	; 16
     76c:	82 17       	cp	r24, r18
     76e:	93 07       	cpc	r25, r19
     770:	c1 f7       	brne	.-16     	; 0x762 <initialize+0x14>
     772:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <messages+0xe1>
     776:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <messages+0xe0>
     77a:	e0 e4       	ldi	r30, 0x40	; 64
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	8d e5       	ldi	r24, 0x5D	; 93
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24
     786:	8a e7       	ldi	r24, 0x7A	; 122
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	96 8f       	std	Z+30, r25	; 0x1e
     78c:	85 8f       	std	Z+29, r24	; 0x1d
     78e:	a7 e9       	ldi	r26, 0x97	; 151
     790:	b1 e0       	ldi	r27, 0x01	; 1
     792:	b3 af       	std	Z+59, r27	; 0x3b
     794:	a2 af       	std	Z+58, r26	; 0x3a
     796:	1d 92       	st	X+, r1
     798:	1c 92       	st	X, r1
     79a:	fa 83       	std	Y+2, r31	; 0x02
     79c:	e9 83       	std	Y+1, r30	; 0x01
     79e:	e1 e4       	ldi	r30, 0x41	; 65
     7a0:	f3 e0       	ldi	r31, 0x03	; 3
     7a2:	fc 83       	std	Y+4, r31	; 0x04
     7a4:	eb 83       	std	Y+3, r30	; 0x03
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	06 96       	adiw	r24, 0x06	; 6
     7ac:	0e 94 29 10 	call	0x2052	; 0x2052 <setjmp>
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	9c 81       	ldd	r25, Y+4	; 0x04
     7b4:	e9 81       	ldd	r30, Y+1	; 0x01
     7b6:	fa 81       	ldd	r31, Y+2	; 0x02
     7b8:	97 8b       	std	Z+23, r25	; 0x17
     7ba:	86 8b       	std	Z+22, r24	; 0x16
     7bc:	91 8f       	std	Z+25, r25	; 0x19
     7be:	80 8f       	std	Z+24, r24	; 0x18
     7c0:	8a e4       	ldi	r24, 0x4A	; 74
     7c2:	9f e0       	ldi	r25, 0x0F	; 15
     7c4:	94 8f       	std	Z+28, r25	; 0x1c
     7c6:	83 8f       	std	Z+27, r24	; 0x1b
     7c8:	15 82       	std	Z+5, r1	; 0x05
     7ca:	14 82       	std	Z+4, r1	; 0x04
     7cc:	7d 96       	adiw	r30, 0x1d	; 29
     7ce:	fa 83       	std	Y+2, r31	; 0x02
     7d0:	e9 83       	std	Y+1, r30	; 0x01
     7d2:	eb 81       	ldd	r30, Y+3	; 0x03
     7d4:	fc 81       	ldd	r31, Y+4	; 0x04
     7d6:	e0 5a       	subi	r30, 0xA0	; 160
     7d8:	ff 4f       	sbci	r31, 0xFF	; 255
     7da:	fc 83       	std	Y+4, r31	; 0x04
     7dc:	eb 83       	std	Y+3, r30	; 0x03
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	9a 81       	ldd	r25, Y+2	; 0x02
     7e2:	84 5b       	subi	r24, 0xB4	; 180
     7e4:	91 40       	sbci	r25, 0x01	; 1
     7e6:	f9 f6       	brne	.-66     	; 0x7a6 <initialize+0x58>
     7e8:	e8 ed       	ldi	r30, 0xD8	; 216
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	10 82       	st	Z, r1
     7f0:	15 82       	std	Z+5, r1	; 0x05
     7f2:	14 82       	std	Z+4, r1	; 0x04
     7f4:	13 82       	std	Z+3, r1	; 0x03
     7f6:	12 82       	std	Z+2, r1	; 0x02
     7f8:	e1 e6       	ldi	r30, 0x61	; 97
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	80 83       	st	Z, r24
     800:	10 82       	st	Z, r1
     802:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     806:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <dispatch>:
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <dispatch+0x6>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     836:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     83a:	06 96       	adiw	r24, 0x06	; 6
     83c:	0e 94 29 10 	call	0x2052	; 0x2052 <setjmp>
     840:	89 2b       	or	r24, r25
     842:	29 f0       	breq	.+10     	; 0x84e <dispatch+0x2a>
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret
     84e:	89 81       	ldd	r24, Y+1	; 0x01
     850:	9a 81       	ldd	r25, Y+2	; 0x02
     852:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     856:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	06 96       	adiw	r24, 0x06	; 6
     860:	0e 94 49 10 	call	0x2092	; 0x2092 <longjmp>

00000864 <schedule>:
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <msgQ>
     870:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <msgQ+0x1>
     874:	30 97       	sbiw	r30, 0x00	; 0
     876:	f1 f0       	breq	.+60     	; 0x8b4 <schedule+0x50>
     878:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     87c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     880:	00 97       	sbiw	r24, 0x00	; 0
     882:	c1 f0       	breq	.+48     	; 0x8b4 <schedule+0x50>
     884:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     888:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     88c:	aa 81       	ldd	r26, Y+2	; 0x02
     88e:	bb 81       	ldd	r27, Y+3	; 0x03
     890:	10 97       	sbiw	r26, 0x00	; 0
     892:	a9 f0       	breq	.+42     	; 0x8be <schedule+0x5a>
     894:	46 81       	ldd	r20, Z+6	; 0x06
     896:	57 81       	ldd	r21, Z+7	; 0x07
     898:	60 85       	ldd	r22, Z+8	; 0x08
     89a:	71 85       	ldd	r23, Z+9	; 0x09
     89c:	16 96       	adiw	r26, 0x06	; 6
     89e:	0d 91       	ld	r16, X+
     8a0:	1d 91       	ld	r17, X+
     8a2:	2d 91       	ld	r18, X+
     8a4:	3c 91       	ld	r19, X
     8a6:	19 97       	sbiw	r26, 0x09	; 9
     8a8:	40 1b       	sub	r20, r16
     8aa:	51 0b       	sbc	r21, r17
     8ac:	62 0b       	sbc	r22, r18
     8ae:	73 0b       	sbc	r23, r19
     8b0:	77 fd       	sbrc	r23, 7
     8b2:	05 c0       	rjmp	.+10     	; 0x8be <schedule+0x5a>
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret
     8be:	fc 01       	movw	r30, r24
     8c0:	20 81       	ld	r18, Z
     8c2:	31 81       	ldd	r19, Z+1	; 0x01
     8c4:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     8c8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     8cc:	d1 83       	std	Z+1, r29	; 0x01
     8ce:	c0 83       	st	Z, r28
     8d0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     8d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	0c 94 12 04 	jmp	0x824	; 0x824 <dispatch>

000008e4 <dequeue.part.0>:
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     8ea:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     8ee:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	83 bf       	out	0x33, r24	; 51
     8f6:	88 95       	sleep
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <dequeue.part.0+0x10>

000008fa <__vector_1>:
     8fa:	1f 92       	push	r1
     8fc:	0f 92       	push	r0
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	0f 92       	push	r0
     902:	11 24       	eor	r1, r1
     904:	2f 93       	push	r18
     906:	3f 93       	push	r19
     908:	4f 93       	push	r20
     90a:	5f 93       	push	r21
     90c:	6f 93       	push	r22
     90e:	7f 93       	push	r23
     910:	8f 93       	push	r24
     912:	9f 93       	push	r25
     914:	af 93       	push	r26
     916:	bf 93       	push	r27
     918:	ef 93       	push	r30
     91a:	ff 93       	push	r31
     91c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     920:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     924:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     928:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     92c:	c9 01       	movw	r24, r18
     92e:	03 2e       	mov	r0, r19
     930:	00 0c       	add	r0, r0
     932:	aa 0b       	sbc	r26, r26
     934:	bb 0b       	sbc	r27, r27
     936:	dc 01       	movw	r26, r24
     938:	99 27       	eor	r25, r25
     93a:	88 27       	eor	r24, r24
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	84 2b       	or	r24, r20
     942:	95 2b       	or	r25, r21
     944:	a6 2b       	or	r26, r22
     946:	b7 2b       	or	r27, r23
     948:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     94c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     950:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     954:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     958:	b0 9b       	sbis	0x16, 0	; 22
     95a:	1b c0       	rjmp	.+54     	; 0x992 <__vector_1+0x98>
     95c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     960:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     964:	c9 01       	movw	r24, r18
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	09 2e       	mov	r0, r25
     96a:	00 0c       	add	r0, r0
     96c:	aa 0b       	sbc	r26, r26
     96e:	bb 0b       	sbc	r27, r27
     970:	dc 01       	movw	r26, r24
     972:	99 27       	eor	r25, r25
     974:	88 27       	eor	r24, r24
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	84 2b       	or	r24, r20
     97c:	95 2b       	or	r25, r21
     97e:	a6 2b       	or	r26, r22
     980:	b7 2b       	or	r27, r23
     982:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     986:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     98a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     98e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     992:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable>
     996:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0x1>
     99a:	30 97       	sbiw	r30, 0x00	; 0
     99c:	39 f0       	breq	.+14     	; 0x9ac <__vector_1+0xb2>
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable>
     9a6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0x1>
     9aa:	09 95       	icall
     9ac:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_2>:
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	2f 93       	push	r18
     9de:	3f 93       	push	r19
     9e0:	4f 93       	push	r20
     9e2:	5f 93       	push	r21
     9e4:	6f 93       	push	r22
     9e6:	7f 93       	push	r23
     9e8:	8f 93       	push	r24
     9ea:	9f 93       	push	r25
     9ec:	af 93       	push	r26
     9ee:	bf 93       	push	r27
     9f0:	ef 93       	push	r30
     9f2:	ff 93       	push	r31
     9f4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     9f8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     9fc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a04:	c9 01       	movw	r24, r18
     a06:	03 2e       	mov	r0, r19
     a08:	00 0c       	add	r0, r0
     a0a:	aa 0b       	sbc	r26, r26
     a0c:	bb 0b       	sbc	r27, r27
     a0e:	dc 01       	movw	r26, r24
     a10:	99 27       	eor	r25, r25
     a12:	88 27       	eor	r24, r24
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	84 2b       	or	r24, r20
     a1a:	95 2b       	or	r25, r21
     a1c:	a6 2b       	or	r26, r22
     a1e:	b7 2b       	or	r27, r23
     a20:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     a24:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     a28:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     a2c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     a30:	b0 9b       	sbis	0x16, 0	; 22
     a32:	1b c0       	rjmp	.+54     	; 0xa6a <__vector_2+0x98>
     a34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a3c:	c9 01       	movw	r24, r18
     a3e:	01 96       	adiw	r24, 0x01	; 1
     a40:	09 2e       	mov	r0, r25
     a42:	00 0c       	add	r0, r0
     a44:	aa 0b       	sbc	r26, r26
     a46:	bb 0b       	sbc	r27, r27
     a48:	dc 01       	movw	r26, r24
     a4a:	99 27       	eor	r25, r25
     a4c:	88 27       	eor	r24, r24
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	84 2b       	or	r24, r20
     a54:	95 2b       	or	r25, r21
     a56:	a6 2b       	or	r26, r22
     a58:	b7 2b       	or	r27, r23
     a5a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     a5e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     a62:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     a66:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     a6a:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0x2>
     a6e:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0x3>
     a72:	30 97       	sbiw	r30, 0x00	; 0
     a74:	39 f0       	breq	.+14     	; 0xa84 <__vector_2+0xb2>
     a76:	61 e0       	ldi	r22, 0x01	; 1
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0x2>
     a7e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0x3>
     a82:	09 95       	icall
     a84:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     a88:	ff 91       	pop	r31
     a8a:	ef 91       	pop	r30
     a8c:	bf 91       	pop	r27
     a8e:	af 91       	pop	r26
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	7f 91       	pop	r23
     a96:	6f 91       	pop	r22
     a98:	5f 91       	pop	r21
     a9a:	4f 91       	pop	r20
     a9c:	3f 91       	pop	r19
     a9e:	2f 91       	pop	r18
     aa0:	0f 90       	pop	r0
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	0f 90       	pop	r0
     aa6:	1f 90       	pop	r1
     aa8:	18 95       	reti

00000aaa <__vector_3>:
     aaa:	1f 92       	push	r1
     aac:	0f 92       	push	r0
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	0f 92       	push	r0
     ab2:	11 24       	eor	r1, r1
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
     acc:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     ad0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     ad4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ad8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     adc:	c9 01       	movw	r24, r18
     ade:	03 2e       	mov	r0, r19
     ae0:	00 0c       	add	r0, r0
     ae2:	aa 0b       	sbc	r26, r26
     ae4:	bb 0b       	sbc	r27, r27
     ae6:	dc 01       	movw	r26, r24
     ae8:	99 27       	eor	r25, r25
     aea:	88 27       	eor	r24, r24
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	84 2b       	or	r24, r20
     af2:	95 2b       	or	r25, r21
     af4:	a6 2b       	or	r26, r22
     af6:	b7 2b       	or	r27, r23
     af8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     afc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     b00:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     b04:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     b08:	b0 9b       	sbis	0x16, 0	; 22
     b0a:	1b c0       	rjmp	.+54     	; 0xb42 <__vector_3+0x98>
     b0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b14:	c9 01       	movw	r24, r18
     b16:	01 96       	adiw	r24, 0x01	; 1
     b18:	09 2e       	mov	r0, r25
     b1a:	00 0c       	add	r0, r0
     b1c:	aa 0b       	sbc	r26, r26
     b1e:	bb 0b       	sbc	r27, r27
     b20:	dc 01       	movw	r26, r24
     b22:	99 27       	eor	r25, r25
     b24:	88 27       	eor	r24, r24
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	84 2b       	or	r24, r20
     b2c:	95 2b       	or	r25, r21
     b2e:	a6 2b       	or	r26, r22
     b30:	b7 2b       	or	r27, r23
     b32:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     b36:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     b3a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     b3e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     b42:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x4>
     b46:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x5>
     b4a:	30 97       	sbiw	r30, 0x00	; 0
     b4c:	39 f0       	breq	.+14     	; 0xb5c <__vector_3+0xb2>
     b4e:	62 e0       	ldi	r22, 0x02	; 2
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x4>
     b56:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x5>
     b5a:	09 95       	icall
     b5c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_4>:
     b82:	1f 92       	push	r1
     b84:	0f 92       	push	r0
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	0f 92       	push	r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2f 93       	push	r18
     b8e:	3f 93       	push	r19
     b90:	4f 93       	push	r20
     b92:	5f 93       	push	r21
     b94:	6f 93       	push	r22
     b96:	7f 93       	push	r23
     b98:	8f 93       	push	r24
     b9a:	9f 93       	push	r25
     b9c:	af 93       	push	r26
     b9e:	bf 93       	push	r27
     ba0:	ef 93       	push	r30
     ba2:	ff 93       	push	r31
     ba4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     ba8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     bac:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bb0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bb4:	c9 01       	movw	r24, r18
     bb6:	03 2e       	mov	r0, r19
     bb8:	00 0c       	add	r0, r0
     bba:	aa 0b       	sbc	r26, r26
     bbc:	bb 0b       	sbc	r27, r27
     bbe:	dc 01       	movw	r26, r24
     bc0:	99 27       	eor	r25, r25
     bc2:	88 27       	eor	r24, r24
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	84 2b       	or	r24, r20
     bca:	95 2b       	or	r25, r21
     bcc:	a6 2b       	or	r26, r22
     bce:	b7 2b       	or	r27, r23
     bd0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     bd4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     bd8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     bdc:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     be0:	b0 9b       	sbis	0x16, 0	; 22
     be2:	1b c0       	rjmp	.+54     	; 0xc1a <__vector_4+0x98>
     be4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     be8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bec:	c9 01       	movw	r24, r18
     bee:	01 96       	adiw	r24, 0x01	; 1
     bf0:	09 2e       	mov	r0, r25
     bf2:	00 0c       	add	r0, r0
     bf4:	aa 0b       	sbc	r26, r26
     bf6:	bb 0b       	sbc	r27, r27
     bf8:	dc 01       	movw	r26, r24
     bfa:	99 27       	eor	r25, r25
     bfc:	88 27       	eor	r24, r24
     bfe:	60 e0       	ldi	r22, 0x00	; 0
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	84 2b       	or	r24, r20
     c04:	95 2b       	or	r25, r21
     c06:	a6 2b       	or	r26, r22
     c08:	b7 2b       	or	r27, r23
     c0a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     c0e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     c12:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     c16:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     c1a:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x6>
     c1e:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x7>
     c22:	30 97       	sbiw	r30, 0x00	; 0
     c24:	39 f0       	breq	.+14     	; 0xc34 <__vector_4+0xb2>
     c26:	63 e0       	ldi	r22, 0x03	; 3
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x6>
     c2e:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x7>
     c32:	09 95       	icall
     c34:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     c38:	ff 91       	pop	r31
     c3a:	ef 91       	pop	r30
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <__vector_5>:
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	2f 93       	push	r18
     c66:	3f 93       	push	r19
     c68:	4f 93       	push	r20
     c6a:	5f 93       	push	r21
     c6c:	6f 93       	push	r22
     c6e:	7f 93       	push	r23
     c70:	8f 93       	push	r24
     c72:	9f 93       	push	r25
     c74:	af 93       	push	r26
     c76:	bf 93       	push	r27
     c78:	ef 93       	push	r30
     c7a:	ff 93       	push	r31
     c7c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     c80:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     c84:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c88:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c8c:	c9 01       	movw	r24, r18
     c8e:	03 2e       	mov	r0, r19
     c90:	00 0c       	add	r0, r0
     c92:	aa 0b       	sbc	r26, r26
     c94:	bb 0b       	sbc	r27, r27
     c96:	dc 01       	movw	r26, r24
     c98:	99 27       	eor	r25, r25
     c9a:	88 27       	eor	r24, r24
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	84 2b       	or	r24, r20
     ca2:	95 2b       	or	r25, r21
     ca4:	a6 2b       	or	r26, r22
     ca6:	b7 2b       	or	r27, r23
     ca8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     cac:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     cb0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     cb4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     cb8:	b0 9b       	sbis	0x16, 0	; 22
     cba:	1b c0       	rjmp	.+54     	; 0xcf2 <__vector_5+0x98>
     cbc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cc0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cc4:	c9 01       	movw	r24, r18
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	09 2e       	mov	r0, r25
     cca:	00 0c       	add	r0, r0
     ccc:	aa 0b       	sbc	r26, r26
     cce:	bb 0b       	sbc	r27, r27
     cd0:	dc 01       	movw	r26, r24
     cd2:	99 27       	eor	r25, r25
     cd4:	88 27       	eor	r24, r24
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	84 2b       	or	r24, r20
     cdc:	95 2b       	or	r25, r21
     cde:	a6 2b       	or	r26, r22
     ce0:	b7 2b       	or	r27, r23
     ce2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     ce6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     cea:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     cee:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     cf2:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x8>
     cf6:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x9>
     cfa:	30 97       	sbiw	r30, 0x00	; 0
     cfc:	39 f0       	breq	.+14     	; 0xd0c <__vector_5+0xb2>
     cfe:	64 e0       	ldi	r22, 0x04	; 4
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x8>
     d06:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x9>
     d0a:	09 95       	icall
     d0c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     d10:	ff 91       	pop	r31
     d12:	ef 91       	pop	r30
     d14:	bf 91       	pop	r27
     d16:	af 91       	pop	r26
     d18:	9f 91       	pop	r25
     d1a:	8f 91       	pop	r24
     d1c:	7f 91       	pop	r23
     d1e:	6f 91       	pop	r22
     d20:	5f 91       	pop	r21
     d22:	4f 91       	pop	r20
     d24:	3f 91       	pop	r19
     d26:	2f 91       	pop	r18
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	0f 90       	pop	r0
     d2e:	1f 90       	pop	r1
     d30:	18 95       	reti

00000d32 <__vector_10>:
     d32:	1f 92       	push	r1
     d34:	0f 92       	push	r0
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	0f 92       	push	r0
     d3a:	11 24       	eor	r1, r1
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
     d54:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     d58:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     d5c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d60:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d64:	c9 01       	movw	r24, r18
     d66:	03 2e       	mov	r0, r19
     d68:	00 0c       	add	r0, r0
     d6a:	aa 0b       	sbc	r26, r26
     d6c:	bb 0b       	sbc	r27, r27
     d6e:	dc 01       	movw	r26, r24
     d70:	99 27       	eor	r25, r25
     d72:	88 27       	eor	r24, r24
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	70 e0       	ldi	r23, 0x00	; 0
     d78:	84 2b       	or	r24, r20
     d7a:	95 2b       	or	r25, r21
     d7c:	a6 2b       	or	r26, r22
     d7e:	b7 2b       	or	r27, r23
     d80:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     d84:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     d88:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     d8c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     d90:	b0 9b       	sbis	0x16, 0	; 22
     d92:	1b c0       	rjmp	.+54     	; 0xdca <__vector_10+0x98>
     d94:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d98:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d9c:	c9 01       	movw	r24, r18
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	09 2e       	mov	r0, r25
     da2:	00 0c       	add	r0, r0
     da4:	aa 0b       	sbc	r26, r26
     da6:	bb 0b       	sbc	r27, r27
     da8:	dc 01       	movw	r26, r24
     daa:	99 27       	eor	r25, r25
     dac:	88 27       	eor	r24, r24
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	84 2b       	or	r24, r20
     db4:	95 2b       	or	r25, r21
     db6:	a6 2b       	or	r26, r22
     db8:	b7 2b       	or	r27, r23
     dba:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     dbe:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     dc2:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     dc6:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     dca:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0xa>
     dce:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0xb>
     dd2:	30 97       	sbiw	r30, 0x00	; 0
     dd4:	39 f0       	breq	.+14     	; 0xde4 <__vector_10+0xb2>
     dd6:	65 e0       	ldi	r22, 0x05	; 5
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0xa>
     dde:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0xb>
     de2:	09 95       	icall
     de4:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     de8:	ff 91       	pop	r31
     dea:	ef 91       	pop	r30
     dec:	bf 91       	pop	r27
     dee:	af 91       	pop	r26
     df0:	9f 91       	pop	r25
     df2:	8f 91       	pop	r24
     df4:	7f 91       	pop	r23
     df6:	6f 91       	pop	r22
     df8:	5f 91       	pop	r21
     dfa:	4f 91       	pop	r20
     dfc:	3f 91       	pop	r19
     dfe:	2f 91       	pop	r18
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63
     e04:	0f 90       	pop	r0
     e06:	1f 90       	pop	r1
     e08:	18 95       	reti

00000e0a <__vector_11>:
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
     e2c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     e30:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     e34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e3c:	c9 01       	movw	r24, r18
     e3e:	03 2e       	mov	r0, r19
     e40:	00 0c       	add	r0, r0
     e42:	aa 0b       	sbc	r26, r26
     e44:	bb 0b       	sbc	r27, r27
     e46:	dc 01       	movw	r26, r24
     e48:	99 27       	eor	r25, r25
     e4a:	88 27       	eor	r24, r24
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	84 2b       	or	r24, r20
     e52:	95 2b       	or	r25, r21
     e54:	a6 2b       	or	r26, r22
     e56:	b7 2b       	or	r27, r23
     e58:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     e5c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     e60:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     e64:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     e68:	b0 9b       	sbis	0x16, 0	; 22
     e6a:	1b c0       	rjmp	.+54     	; 0xea2 <__vector_11+0x98>
     e6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e74:	c9 01       	movw	r24, r18
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	09 2e       	mov	r0, r25
     e7a:	00 0c       	add	r0, r0
     e7c:	aa 0b       	sbc	r26, r26
     e7e:	bb 0b       	sbc	r27, r27
     e80:	dc 01       	movw	r26, r24
     e82:	99 27       	eor	r25, r25
     e84:	88 27       	eor	r24, r24
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	84 2b       	or	r24, r20
     e8c:	95 2b       	or	r25, r21
     e8e:	a6 2b       	or	r26, r22
     e90:	b7 2b       	or	r27, r23
     e92:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     e96:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     e9a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     e9e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     ea2:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0xc>
     ea6:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0xd>
     eaa:	30 97       	sbiw	r30, 0x00	; 0
     eac:	39 f0       	breq	.+14     	; 0xebc <__vector_11+0xb2>
     eae:	66 e0       	ldi	r22, 0x06	; 6
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0xc>
     eb6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0xd>
     eba:	09 95       	icall
     ebc:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     ec0:	ff 91       	pop	r31
     ec2:	ef 91       	pop	r30
     ec4:	bf 91       	pop	r27
     ec6:	af 91       	pop	r26
     ec8:	9f 91       	pop	r25
     eca:	8f 91       	pop	r24
     ecc:	7f 91       	pop	r23
     ece:	6f 91       	pop	r22
     ed0:	5f 91       	pop	r21
     ed2:	4f 91       	pop	r20
     ed4:	3f 91       	pop	r19
     ed6:	2f 91       	pop	r18
     ed8:	0f 90       	pop	r0
     eda:	0f be       	out	0x3f, r0	; 63
     edc:	0f 90       	pop	r0
     ede:	1f 90       	pop	r1
     ee0:	18 95       	reti

00000ee2 <__vector_12>:
     ee2:	1f 92       	push	r1
     ee4:	0f 92       	push	r0
     ee6:	0f b6       	in	r0, 0x3f	; 63
     ee8:	0f 92       	push	r0
     eea:	11 24       	eor	r1, r1
     eec:	2f 93       	push	r18
     eee:	3f 93       	push	r19
     ef0:	4f 93       	push	r20
     ef2:	5f 93       	push	r21
     ef4:	6f 93       	push	r22
     ef6:	7f 93       	push	r23
     ef8:	8f 93       	push	r24
     efa:	9f 93       	push	r25
     efc:	af 93       	push	r26
     efe:	bf 93       	push	r27
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     f08:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     f0c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f10:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f14:	c9 01       	movw	r24, r18
     f16:	03 2e       	mov	r0, r19
     f18:	00 0c       	add	r0, r0
     f1a:	aa 0b       	sbc	r26, r26
     f1c:	bb 0b       	sbc	r27, r27
     f1e:	dc 01       	movw	r26, r24
     f20:	99 27       	eor	r25, r25
     f22:	88 27       	eor	r24, r24
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	84 2b       	or	r24, r20
     f2a:	95 2b       	or	r25, r21
     f2c:	a6 2b       	or	r26, r22
     f2e:	b7 2b       	or	r27, r23
     f30:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     f34:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     f38:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     f3c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     f40:	b0 9b       	sbis	0x16, 0	; 22
     f42:	1b c0       	rjmp	.+54     	; 0xf7a <__vector_12+0x98>
     f44:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f48:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f4c:	c9 01       	movw	r24, r18
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	09 2e       	mov	r0, r25
     f52:	00 0c       	add	r0, r0
     f54:	aa 0b       	sbc	r26, r26
     f56:	bb 0b       	sbc	r27, r27
     f58:	dc 01       	movw	r26, r24
     f5a:	99 27       	eor	r25, r25
     f5c:	88 27       	eor	r24, r24
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	84 2b       	or	r24, r20
     f64:	95 2b       	or	r25, r21
     f66:	a6 2b       	or	r26, r22
     f68:	b7 2b       	or	r27, r23
     f6a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     f6e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     f72:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     f76:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     f7a:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0xe>
     f7e:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0xf>
     f82:	30 97       	sbiw	r30, 0x00	; 0
     f84:	39 f0       	breq	.+14     	; 0xf94 <__vector_12+0xb2>
     f86:	67 e0       	ldi	r22, 0x07	; 7
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0xe>
     f8e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0xf>
     f92:	09 95       	icall
     f94:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <__vector_13>:
     fba:	1f 92       	push	r1
     fbc:	0f 92       	push	r0
     fbe:	0f b6       	in	r0, 0x3f	; 63
     fc0:	0f 92       	push	r0
     fc2:	11 24       	eor	r1, r1
     fc4:	2f 93       	push	r18
     fc6:	3f 93       	push	r19
     fc8:	4f 93       	push	r20
     fca:	5f 93       	push	r21
     fcc:	6f 93       	push	r22
     fce:	7f 93       	push	r23
     fd0:	8f 93       	push	r24
     fd2:	9f 93       	push	r25
     fd4:	af 93       	push	r26
     fd6:	bf 93       	push	r27
     fd8:	ef 93       	push	r30
     fda:	ff 93       	push	r31
     fdc:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     fe0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     fe4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fe8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fec:	c9 01       	movw	r24, r18
     fee:	03 2e       	mov	r0, r19
     ff0:	00 0c       	add	r0, r0
     ff2:	aa 0b       	sbc	r26, r26
     ff4:	bb 0b       	sbc	r27, r27
     ff6:	dc 01       	movw	r26, r24
     ff8:	99 27       	eor	r25, r25
     ffa:	88 27       	eor	r24, r24
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	84 2b       	or	r24, r20
    1002:	95 2b       	or	r25, r21
    1004:	a6 2b       	or	r26, r22
    1006:	b7 2b       	or	r27, r23
    1008:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    100c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1010:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1014:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1018:	b0 9b       	sbis	0x16, 0	; 22
    101a:	1b c0       	rjmp	.+54     	; 0x1052 <__vector_13+0x98>
    101c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1020:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1024:	c9 01       	movw	r24, r18
    1026:	01 96       	adiw	r24, 0x01	; 1
    1028:	09 2e       	mov	r0, r25
    102a:	00 0c       	add	r0, r0
    102c:	aa 0b       	sbc	r26, r26
    102e:	bb 0b       	sbc	r27, r27
    1030:	dc 01       	movw	r26, r24
    1032:	99 27       	eor	r25, r25
    1034:	88 27       	eor	r24, r24
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	84 2b       	or	r24, r20
    103c:	95 2b       	or	r25, r21
    103e:	a6 2b       	or	r26, r22
    1040:	b7 2b       	or	r27, r23
    1042:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1046:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    104a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    104e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1052:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x10>
    1056:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x11>
    105a:	30 97       	sbiw	r30, 0x00	; 0
    105c:	39 f0       	breq	.+14     	; 0x106c <__vector_13+0xb2>
    105e:	68 e0       	ldi	r22, 0x08	; 8
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x10>
    1066:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x11>
    106a:	09 95       	icall
    106c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1070:	ff 91       	pop	r31
    1072:	ef 91       	pop	r30
    1074:	bf 91       	pop	r27
    1076:	af 91       	pop	r26
    1078:	9f 91       	pop	r25
    107a:	8f 91       	pop	r24
    107c:	7f 91       	pop	r23
    107e:	6f 91       	pop	r22
    1080:	5f 91       	pop	r21
    1082:	4f 91       	pop	r20
    1084:	3f 91       	pop	r19
    1086:	2f 91       	pop	r18
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_14>:
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
    10b4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    10b8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    10bc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10c0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10c4:	c9 01       	movw	r24, r18
    10c6:	03 2e       	mov	r0, r19
    10c8:	00 0c       	add	r0, r0
    10ca:	aa 0b       	sbc	r26, r26
    10cc:	bb 0b       	sbc	r27, r27
    10ce:	dc 01       	movw	r26, r24
    10d0:	99 27       	eor	r25, r25
    10d2:	88 27       	eor	r24, r24
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	84 2b       	or	r24, r20
    10da:	95 2b       	or	r25, r21
    10dc:	a6 2b       	or	r26, r22
    10de:	b7 2b       	or	r27, r23
    10e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    10e4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    10e8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    10ec:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    10f0:	b0 9b       	sbis	0x16, 0	; 22
    10f2:	1b c0       	rjmp	.+54     	; 0x112a <__vector_14+0x98>
    10f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10fc:	c9 01       	movw	r24, r18
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	09 2e       	mov	r0, r25
    1102:	00 0c       	add	r0, r0
    1104:	aa 0b       	sbc	r26, r26
    1106:	bb 0b       	sbc	r27, r27
    1108:	dc 01       	movw	r26, r24
    110a:	99 27       	eor	r25, r25
    110c:	88 27       	eor	r24, r24
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	84 2b       	or	r24, r20
    1114:	95 2b       	or	r25, r21
    1116:	a6 2b       	or	r26, r22
    1118:	b7 2b       	or	r27, r23
    111a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    111e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1122:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1126:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    112a:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x12>
    112e:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x13>
    1132:	30 97       	sbiw	r30, 0x00	; 0
    1134:	39 f0       	breq	.+14     	; 0x1144 <__vector_14+0xb2>
    1136:	69 e0       	ldi	r22, 0x09	; 9
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x12>
    113e:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x13>
    1142:	09 95       	icall
    1144:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <__vector_15>:
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	2f 93       	push	r18
    1176:	3f 93       	push	r19
    1178:	4f 93       	push	r20
    117a:	5f 93       	push	r21
    117c:	6f 93       	push	r22
    117e:	7f 93       	push	r23
    1180:	8f 93       	push	r24
    1182:	9f 93       	push	r25
    1184:	af 93       	push	r26
    1186:	bf 93       	push	r27
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
    118c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    1190:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    1194:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1198:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    119c:	c9 01       	movw	r24, r18
    119e:	03 2e       	mov	r0, r19
    11a0:	00 0c       	add	r0, r0
    11a2:	aa 0b       	sbc	r26, r26
    11a4:	bb 0b       	sbc	r27, r27
    11a6:	dc 01       	movw	r26, r24
    11a8:	99 27       	eor	r25, r25
    11aa:	88 27       	eor	r24, r24
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	84 2b       	or	r24, r20
    11b2:	95 2b       	or	r25, r21
    11b4:	a6 2b       	or	r26, r22
    11b6:	b7 2b       	or	r27, r23
    11b8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    11bc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    11c0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    11c4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    11c8:	b0 9b       	sbis	0x16, 0	; 22
    11ca:	1b c0       	rjmp	.+54     	; 0x1202 <__vector_15+0x98>
    11cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11d4:	c9 01       	movw	r24, r18
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	09 2e       	mov	r0, r25
    11da:	00 0c       	add	r0, r0
    11dc:	aa 0b       	sbc	r26, r26
    11de:	bb 0b       	sbc	r27, r27
    11e0:	dc 01       	movw	r26, r24
    11e2:	99 27       	eor	r25, r25
    11e4:	88 27       	eor	r24, r24
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	84 2b       	or	r24, r20
    11ec:	95 2b       	or	r25, r21
    11ee:	a6 2b       	or	r26, r22
    11f0:	b7 2b       	or	r27, r23
    11f2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    11f6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    11fa:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    11fe:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1202:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x14>
    1206:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x15>
    120a:	30 97       	sbiw	r30, 0x00	; 0
    120c:	39 f0       	breq	.+14     	; 0x121c <__vector_15+0xb2>
    120e:	6a e0       	ldi	r22, 0x0A	; 10
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x14>
    1216:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x15>
    121a:	09 95       	icall
    121c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	0f 90       	pop	r0
    123e:	1f 90       	pop	r1
    1240:	18 95       	reti

00001242 <__vector_16>:
    1242:	1f 92       	push	r1
    1244:	0f 92       	push	r0
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	0f 92       	push	r0
    124a:	11 24       	eor	r1, r1
    124c:	2f 93       	push	r18
    124e:	3f 93       	push	r19
    1250:	4f 93       	push	r20
    1252:	5f 93       	push	r21
    1254:	6f 93       	push	r22
    1256:	7f 93       	push	r23
    1258:	8f 93       	push	r24
    125a:	9f 93       	push	r25
    125c:	af 93       	push	r26
    125e:	bf 93       	push	r27
    1260:	ef 93       	push	r30
    1262:	ff 93       	push	r31
    1264:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    1268:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    126c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1270:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1274:	c9 01       	movw	r24, r18
    1276:	03 2e       	mov	r0, r19
    1278:	00 0c       	add	r0, r0
    127a:	aa 0b       	sbc	r26, r26
    127c:	bb 0b       	sbc	r27, r27
    127e:	dc 01       	movw	r26, r24
    1280:	99 27       	eor	r25, r25
    1282:	88 27       	eor	r24, r24
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	84 2b       	or	r24, r20
    128a:	95 2b       	or	r25, r21
    128c:	a6 2b       	or	r26, r22
    128e:	b7 2b       	or	r27, r23
    1290:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1294:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1298:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    129c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    12a0:	b0 9b       	sbis	0x16, 0	; 22
    12a2:	1b c0       	rjmp	.+54     	; 0x12da <__vector_16+0x98>
    12a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12ac:	c9 01       	movw	r24, r18
    12ae:	01 96       	adiw	r24, 0x01	; 1
    12b0:	09 2e       	mov	r0, r25
    12b2:	00 0c       	add	r0, r0
    12b4:	aa 0b       	sbc	r26, r26
    12b6:	bb 0b       	sbc	r27, r27
    12b8:	dc 01       	movw	r26, r24
    12ba:	99 27       	eor	r25, r25
    12bc:	88 27       	eor	r24, r24
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	84 2b       	or	r24, r20
    12c4:	95 2b       	or	r25, r21
    12c6:	a6 2b       	or	r26, r22
    12c8:	b7 2b       	or	r27, r23
    12ca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    12ce:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    12d2:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    12d6:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    12da:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x16>
    12de:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x17>
    12e2:	30 97       	sbiw	r30, 0x00	; 0
    12e4:	39 f0       	breq	.+14     	; 0x12f4 <__vector_16+0xb2>
    12e6:	6b e0       	ldi	r22, 0x0B	; 11
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x16>
    12ee:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x17>
    12f2:	09 95       	icall
    12f4:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	bf 91       	pop	r27
    12fe:	af 91       	pop	r26
    1300:	9f 91       	pop	r25
    1302:	8f 91       	pop	r24
    1304:	7f 91       	pop	r23
    1306:	6f 91       	pop	r22
    1308:	5f 91       	pop	r21
    130a:	4f 91       	pop	r20
    130c:	3f 91       	pop	r19
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_17>:
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
    133c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    1340:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    1344:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1348:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    134c:	c9 01       	movw	r24, r18
    134e:	03 2e       	mov	r0, r19
    1350:	00 0c       	add	r0, r0
    1352:	aa 0b       	sbc	r26, r26
    1354:	bb 0b       	sbc	r27, r27
    1356:	dc 01       	movw	r26, r24
    1358:	99 27       	eor	r25, r25
    135a:	88 27       	eor	r24, r24
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	84 2b       	or	r24, r20
    1362:	95 2b       	or	r25, r21
    1364:	a6 2b       	or	r26, r22
    1366:	b7 2b       	or	r27, r23
    1368:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    136c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1370:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1374:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1378:	b0 9b       	sbis	0x16, 0	; 22
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <__vector_17+0x98>
    137c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1380:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1384:	c9 01       	movw	r24, r18
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	09 2e       	mov	r0, r25
    138a:	00 0c       	add	r0, r0
    138c:	aa 0b       	sbc	r26, r26
    138e:	bb 0b       	sbc	r27, r27
    1390:	dc 01       	movw	r26, r24
    1392:	99 27       	eor	r25, r25
    1394:	88 27       	eor	r24, r24
    1396:	60 e0       	ldi	r22, 0x00	; 0
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	84 2b       	or	r24, r20
    139c:	95 2b       	or	r25, r21
    139e:	a6 2b       	or	r26, r22
    13a0:	b7 2b       	or	r27, r23
    13a2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    13a6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    13aa:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    13ae:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    13b2:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x18>
    13b6:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x19>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	39 f0       	breq	.+14     	; 0x13cc <__vector_17+0xb2>
    13be:	6c e0       	ldi	r22, 0x0C	; 12
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x18>
    13c6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x19>
    13ca:	09 95       	icall
    13cc:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	4f 91       	pop	r20
    13e4:	3f 91       	pop	r19
    13e6:	2f 91       	pop	r18
    13e8:	0f 90       	pop	r0
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	0f 90       	pop	r0
    13ee:	1f 90       	pop	r1
    13f0:	18 95       	reti

000013f2 <__vector_18>:
    13f2:	1f 92       	push	r1
    13f4:	0f 92       	push	r0
    13f6:	0f b6       	in	r0, 0x3f	; 63
    13f8:	0f 92       	push	r0
    13fa:	11 24       	eor	r1, r1
    13fc:	2f 93       	push	r18
    13fe:	3f 93       	push	r19
    1400:	4f 93       	push	r20
    1402:	5f 93       	push	r21
    1404:	6f 93       	push	r22
    1406:	7f 93       	push	r23
    1408:	8f 93       	push	r24
    140a:	9f 93       	push	r25
    140c:	af 93       	push	r26
    140e:	bf 93       	push	r27
    1410:	ef 93       	push	r30
    1412:	ff 93       	push	r31
    1414:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    1418:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    141c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1420:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1424:	c9 01       	movw	r24, r18
    1426:	03 2e       	mov	r0, r19
    1428:	00 0c       	add	r0, r0
    142a:	aa 0b       	sbc	r26, r26
    142c:	bb 0b       	sbc	r27, r27
    142e:	dc 01       	movw	r26, r24
    1430:	99 27       	eor	r25, r25
    1432:	88 27       	eor	r24, r24
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	84 2b       	or	r24, r20
    143a:	95 2b       	or	r25, r21
    143c:	a6 2b       	or	r26, r22
    143e:	b7 2b       	or	r27, r23
    1440:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1444:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1448:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    144c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1450:	b0 9b       	sbis	0x16, 0	; 22
    1452:	1b c0       	rjmp	.+54     	; 0x148a <__vector_18+0x98>
    1454:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1458:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    145c:	c9 01       	movw	r24, r18
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	09 2e       	mov	r0, r25
    1462:	00 0c       	add	r0, r0
    1464:	aa 0b       	sbc	r26, r26
    1466:	bb 0b       	sbc	r27, r27
    1468:	dc 01       	movw	r26, r24
    146a:	99 27       	eor	r25, r25
    146c:	88 27       	eor	r24, r24
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	84 2b       	or	r24, r20
    1474:	95 2b       	or	r25, r21
    1476:	a6 2b       	or	r26, r22
    1478:	b7 2b       	or	r27, r23
    147a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    147e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1482:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1486:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    148a:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x1a>
    148e:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x1b>
    1492:	30 97       	sbiw	r30, 0x00	; 0
    1494:	39 f0       	breq	.+14     	; 0x14a4 <__vector_18+0xb2>
    1496:	6d e0       	ldi	r22, 0x0D	; 13
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x1a>
    149e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x1b>
    14a2:	09 95       	icall
    14a4:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    14a8:	ff 91       	pop	r31
    14aa:	ef 91       	pop	r30
    14ac:	bf 91       	pop	r27
    14ae:	af 91       	pop	r26
    14b0:	9f 91       	pop	r25
    14b2:	8f 91       	pop	r24
    14b4:	7f 91       	pop	r23
    14b6:	6f 91       	pop	r22
    14b8:	5f 91       	pop	r21
    14ba:	4f 91       	pop	r20
    14bc:	3f 91       	pop	r19
    14be:	2f 91       	pop	r18
    14c0:	0f 90       	pop	r0
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	0f 90       	pop	r0
    14c6:	1f 90       	pop	r1
    14c8:	18 95       	reti

000014ca <__vector_19>:
    14ca:	1f 92       	push	r1
    14cc:	0f 92       	push	r0
    14ce:	0f b6       	in	r0, 0x3f	; 63
    14d0:	0f 92       	push	r0
    14d2:	11 24       	eor	r1, r1
    14d4:	2f 93       	push	r18
    14d6:	3f 93       	push	r19
    14d8:	4f 93       	push	r20
    14da:	5f 93       	push	r21
    14dc:	6f 93       	push	r22
    14de:	7f 93       	push	r23
    14e0:	8f 93       	push	r24
    14e2:	9f 93       	push	r25
    14e4:	af 93       	push	r26
    14e6:	bf 93       	push	r27
    14e8:	ef 93       	push	r30
    14ea:	ff 93       	push	r31
    14ec:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    14f0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    14f4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14f8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14fc:	c9 01       	movw	r24, r18
    14fe:	03 2e       	mov	r0, r19
    1500:	00 0c       	add	r0, r0
    1502:	aa 0b       	sbc	r26, r26
    1504:	bb 0b       	sbc	r27, r27
    1506:	dc 01       	movw	r26, r24
    1508:	99 27       	eor	r25, r25
    150a:	88 27       	eor	r24, r24
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	70 e0       	ldi	r23, 0x00	; 0
    1510:	84 2b       	or	r24, r20
    1512:	95 2b       	or	r25, r21
    1514:	a6 2b       	or	r26, r22
    1516:	b7 2b       	or	r27, r23
    1518:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    151c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1520:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1524:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1528:	b0 9b       	sbis	0x16, 0	; 22
    152a:	1b c0       	rjmp	.+54     	; 0x1562 <__vector_19+0x98>
    152c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1530:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1534:	c9 01       	movw	r24, r18
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	09 2e       	mov	r0, r25
    153a:	00 0c       	add	r0, r0
    153c:	aa 0b       	sbc	r26, r26
    153e:	bb 0b       	sbc	r27, r27
    1540:	dc 01       	movw	r26, r24
    1542:	99 27       	eor	r25, r25
    1544:	88 27       	eor	r24, r24
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	84 2b       	or	r24, r20
    154c:	95 2b       	or	r25, r21
    154e:	a6 2b       	or	r26, r22
    1550:	b7 2b       	or	r27, r23
    1552:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1556:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    155a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    155e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1562:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x1c>
    1566:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x1d>
    156a:	30 97       	sbiw	r30, 0x00	; 0
    156c:	39 f0       	breq	.+14     	; 0x157c <__vector_19+0xb2>
    156e:	6e e0       	ldi	r22, 0x0E	; 14
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x1c>
    1576:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x1d>
    157a:	09 95       	icall
    157c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_20>:
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	2f 93       	push	r18
    15ae:	3f 93       	push	r19
    15b0:	4f 93       	push	r20
    15b2:	5f 93       	push	r21
    15b4:	6f 93       	push	r22
    15b6:	7f 93       	push	r23
    15b8:	8f 93       	push	r24
    15ba:	9f 93       	push	r25
    15bc:	af 93       	push	r26
    15be:	bf 93       	push	r27
    15c0:	ef 93       	push	r30
    15c2:	ff 93       	push	r31
    15c4:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    15c8:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    15cc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15d0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15d4:	c9 01       	movw	r24, r18
    15d6:	03 2e       	mov	r0, r19
    15d8:	00 0c       	add	r0, r0
    15da:	aa 0b       	sbc	r26, r26
    15dc:	bb 0b       	sbc	r27, r27
    15de:	dc 01       	movw	r26, r24
    15e0:	99 27       	eor	r25, r25
    15e2:	88 27       	eor	r24, r24
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	84 2b       	or	r24, r20
    15ea:	95 2b       	or	r25, r21
    15ec:	a6 2b       	or	r26, r22
    15ee:	b7 2b       	or	r27, r23
    15f0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    15f4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    15f8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    15fc:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1600:	b0 9b       	sbis	0x16, 0	; 22
    1602:	1b c0       	rjmp	.+54     	; 0x163a <__vector_20+0x98>
    1604:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1608:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    160c:	c9 01       	movw	r24, r18
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	09 2e       	mov	r0, r25
    1612:	00 0c       	add	r0, r0
    1614:	aa 0b       	sbc	r26, r26
    1616:	bb 0b       	sbc	r27, r27
    1618:	dc 01       	movw	r26, r24
    161a:	99 27       	eor	r25, r25
    161c:	88 27       	eor	r24, r24
    161e:	60 e0       	ldi	r22, 0x00	; 0
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	84 2b       	or	r24, r20
    1624:	95 2b       	or	r25, r21
    1626:	a6 2b       	or	r26, r22
    1628:	b7 2b       	or	r27, r23
    162a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    162e:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1632:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1636:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    163a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x1e>
    163e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x1f>
    1642:	30 97       	sbiw	r30, 0x00	; 0
    1644:	39 f0       	breq	.+14     	; 0x1654 <__vector_20+0xb2>
    1646:	6f e0       	ldi	r22, 0x0F	; 15
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x1e>
    164e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x1f>
    1652:	09 95       	icall
    1654:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_21>:
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    16a0:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    16a4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16a8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16ac:	c9 01       	movw	r24, r18
    16ae:	03 2e       	mov	r0, r19
    16b0:	00 0c       	add	r0, r0
    16b2:	aa 0b       	sbc	r26, r26
    16b4:	bb 0b       	sbc	r27, r27
    16b6:	dc 01       	movw	r26, r24
    16b8:	99 27       	eor	r25, r25
    16ba:	88 27       	eor	r24, r24
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	84 2b       	or	r24, r20
    16c2:	95 2b       	or	r25, r21
    16c4:	a6 2b       	or	r26, r22
    16c6:	b7 2b       	or	r27, r23
    16c8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    16cc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    16d0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    16d4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    16d8:	b0 9b       	sbis	0x16, 0	; 22
    16da:	1b c0       	rjmp	.+54     	; 0x1712 <__vector_21+0x98>
    16dc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16e0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16e4:	c9 01       	movw	r24, r18
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	09 2e       	mov	r0, r25
    16ea:	00 0c       	add	r0, r0
    16ec:	aa 0b       	sbc	r26, r26
    16ee:	bb 0b       	sbc	r27, r27
    16f0:	dc 01       	movw	r26, r24
    16f2:	99 27       	eor	r25, r25
    16f4:	88 27       	eor	r24, r24
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	84 2b       	or	r24, r20
    16fc:	95 2b       	or	r25, r21
    16fe:	a6 2b       	or	r26, r22
    1700:	b7 2b       	or	r27, r23
    1702:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1706:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    170a:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    170e:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1712:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x20>
    1716:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x21>
    171a:	30 97       	sbiw	r30, 0x00	; 0
    171c:	39 f0       	breq	.+14     	; 0x172c <__vector_21+0xb2>
    171e:	60 e1       	ldi	r22, 0x10	; 16
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x20>
    1726:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x21>
    172a:	09 95       	icall
    172c:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1730:	ff 91       	pop	r31
    1732:	ef 91       	pop	r30
    1734:	bf 91       	pop	r27
    1736:	af 91       	pop	r26
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	7f 91       	pop	r23
    173e:	6f 91       	pop	r22
    1740:	5f 91       	pop	r21
    1742:	4f 91       	pop	r20
    1744:	3f 91       	pop	r19
    1746:	2f 91       	pop	r18
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	0f 90       	pop	r0
    174e:	1f 90       	pop	r1
    1750:	18 95       	reti

00001752 <__vector_22>:
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	ef 93       	push	r30
    1772:	ff 93       	push	r31
    1774:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    1778:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    177c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1780:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1784:	c9 01       	movw	r24, r18
    1786:	03 2e       	mov	r0, r19
    1788:	00 0c       	add	r0, r0
    178a:	aa 0b       	sbc	r26, r26
    178c:	bb 0b       	sbc	r27, r27
    178e:	dc 01       	movw	r26, r24
    1790:	99 27       	eor	r25, r25
    1792:	88 27       	eor	r24, r24
    1794:	60 e0       	ldi	r22, 0x00	; 0
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	84 2b       	or	r24, r20
    179a:	95 2b       	or	r25, r21
    179c:	a6 2b       	or	r26, r22
    179e:	b7 2b       	or	r27, r23
    17a0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    17a4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    17a8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    17ac:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    17b0:	b0 9b       	sbis	0x16, 0	; 22
    17b2:	1b c0       	rjmp	.+54     	; 0x17ea <__vector_22+0x98>
    17b4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17b8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17bc:	c9 01       	movw	r24, r18
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	09 2e       	mov	r0, r25
    17c2:	00 0c       	add	r0, r0
    17c4:	aa 0b       	sbc	r26, r26
    17c6:	bb 0b       	sbc	r27, r27
    17c8:	dc 01       	movw	r26, r24
    17ca:	99 27       	eor	r25, r25
    17cc:	88 27       	eor	r24, r24
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	84 2b       	or	r24, r20
    17d4:	95 2b       	or	r25, r21
    17d6:	a6 2b       	or	r26, r22
    17d8:	b7 2b       	or	r27, r23
    17da:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    17de:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    17e2:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    17e6:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    17ea:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x22>
    17ee:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x23>
    17f2:	30 97       	sbiw	r30, 0x00	; 0
    17f4:	39 f0       	breq	.+14     	; 0x1804 <__vector_22+0xb2>
    17f6:	61 e1       	ldi	r22, 0x11	; 17
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x22>
    17fe:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x23>
    1802:	09 95       	icall
    1804:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1808:	ff 91       	pop	r31
    180a:	ef 91       	pop	r30
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_9>:
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    184c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
    1856:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
    185a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <timerQ>
    185e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <timerQ+0x1>
    1862:	30 97       	sbiw	r30, 0x00	; 0
    1864:	39 f0       	breq	.+14     	; 0x1874 <__vector_9+0x4a>
    1866:	42 81       	ldd	r20, Z+2	; 0x02
    1868:	53 81       	ldd	r21, Z+3	; 0x03
    186a:	64 81       	ldd	r22, Z+4	; 0x04
    186c:	75 81       	ldd	r23, Z+5	; 0x05
    186e:	86 17       	cp	r24, r22
    1870:	97 07       	cpc	r25, r23
    1872:	a1 f0       	breq	.+40     	; 0x189c <__vector_9+0x72>
    1874:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1878:	8d 7f       	andi	r24, 0xFD	; 253
    187a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	7f 91       	pop	r23
    1888:	6f 91       	pop	r22
    188a:	5f 91       	pop	r21
    188c:	4f 91       	pop	r20
    188e:	3f 91       	pop	r19
    1890:	2f 91       	pop	r18
    1892:	0f 90       	pop	r0
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	0f 90       	pop	r0
    1898:	1f 90       	pop	r1
    189a:	18 95       	reti
    189c:	ca 01       	movw	r24, r20
    189e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18a2:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18a6:	42 1b       	sub	r20, r18
    18a8:	53 0b       	sbc	r21, r19
    18aa:	41 30       	cpi	r20, 0x01	; 1
    18ac:	51 05       	cpc	r21, r1
    18ae:	51 f0       	breq	.+20     	; 0x18c4 <__vector_9+0x9a>
    18b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    18b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    18b8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    18bc:	82 60       	ori	r24, 0x02	; 2
    18be:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    18c2:	dd cf       	rjmp	.-70     	; 0x187e <__vector_9+0x54>
    18c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	f0 cf       	rjmp	.-32     	; 0x18b0 <__vector_9+0x86>

000018d0 <__vector_7>:
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	0f 92       	push	r0
    18d8:	11 24       	eor	r1, r1
    18da:	8f 92       	push	r8
    18dc:	9f 92       	push	r9
    18de:	af 92       	push	r10
    18e0:	bf 92       	push	r11
    18e2:	cf 92       	push	r12
    18e4:	df 92       	push	r13
    18e6:	ef 92       	push	r14
    18e8:	ff 92       	push	r15
    18ea:	0f 93       	push	r16
    18ec:	1f 93       	push	r17
    18ee:	2f 93       	push	r18
    18f0:	3f 93       	push	r19
    18f2:	4f 93       	push	r20
    18f4:	5f 93       	push	r21
    18f6:	6f 93       	push	r22
    18f8:	7f 93       	push	r23
    18fa:	8f 93       	push	r24
    18fc:	9f 93       	push	r25
    18fe:	af 93       	push	r26
    1900:	bf 93       	push	r27
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	ef 93       	push	r30
    1908:	ff 93       	push	r31
    190a:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <__data_end>
    190e:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <__data_end+0x1>
    1912:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1916:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    191a:	b0 99       	sbic	0x16, 0	; 22
    191c:	98 c0       	rjmp	.+304    	; 0x1a4e <__vector_7+0x17e>
    191e:	47 01       	movw	r8, r14
    1920:	0f 2c       	mov	r0, r15
    1922:	00 0c       	add	r0, r0
    1924:	aa 08       	sbc	r10, r10
    1926:	bb 08       	sbc	r11, r11
    1928:	54 01       	movw	r10, r8
    192a:	99 24       	eor	r9, r9
    192c:	88 24       	eor	r8, r8
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	88 2a       	or	r8, r24
    1934:	99 2a       	or	r9, r25
    1936:	aa 2a       	or	r10, r26
    1938:	bb 2a       	or	r11, r27
    193a:	c0 91 18 01 	lds	r28, 0x0118	; 0x800118 <timerQ>
    193e:	d0 91 19 01 	lds	r29, 0x0119	; 0x800119 <timerQ+0x1>
    1942:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <msgQ>
    1946:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <msgQ+0x1>
    194a:	20 97       	sbiw	r28, 0x00	; 0
    194c:	09 f4       	brne	.+2      	; 0x1950 <__vector_7+0x80>
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <__vector_7+0xfe>
    1950:	4a 81       	ldd	r20, Y+2	; 0x02
    1952:	5b 81       	ldd	r21, Y+3	; 0x03
    1954:	6c 81       	ldd	r22, Y+4	; 0x04
    1956:	7d 81       	ldd	r23, Y+5	; 0x05
    1958:	8a 01       	movw	r16, r20
    195a:	9b 01       	movw	r18, r22
    195c:	08 19       	sub	r16, r8
    195e:	19 09       	sbc	r17, r9
    1960:	2a 09       	sbc	r18, r10
    1962:	3b 09       	sbc	r19, r11
    1964:	10 16       	cp	r1, r16
    1966:	11 06       	cpc	r1, r17
    1968:	12 06       	cpc	r1, r18
    196a:	13 06       	cpc	r1, r19
    196c:	0c f4       	brge	.+2      	; 0x1970 <__vector_7+0xa0>
    196e:	40 c0       	rjmp	.+128    	; 0x19f0 <__vector_7+0x120>
    1970:	d8 80       	ld	r13, Y
    1972:	c9 80       	ldd	r12, Y+1	; 0x01
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	b9 f1       	breq	.+110    	; 0x19e6 <__vector_7+0x116>
    1978:	0e 81       	ldd	r16, Y+6	; 0x06
    197a:	1f 81       	ldd	r17, Y+7	; 0x07
    197c:	28 85       	ldd	r18, Y+8	; 0x08
    197e:	39 85       	ldd	r19, Y+9	; 0x09
    1980:	fc 01       	movw	r30, r24
    1982:	46 81       	ldd	r20, Z+6	; 0x06
    1984:	57 81       	ldd	r21, Z+7	; 0x07
    1986:	60 85       	ldd	r22, Z+8	; 0x08
    1988:	71 85       	ldd	r23, Z+9	; 0x09
    198a:	04 17       	cp	r16, r20
    198c:	15 07       	cpc	r17, r21
    198e:	26 07       	cpc	r18, r22
    1990:	37 07       	cpc	r19, r23
    1992:	4c f1       	brlt	.+82     	; 0x19e6 <__vector_7+0x116>
    1994:	dc 01       	movw	r26, r24
    1996:	0a c0       	rjmp	.+20     	; 0x19ac <__vector_7+0xdc>
    1998:	46 81       	ldd	r20, Z+6	; 0x06
    199a:	57 81       	ldd	r21, Z+7	; 0x07
    199c:	60 85       	ldd	r22, Z+8	; 0x08
    199e:	71 85       	ldd	r23, Z+9	; 0x09
    19a0:	04 17       	cp	r16, r20
    19a2:	15 07       	cpc	r17, r21
    19a4:	26 07       	cpc	r18, r22
    19a6:	37 07       	cpc	r19, r23
    19a8:	dc f0       	brlt	.+54     	; 0x19e0 <__vector_7+0x110>
    19aa:	df 01       	movw	r26, r30
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	11 97       	sbiw	r26, 0x01	; 1
    19b2:	30 97       	sbiw	r30, 0x00	; 0
    19b4:	89 f7       	brne	.-30     	; 0x1998 <__vector_7+0xc8>
    19b6:	19 82       	std	Y+1, r1	; 0x01
    19b8:	18 82       	st	Y, r1
    19ba:	cd 93       	st	X+, r28
    19bc:	dc 93       	st	X, r29
    19be:	38 2f       	mov	r19, r24
    19c0:	29 2f       	mov	r18, r25
    19c2:	cd 2d       	mov	r28, r13
    19c4:	dc 2d       	mov	r29, r12
    19c6:	83 2f       	mov	r24, r19
    19c8:	92 2f       	mov	r25, r18
    19ca:	20 97       	sbiw	r28, 0x00	; 0
    19cc:	09 f6       	brne	.-126    	; 0x1950 <__vector_7+0x80>
    19ce:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <timerQ+0x1>
    19d2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <timerQ>
    19d6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <msgQ+0x1>
    19da:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <msgQ>
    19de:	13 c0       	rjmp	.+38     	; 0x1a06 <__vector_7+0x136>
    19e0:	f9 83       	std	Y+1, r31	; 0x01
    19e2:	e8 83       	st	Y, r30
    19e4:	ea cf       	rjmp	.-44     	; 0x19ba <__vector_7+0xea>
    19e6:	99 83       	std	Y+1, r25	; 0x01
    19e8:	88 83       	st	Y, r24
    19ea:	3c 2f       	mov	r19, r28
    19ec:	2d 2f       	mov	r18, r29
    19ee:	e9 cf       	rjmp	.-46     	; 0x19c2 <__vector_7+0xf2>
    19f0:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <timerQ+0x1>
    19f4:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <timerQ>
    19f8:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <msgQ+0x1>
    19fc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <msgQ>
    1a00:	e6 16       	cp	r14, r22
    1a02:	f7 06       	cpc	r15, r23
    1a04:	d9 f1       	breq	.+118    	; 0x1a7c <__vector_7+0x1ac>
    1a06:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a0a:	8d 7f       	andi	r24, 0xFD	; 253
    1a0c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a10:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    1a14:	ff 91       	pop	r31
    1a16:	ef 91       	pop	r30
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	bf 91       	pop	r27
    1a1e:	af 91       	pop	r26
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	7f 91       	pop	r23
    1a26:	6f 91       	pop	r22
    1a28:	5f 91       	pop	r21
    1a2a:	4f 91       	pop	r20
    1a2c:	3f 91       	pop	r19
    1a2e:	2f 91       	pop	r18
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	ff 90       	pop	r15
    1a36:	ef 90       	pop	r14
    1a38:	df 90       	pop	r13
    1a3a:	cf 90       	pop	r12
    1a3c:	bf 90       	pop	r11
    1a3e:	af 90       	pop	r10
    1a40:	9f 90       	pop	r9
    1a42:	8f 90       	pop	r8
    1a44:	0f 90       	pop	r0
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	0f 90       	pop	r0
    1a4a:	1f 90       	pop	r1
    1a4c:	18 95       	reti
    1a4e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a52:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a56:	47 01       	movw	r8, r14
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	88 1a       	sub	r8, r24
    1a5c:	98 0a       	sbc	r9, r24
    1a5e:	09 2c       	mov	r0, r9
    1a60:	00 0c       	add	r0, r0
    1a62:	aa 08       	sbc	r10, r10
    1a64:	bb 08       	sbc	r11, r11
    1a66:	d4 01       	movw	r26, r8
    1a68:	99 27       	eor	r25, r25
    1a6a:	88 27       	eor	r24, r24
    1a6c:	49 01       	movw	r8, r18
    1a6e:	a1 2c       	mov	r10, r1
    1a70:	b1 2c       	mov	r11, r1
    1a72:	88 2a       	or	r8, r24
    1a74:	99 2a       	or	r9, r25
    1a76:	aa 2a       	or	r10, r26
    1a78:	bb 2a       	or	r11, r27
    1a7a:	5f cf       	rjmp	.-322    	; 0x193a <__vector_7+0x6a>
    1a7c:	ca 01       	movw	r24, r20
    1a7e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a82:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a86:	42 1b       	sub	r20, r18
    1a88:	53 0b       	sbc	r21, r19
    1a8a:	41 30       	cpi	r20, 0x01	; 1
    1a8c:	51 05       	cpc	r21, r1
    1a8e:	51 f0       	breq	.+20     	; 0x1aa4 <__vector_7+0x1d4>
    1a90:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1a94:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1a98:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1a9c:	82 60       	ori	r24, 0x02	; 2
    1a9e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1aa2:	b6 cf       	rjmp	.-148    	; 0x1a10 <__vector_7+0x140>
    1aa4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1aa8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	f0 cf       	rjmp	.-32     	; 0x1a90 <__vector_7+0x1c0>

00001ab0 <async>:
    1ab0:	3f 92       	push	r3
    1ab2:	4f 92       	push	r4
    1ab4:	5f 92       	push	r5
    1ab6:	6f 92       	push	r6
    1ab8:	7f 92       	push	r7
    1aba:	8f 92       	push	r8
    1abc:	9f 92       	push	r9
    1abe:	af 92       	push	r10
    1ac0:	bf 92       	push	r11
    1ac2:	cf 92       	push	r12
    1ac4:	df 92       	push	r13
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	ef b7       	in	r30, 0x3f	; 63
    1ad4:	e0 78       	andi	r30, 0x80	; 128
    1ad6:	3e 2e       	mov	r3, r30
    1ad8:	f8 94       	cli
    1ada:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <msgPool>
    1ade:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <msgPool+0x1>
    1ae2:	20 97       	sbiw	r28, 0x00	; 0
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <async+0x38>
    1ae6:	52 c1       	rjmp	.+676    	; 0x1d8c <async+0x2dc>
    1ae8:	e8 81       	ld	r30, Y
    1aea:	f9 81       	ldd	r31, Y+1	; 0x01
    1aec:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <msgPool+0x1>
    1af0:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <msgPool>
    1af4:	1b 87       	std	Y+11, r17	; 0x0b
    1af6:	0a 87       	std	Y+10, r16	; 0x0a
    1af8:	fd 86       	std	Y+13, r15	; 0x0d
    1afa:	ec 86       	std	Y+12, r14	; 0x0c
    1afc:	df 86       	std	Y+15, r13	; 0x0f
    1afe:	ce 86       	std	Y+14, r12	; 0x0e
    1b00:	33 20       	and	r3, r3
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <async+0x56>
    1b04:	6f c0       	rjmp	.+222    	; 0x1be4 <async+0x134>
    1b06:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1b0a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1b0e:	02 80       	ldd	r0, Z+2	; 0x02
    1b10:	f3 81       	ldd	r31, Z+3	; 0x03
    1b12:	e0 2d       	mov	r30, r0
    1b14:	c2 80       	ldd	r12, Z+2	; 0x02
    1b16:	d3 80       	ldd	r13, Z+3	; 0x03
    1b18:	e4 80       	ldd	r14, Z+4	; 0x04
    1b1a:	f5 80       	ldd	r15, Z+5	; 0x05
    1b1c:	c6 0e       	add	r12, r22
    1b1e:	d7 1e       	adc	r13, r23
    1b20:	e8 1e       	adc	r14, r24
    1b22:	f9 1e       	adc	r15, r25
    1b24:	ca 82       	std	Y+2, r12	; 0x02
    1b26:	db 82       	std	Y+3, r13	; 0x03
    1b28:	ec 82       	std	Y+4, r14	; 0x04
    1b2a:	fd 82       	std	Y+5, r15	; 0x05
    1b2c:	12 16       	cp	r1, r18
    1b2e:	13 06       	cpc	r1, r19
    1b30:	14 06       	cpc	r1, r20
    1b32:	15 06       	cpc	r1, r21
    1b34:	0c f0       	brlt	.+2      	; 0x1b38 <async+0x88>
    1b36:	f8 c0       	rjmp	.+496    	; 0x1d28 <async+0x278>
    1b38:	da 01       	movw	r26, r20
    1b3a:	c9 01       	movw	r24, r18
    1b3c:	8c 01       	movw	r16, r24
    1b3e:	9d 01       	movw	r18, r26
    1b40:	0c 0d       	add	r16, r12
    1b42:	1d 1d       	adc	r17, r13
    1b44:	2e 1d       	adc	r18, r14
    1b46:	3f 1d       	adc	r19, r15
    1b48:	0e 83       	std	Y+6, r16	; 0x06
    1b4a:	1f 83       	std	Y+7, r17	; 0x07
    1b4c:	28 87       	std	Y+8, r18	; 0x08
    1b4e:	39 87       	std	Y+9, r19	; 0x09
    1b50:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    1b54:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    1b58:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b5c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b60:	b0 99       	sbic	0x16, 0	; 22
    1b62:	49 c0       	rjmp	.+146    	; 0x1bf6 <async+0x146>
    1b64:	2c 01       	movw	r4, r24
    1b66:	09 2e       	mov	r0, r25
    1b68:	00 0c       	add	r0, r0
    1b6a:	66 08       	sbc	r6, r6
    1b6c:	77 08       	sbc	r7, r7
    1b6e:	52 01       	movw	r10, r4
    1b70:	99 24       	eor	r9, r9
    1b72:	88 24       	eor	r8, r8
    1b74:	2b 01       	movw	r4, r22
    1b76:	61 2c       	mov	r6, r1
    1b78:	71 2c       	mov	r7, r1
    1b7a:	48 28       	or	r4, r8
    1b7c:	59 28       	or	r5, r9
    1b7e:	6a 28       	or	r6, r10
    1b80:	7b 28       	or	r7, r11
    1b82:	b7 01       	movw	r22, r14
    1b84:	a6 01       	movw	r20, r12
    1b86:	44 19       	sub	r20, r4
    1b88:	55 09       	sbc	r21, r5
    1b8a:	66 09       	sbc	r22, r6
    1b8c:	77 09       	sbc	r23, r7
    1b8e:	14 16       	cp	r1, r20
    1b90:	15 06       	cpc	r1, r21
    1b92:	16 06       	cpc	r1, r22
    1b94:	17 06       	cpc	r1, r23
    1b96:	0c f0       	brlt	.+2      	; 0x1b9a <async+0xea>
    1b98:	68 c0       	rjmp	.+208    	; 0x1c6a <async+0x1ba>
    1b9a:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <timerQ>
    1b9e:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <timerQ+0x1>
    1ba2:	10 97       	sbiw	r26, 0x00	; 0
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <async+0xf8>
    1ba6:	dc c0       	rjmp	.+440    	; 0x1d60 <async+0x2b0>
    1ba8:	12 96       	adiw	r26, 0x02	; 2
    1baa:	0d 91       	ld	r16, X+
    1bac:	1d 91       	ld	r17, X+
    1bae:	2d 91       	ld	r18, X+
    1bb0:	3c 91       	ld	r19, X
    1bb2:	15 97       	sbiw	r26, 0x05	; 5
    1bb4:	c0 16       	cp	r12, r16
    1bb6:	d1 06       	cpc	r13, r17
    1bb8:	e2 06       	cpc	r14, r18
    1bba:	f3 06       	cpc	r15, r19
    1bbc:	5c f4       	brge	.+22     	; 0x1bd4 <async+0x124>
    1bbe:	d0 c0       	rjmp	.+416    	; 0x1d60 <async+0x2b0>
    1bc0:	42 81       	ldd	r20, Z+2	; 0x02
    1bc2:	53 81       	ldd	r21, Z+3	; 0x03
    1bc4:	64 81       	ldd	r22, Z+4	; 0x04
    1bc6:	75 81       	ldd	r23, Z+5	; 0x05
    1bc8:	c4 16       	cp	r12, r20
    1bca:	d5 06       	cpc	r13, r21
    1bcc:	e6 06       	cpc	r14, r22
    1bce:	f7 06       	cpc	r15, r23
    1bd0:	4c f1       	brlt	.+82     	; 0x1c24 <async+0x174>
    1bd2:	df 01       	movw	r26, r30
    1bd4:	ed 91       	ld	r30, X+
    1bd6:	fc 91       	ld	r31, X
    1bd8:	11 97       	sbiw	r26, 0x01	; 1
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	89 f7       	brne	.-30     	; 0x1bc0 <async+0x110>
    1bde:	19 82       	std	Y+1, r1	; 0x01
    1be0:	18 82       	st	Y, r1
    1be2:	22 c0       	rjmp	.+68     	; 0x1c28 <async+0x178>
    1be4:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <timestamp>
    1be8:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <timestamp+0x1>
    1bec:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <timestamp+0x2>
    1bf0:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <timestamp+0x3>
    1bf4:	93 cf       	rjmp	.-218    	; 0x1b1c <async+0x6c>
    1bf6:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1bfa:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1bfe:	2c 01       	movw	r4, r24
    1c00:	4f ef       	ldi	r20, 0xFF	; 255
    1c02:	44 1a       	sub	r4, r20
    1c04:	54 0a       	sbc	r5, r20
    1c06:	05 2c       	mov	r0, r5
    1c08:	00 0c       	add	r0, r0
    1c0a:	66 08       	sbc	r6, r6
    1c0c:	77 08       	sbc	r7, r7
    1c0e:	b2 01       	movw	r22, r4
    1c10:	55 27       	eor	r21, r21
    1c12:	44 27       	eor	r20, r20
    1c14:	2f 01       	movw	r4, r30
    1c16:	61 2c       	mov	r6, r1
    1c18:	71 2c       	mov	r7, r1
    1c1a:	44 2a       	or	r4, r20
    1c1c:	55 2a       	or	r5, r21
    1c1e:	66 2a       	or	r6, r22
    1c20:	77 2a       	or	r7, r23
    1c22:	af cf       	rjmp	.-162    	; 0x1b82 <async+0xd2>
    1c24:	f9 83       	std	Y+1, r31	; 0x01
    1c26:	e8 83       	st	Y, r30
    1c28:	cd 93       	st	X+, r28
    1c2a:	dc 93       	st	X, r29
    1c2c:	82 17       	cp	r24, r18
    1c2e:	93 07       	cpc	r25, r19
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <async+0x184>
    1c32:	7f c0       	rjmp	.+254    	; 0x1d32 <async+0x282>
    1c34:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c38:	8d 7f       	andi	r24, 0xFD	; 253
    1c3a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1c3e:	33 20       	and	r3, r3
    1c40:	09 f0       	breq	.+2      	; 0x1c44 <async+0x194>
    1c42:	78 94       	sei
    1c44:	ce 01       	movw	r24, r28
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	ff 90       	pop	r15
    1c50:	ef 90       	pop	r14
    1c52:	df 90       	pop	r13
    1c54:	cf 90       	pop	r12
    1c56:	bf 90       	pop	r11
    1c58:	af 90       	pop	r10
    1c5a:	9f 90       	pop	r9
    1c5c:	8f 90       	pop	r8
    1c5e:	7f 90       	pop	r7
    1c60:	6f 90       	pop	r6
    1c62:	5f 90       	pop	r5
    1c64:	4f 90       	pop	r4
    1c66:	3f 90       	pop	r3
    1c68:	08 95       	ret
    1c6a:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <msgQ>
    1c6e:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <msgQ+0x1>
    1c72:	10 97       	sbiw	r26, 0x00	; 0
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <async+0x1c8>
    1c76:	83 c0       	rjmp	.+262    	; 0x1d7e <async+0x2ce>
    1c78:	16 96       	adiw	r26, 0x06	; 6
    1c7a:	cd 90       	ld	r12, X+
    1c7c:	dd 90       	ld	r13, X+
    1c7e:	ed 90       	ld	r14, X+
    1c80:	fc 90       	ld	r15, X
    1c82:	19 97       	sbiw	r26, 0x09	; 9
    1c84:	0c 15       	cp	r16, r12
    1c86:	1d 05       	cpc	r17, r13
    1c88:	2e 05       	cpc	r18, r14
    1c8a:	3f 05       	cpc	r19, r15
    1c8c:	64 f4       	brge	.+24     	; 0x1ca6 <async+0x1f6>
    1c8e:	77 c0       	rjmp	.+238    	; 0x1d7e <async+0x2ce>
    1c90:	c6 80       	ldd	r12, Z+6	; 0x06
    1c92:	d7 80       	ldd	r13, Z+7	; 0x07
    1c94:	e0 84       	ldd	r14, Z+8	; 0x08
    1c96:	f1 84       	ldd	r15, Z+9	; 0x09
    1c98:	0c 15       	cp	r16, r12
    1c9a:	1d 05       	cpc	r17, r13
    1c9c:	2e 05       	cpc	r18, r14
    1c9e:	3f 05       	cpc	r19, r15
    1ca0:	0c f4       	brge	.+2      	; 0x1ca4 <async+0x1f4>
    1ca2:	5b c0       	rjmp	.+182    	; 0x1d5a <async+0x2aa>
    1ca4:	df 01       	movw	r26, r30
    1ca6:	ed 91       	ld	r30, X+
    1ca8:	fc 91       	ld	r31, X
    1caa:	11 97       	sbiw	r26, 0x01	; 1
    1cac:	30 97       	sbiw	r30, 0x00	; 0
    1cae:	81 f7       	brne	.-32     	; 0x1c90 <async+0x1e0>
    1cb0:	19 82       	std	Y+1, r1	; 0x01
    1cb2:	18 82       	st	Y, r1
    1cb4:	cd 93       	st	X+, r28
    1cb6:	dc 93       	st	X, r29
    1cb8:	33 20       	and	r3, r3
    1cba:	21 f2       	breq	.-120    	; 0x1c44 <async+0x194>
    1cbc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1cc0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <async+0x21a>
    1cc8:	bc cf       	rjmp	.-136    	; 0x1c42 <async+0x192>
    1cca:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1cce:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1cd2:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <msgQ>
    1cd6:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <msgQ+0x1>
    1cda:	02 81       	ldd	r16, Z+2	; 0x02
    1cdc:	13 81       	ldd	r17, Z+3	; 0x03
    1cde:	d9 01       	movw	r26, r18
    1ce0:	16 96       	adiw	r26, 0x06	; 6
    1ce2:	4d 91       	ld	r20, X+
    1ce4:	5d 91       	ld	r21, X+
    1ce6:	6d 91       	ld	r22, X+
    1ce8:	7c 91       	ld	r23, X
    1cea:	19 97       	sbiw	r26, 0x09	; 9
    1cec:	d8 01       	movw	r26, r16
    1cee:	16 96       	adiw	r26, 0x06	; 6
    1cf0:	0d 91       	ld	r16, X+
    1cf2:	1d 91       	ld	r17, X+
    1cf4:	2d 91       	ld	r18, X+
    1cf6:	3c 91       	ld	r19, X
    1cf8:	19 97       	sbiw	r26, 0x09	; 9
    1cfa:	40 1b       	sub	r20, r16
    1cfc:	51 0b       	sbc	r21, r17
    1cfe:	62 0b       	sbc	r22, r18
    1d00:	73 0b       	sbc	r23, r19
    1d02:	77 ff       	sbrs	r23, 7
    1d04:	9e cf       	rjmp	.-196    	; 0x1c42 <async+0x192>
    1d06:	dc 01       	movw	r26, r24
    1d08:	2d 91       	ld	r18, X+
    1d0a:	3c 91       	ld	r19, X
    1d0c:	11 97       	sbiw	r26, 0x01	; 1
    1d0e:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1d12:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1d16:	ed 93       	st	X+, r30
    1d18:	fc 93       	st	X, r31
    1d1a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1d1e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1d22:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1d26:	8d cf       	rjmp	.-230    	; 0x1c42 <async+0x192>
    1d28:	8f ef       	ldi	r24, 0xFF	; 255
    1d2a:	9f ef       	ldi	r25, 0xFF	; 255
    1d2c:	af ef       	ldi	r26, 0xFF	; 255
    1d2e:	bf e7       	ldi	r27, 0x7F	; 127
    1d30:	05 cf       	rjmp	.-502    	; 0x1b3c <async+0x8c>
    1d32:	c8 01       	movw	r24, r16
    1d34:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d38:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d3c:	04 1b       	sub	r16, r20
    1d3e:	15 0b       	sbc	r17, r21
    1d40:	01 30       	cpi	r16, 0x01	; 1
    1d42:	11 05       	cpc	r17, r1
    1d44:	b1 f0       	breq	.+44     	; 0x1d72 <async+0x2c2>
    1d46:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1d4a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1d4e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1d52:	82 60       	ori	r24, 0x02	; 2
    1d54:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1d58:	72 cf       	rjmp	.-284    	; 0x1c3e <async+0x18e>
    1d5a:	f9 83       	std	Y+1, r31	; 0x01
    1d5c:	e8 83       	st	Y, r30
    1d5e:	aa cf       	rjmp	.-172    	; 0x1cb4 <async+0x204>
    1d60:	b9 83       	std	Y+1, r27	; 0x01
    1d62:	a8 83       	st	Y, r26
    1d64:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <timerQ+0x1>
    1d68:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <timerQ>
    1d6c:	97 01       	movw	r18, r14
    1d6e:	86 01       	movw	r16, r12
    1d70:	5d cf       	rjmp	.-326    	; 0x1c2c <async+0x17c>
    1d72:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1d76:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1d7a:	01 96       	adiw	r24, 0x01	; 1
    1d7c:	e4 cf       	rjmp	.-56     	; 0x1d46 <async+0x296>
    1d7e:	b9 83       	std	Y+1, r27	; 0x01
    1d80:	a8 83       	st	Y, r26
    1d82:	d0 93 1b 01 	sts	0x011B, r29	; 0x80011b <msgQ+0x1>
    1d86:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <msgQ>
    1d8a:	96 cf       	rjmp	.-212    	; 0x1cb8 <async+0x208>
    1d8c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <dequeue.part.0>

00001d90 <sync>:
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	0f 93       	push	r16
    1d9a:	1f 93       	push	r17
    1d9c:	cf 93       	push	r28
    1d9e:	df 93       	push	r29
    1da0:	ec 01       	movw	r28, r24
    1da2:	7b 01       	movw	r14, r22
    1da4:	6a 01       	movw	r12, r20
    1da6:	1f b7       	in	r17, 0x3f	; 63
    1da8:	10 78       	andi	r17, 0x80	; 128
    1daa:	f8 94       	cli
    1dac:	a8 81       	ld	r26, Y
    1dae:	b9 81       	ldd	r27, Y+1	; 0x01
    1db0:	10 97       	sbiw	r26, 0x00	; 0
    1db2:	19 f4       	brne	.+6      	; 0x1dba <sync+0x2a>
    1db4:	62 c0       	rjmp	.+196    	; 0x1e7a <sync+0xea>
    1db6:	a0 81       	ld	r26, Z
    1db8:	b1 81       	ldd	r27, Z+1	; 0x01
    1dba:	14 96       	adiw	r26, 0x04	; 4
    1dbc:	ed 91       	ld	r30, X+
    1dbe:	fc 91       	ld	r31, X
    1dc0:	15 97       	sbiw	r26, 0x05	; 5
    1dc2:	30 97       	sbiw	r30, 0x00	; 0
    1dc4:	c1 f7       	brne	.-16     	; 0x1db6 <sync+0x26>
    1dc6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1dca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1dce:	2a 17       	cp	r18, r26
    1dd0:	3b 07       	cpc	r19, r27
    1dd2:	09 f4       	brne	.+2      	; 0x1dd6 <sync+0x46>
    1dd4:	4c c0       	rjmp	.+152    	; 0x1e6e <sync+0xde>
    1dd6:	11 23       	and	r17, r17
    1dd8:	a1 f1       	breq	.+104    	; 0x1e42 <sync+0xb2>
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	19 f0       	breq	.+6      	; 0x1de8 <sync+0x58>
    1de2:	fc 01       	movw	r30, r24
    1de4:	15 82       	std	Z+5, r1	; 0x05
    1de6:	14 82       	std	Z+4, r1	; 0x04
    1de8:	3b 83       	std	Y+3, r19	; 0x03
    1dea:	2a 83       	std	Y+2, r18	; 0x02
    1dec:	f9 01       	movw	r30, r18
    1dee:	d5 83       	std	Z+5, r29	; 0x05
    1df0:	c4 83       	std	Z+4, r28	; 0x04
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1df8:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1dfc:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	89 2b       	or	r24, r25
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <sync+0x7a>
    1e08:	41 c0       	rjmp	.+130    	; 0x1e8c <sync+0xfc>
    1e0a:	f9 83       	std	Y+1, r31	; 0x01
    1e0c:	e8 83       	st	Y, r30
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	09 f0       	breq	.+2      	; 0x1e18 <sync+0x88>
    1e16:	78 94       	sei
    1e18:	b6 01       	movw	r22, r12
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	f7 01       	movw	r30, r14
    1e1e:	09 95       	icall
    1e20:	f8 2e       	mov	r15, r24
    1e22:	09 2f       	mov	r16, r25
    1e24:	8f b7       	in	r24, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	19 82       	std	Y+1, r1	; 0x01
    1e2a:	18 82       	st	Y, r1
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	82 30       	cpi	r24, 0x02	; 2
    1e32:	91 05       	cpc	r25, r1
    1e34:	a0 f4       	brcc	.+40     	; 0x1e5e <sync+0xce>
    1e36:	11 23       	and	r17, r17
    1e38:	79 f0       	breq	.+30     	; 0x1e58 <sync+0xc8>
    1e3a:	78 94       	sei
    1e3c:	8f 2d       	mov	r24, r15
    1e3e:	90 2f       	mov	r25, r16
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <sync+0xb6>
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	9f ef       	ldi	r25, 0xFF	; 255
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	df 90       	pop	r13
    1e54:	cf 90       	pop	r12
    1e56:	08 95       	ret
    1e58:	8f 2d       	mov	r24, r15
    1e5a:	90 2f       	mov	r25, r16
    1e5c:	f4 cf       	rjmp	.-24     	; 0x1e46 <sync+0xb6>
    1e5e:	1b 82       	std	Y+3, r1	; 0x03
    1e60:	1a 82       	std	Y+2, r1	; 0x02
    1e62:	fc 01       	movw	r30, r24
    1e64:	15 82       	std	Z+5, r1	; 0x05
    1e66:	14 82       	std	Z+4, r1	; 0x04
    1e68:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1e6c:	e4 cf       	rjmp	.-56     	; 0x1e36 <sync+0xa6>
    1e6e:	11 23       	and	r17, r17
    1e70:	41 f3       	breq	.-48     	; 0x1e42 <sync+0xb2>
    1e72:	78 94       	sei
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	9f ef       	ldi	r25, 0xFF	; 255
    1e78:	e6 cf       	rjmp	.-52     	; 0x1e46 <sync+0xb6>
    1e7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1e7e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1e82:	99 83       	std	Y+1, r25	; 0x01
    1e84:	88 83       	st	Y, r24
    1e86:	11 23       	and	r17, r17
    1e88:	39 f2       	breq	.-114    	; 0x1e18 <sync+0x88>
    1e8a:	c1 cf       	rjmp	.-126    	; 0x1e0e <sync+0x7e>
    1e8c:	78 94       	sei
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	d9 cf       	rjmp	.-78     	; 0x1e46 <sync+0xb6>

00001e94 <run>:
    1e94:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <msgQ>
    1e98:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <msgQ+0x1>
    1e9c:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1ea0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1ea4:	20 97       	sbiw	r28, 0x00	; 0
    1ea6:	09 f4       	brne	.+2      	; 0x1eaa <run+0x16>
    1ea8:	6e c0       	rjmp	.+220    	; 0x1f86 <run+0xf2>
    1eaa:	88 81       	ld	r24, Y
    1eac:	99 81       	ldd	r25, Y+1	; 0x01
    1eae:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <msgQ+0x1>
    1eb2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <msgQ>
    1eb6:	d3 83       	std	Z+3, r29	; 0x03
    1eb8:	c2 83       	std	Z+2, r28	; 0x02
    1eba:	78 94       	sei
    1ebc:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ebe:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ec0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ec2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ec4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec8:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <sync>
    1ecc:	8f b7       	in	r24, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    1ed4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    1ed8:	99 83       	std	Y+1, r25	; 0x01
    1eda:	88 83       	st	Y, r24
    1edc:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    1ee0:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    1ee4:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <activeStack>
    1ee8:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <activeStack+0x1>
    1eec:	f7 01       	movw	r30, r14
    1eee:	a0 81       	ld	r26, Z
    1ef0:	b1 81       	ldd	r27, Z+1	; 0x01
    1ef2:	12 96       	adiw	r26, 0x02	; 2
    1ef4:	8d 91       	ld	r24, X+
    1ef6:	9c 91       	ld	r25, X
    1ef8:	13 97       	sbiw	r26, 0x03	; 3
    1efa:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <msgQ>
    1efe:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <msgQ+0x1>
    1f02:	20 97       	sbiw	r28, 0x00	; 0
    1f04:	a9 f0       	breq	.+42     	; 0x1f30 <run+0x9c>
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	49 f2       	breq	.-110    	; 0x1e9c <run+0x8>
    1f0a:	4e 81       	ldd	r20, Y+6	; 0x06
    1f0c:	5f 81       	ldd	r21, Y+7	; 0x07
    1f0e:	68 85       	ldd	r22, Y+8	; 0x08
    1f10:	79 85       	ldd	r23, Y+9	; 0x09
    1f12:	fc 01       	movw	r30, r24
    1f14:	06 81       	ldd	r16, Z+6	; 0x06
    1f16:	17 81       	ldd	r17, Z+7	; 0x07
    1f18:	20 85       	ldd	r18, Z+8	; 0x08
    1f1a:	31 85       	ldd	r19, Z+9	; 0x09
    1f1c:	40 1b       	sub	r20, r16
    1f1e:	51 0b       	sbc	r21, r17
    1f20:	62 0b       	sbc	r22, r18
    1f22:	73 0b       	sbc	r23, r19
    1f24:	14 16       	cp	r1, r20
    1f26:	15 06       	cpc	r1, r21
    1f28:	16 06       	cpc	r1, r22
    1f2a:	17 06       	cpc	r1, r23
    1f2c:	0c f0       	brlt	.+2      	; 0x1f30 <run+0x9c>
    1f2e:	b6 cf       	rjmp	.-148    	; 0x1e9c <run+0x8>
    1f30:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <activeStack+0x1>
    1f34:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <activeStack>
    1f38:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f3c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f40:	f7 01       	movw	r30, r14
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	80 83       	st	Z, r24
    1f46:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <threadPool+0x1>
    1f4a:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <threadPool>
    1f4e:	14 96       	adiw	r26, 0x04	; 4
    1f50:	ed 91       	ld	r30, X+
    1f52:	fc 91       	ld	r31, X
    1f54:	15 97       	sbiw	r26, 0x05	; 5
    1f56:	30 97       	sbiw	r30, 0x00	; 0
    1f58:	41 f0       	breq	.+16     	; 0x1f6a <run+0xd6>
    1f5a:	a0 81       	ld	r26, Z
    1f5c:	b1 81       	ldd	r27, Z+1	; 0x01
    1f5e:	14 96       	adiw	r26, 0x04	; 4
    1f60:	ed 91       	ld	r30, X+
    1f62:	fc 91       	ld	r31, X
    1f64:	15 97       	sbiw	r26, 0x05	; 5
    1f66:	30 97       	sbiw	r30, 0x00	; 0
    1f68:	c1 f7       	brne	.-16     	; 0x1f5a <run+0xc6>
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1f70:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <msgQ>
    1f74:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <msgQ+0x1>
    1f78:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1f7c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1f80:	20 97       	sbiw	r28, 0x00	; 0
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <run+0xf2>
    1f84:	92 cf       	rjmp	.-220    	; 0x1eaa <run+0x16>
    1f86:	0e 94 72 04 	call	0x8e4	; 0x8e4 <dequeue.part.0>

00001f8a <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1f8a:	42 31       	cpi	r20, 0x12	; 18
    1f8c:	b8 f4       	brcc	.+46     	; 0x1fbc <install+0x32>
        char status;
        DISABLE(status);
    1f8e:	2f b7       	in	r18, 0x3f	; 63
    1f90:	f8 94       	cli
        otable[i] = obj;
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	44 0f       	add	r20, r20
    1f96:	55 1f       	adc	r21, r21
    1f98:	fa 01       	movw	r30, r20
    1f9a:	e4 5e       	subi	r30, 0xE4	; 228
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	91 83       	std	Z+1, r25	; 0x01
    1fa0:	80 83       	st	Z, r24
        mtable[i] = m;
    1fa2:	fa 01       	movw	r30, r20
    1fa4:	ec 54       	subi	r30, 0x4C	; 76
    1fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa8:	71 83       	std	Z+1, r23	; 0x01
    1faa:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	53 83       	std	Z+3, r21	; 0x03
    1fb4:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1fb6:	27 ff       	sbrs	r18, 7
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <install+0x32>
    1fba:	78 94       	sei
    1fbc:	08 95       	ret

00001fbe <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1fbe:	8c 01       	movw	r16, r24
    1fc0:	7b 01       	movw	r14, r22
    1fc2:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1fc4:	8f b7       	in	r24, 0x3f	; 63
    1fc6:	f8 94       	cli
    initialize();
    1fc8:	0e 94 a7 03 	call	0x74e	; 0x74e <initialize>
    ENABLE(1);
    1fcc:	78 94       	sei
    if (m != NULL)
    1fce:	e1 14       	cp	r14, r1
    1fd0:	f1 04       	cpc	r15, r1
    1fd2:	41 f0       	breq	.+16     	; 0x1fe4 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	a9 01       	movw	r20, r18
    1fda:	60 e0       	ldi	r22, 0x00	; 0
    1fdc:	70 e0       	ldi	r23, 0x00	; 0
    1fde:	cb 01       	movw	r24, r22
    1fe0:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <async>
    DISABLE(status);
    1fe4:	8f b7       	in	r24, 0x3f	; 63
    1fe6:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1fe8:	0e 94 32 04 	call	0x864	; 0x864 <schedule>
    ENABLE(1);
    1fec:	78 94       	sei
    while (1) {
        SLEEP();
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	83 bf       	out	0x33, r24	; 51
    1ff2:	88 95       	sleep
    1ff4:	fd cf       	rjmp	.-6      	; 0x1ff0 <tinytimber+0x32>

00001ff6 <__divmodhi4>:
    1ff6:	97 fb       	bst	r25, 7
    1ff8:	07 2e       	mov	r0, r23
    1ffa:	16 f4       	brtc	.+4      	; 0x2000 <__divmodhi4+0xa>
    1ffc:	00 94       	com	r0
    1ffe:	07 d0       	rcall	.+14     	; 0x200e <__divmodhi4_neg1>
    2000:	77 fd       	sbrc	r23, 7
    2002:	09 d0       	rcall	.+18     	; 0x2016 <__divmodhi4_neg2>
    2004:	0e 94 15 10 	call	0x202a	; 0x202a <__udivmodhi4>
    2008:	07 fc       	sbrc	r0, 7
    200a:	05 d0       	rcall	.+10     	; 0x2016 <__divmodhi4_neg2>
    200c:	3e f4       	brtc	.+14     	; 0x201c <__divmodhi4_exit>

0000200e <__divmodhi4_neg1>:
    200e:	90 95       	com	r25
    2010:	81 95       	neg	r24
    2012:	9f 4f       	sbci	r25, 0xFF	; 255
    2014:	08 95       	ret

00002016 <__divmodhi4_neg2>:
    2016:	70 95       	com	r23
    2018:	61 95       	neg	r22
    201a:	7f 4f       	sbci	r23, 0xFF	; 255

0000201c <__divmodhi4_exit>:
    201c:	08 95       	ret

0000201e <__tablejump2__>:
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	05 90       	lpm	r0, Z+
    2024:	f4 91       	lpm	r31, Z
    2026:	e0 2d       	mov	r30, r0
    2028:	09 94       	ijmp

0000202a <__udivmodhi4>:
    202a:	aa 1b       	sub	r26, r26
    202c:	bb 1b       	sub	r27, r27
    202e:	51 e1       	ldi	r21, 0x11	; 17
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <__udivmodhi4_ep>

00002032 <__udivmodhi4_loop>:
    2032:	aa 1f       	adc	r26, r26
    2034:	bb 1f       	adc	r27, r27
    2036:	a6 17       	cp	r26, r22
    2038:	b7 07       	cpc	r27, r23
    203a:	10 f0       	brcs	.+4      	; 0x2040 <__udivmodhi4_ep>
    203c:	a6 1b       	sub	r26, r22
    203e:	b7 0b       	sbc	r27, r23

00002040 <__udivmodhi4_ep>:
    2040:	88 1f       	adc	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	5a 95       	dec	r21
    2046:	a9 f7       	brne	.-22     	; 0x2032 <__udivmodhi4_loop>
    2048:	80 95       	com	r24
    204a:	90 95       	com	r25
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	08 95       	ret

00002052 <setjmp>:
    2052:	dc 01       	movw	r26, r24
    2054:	2d 92       	st	X+, r2
    2056:	3d 92       	st	X+, r3
    2058:	4d 92       	st	X+, r4
    205a:	5d 92       	st	X+, r5
    205c:	6d 92       	st	X+, r6
    205e:	7d 92       	st	X+, r7
    2060:	8d 92       	st	X+, r8
    2062:	9d 92       	st	X+, r9
    2064:	ad 92       	st	X+, r10
    2066:	bd 92       	st	X+, r11
    2068:	cd 92       	st	X+, r12
    206a:	dd 92       	st	X+, r13
    206c:	ed 92       	st	X+, r14
    206e:	fd 92       	st	X+, r15
    2070:	0d 93       	st	X+, r16
    2072:	1d 93       	st	X+, r17
    2074:	cd 93       	st	X+, r28
    2076:	dd 93       	st	X+, r29
    2078:	ff 91       	pop	r31
    207a:	ef 91       	pop	r30
    207c:	8d b7       	in	r24, 0x3d	; 61
    207e:	8d 93       	st	X+, r24
    2080:	8e b7       	in	r24, 0x3e	; 62
    2082:	8d 93       	st	X+, r24
    2084:	8f b7       	in	r24, 0x3f	; 63
    2086:	8d 93       	st	X+, r24
    2088:	ed 93       	st	X+, r30
    208a:	fd 93       	st	X+, r31
    208c:	88 27       	eor	r24, r24
    208e:	99 27       	eor	r25, r25
    2090:	09 94       	ijmp

00002092 <longjmp>:
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	91 05       	cpc	r25, r1
    209a:	81 1d       	adc	r24, r1
    209c:	2d 90       	ld	r2, X+
    209e:	3d 90       	ld	r3, X+
    20a0:	4d 90       	ld	r4, X+
    20a2:	5d 90       	ld	r5, X+
    20a4:	6d 90       	ld	r6, X+
    20a6:	7d 90       	ld	r7, X+
    20a8:	8d 90       	ld	r8, X+
    20aa:	9d 90       	ld	r9, X+
    20ac:	ad 90       	ld	r10, X+
    20ae:	bd 90       	ld	r11, X+
    20b0:	cd 90       	ld	r12, X+
    20b2:	dd 90       	ld	r13, X+
    20b4:	ed 90       	ld	r14, X+
    20b6:	fd 90       	ld	r15, X+
    20b8:	0d 91       	ld	r16, X+
    20ba:	1d 91       	ld	r17, X+
    20bc:	cd 91       	ld	r28, X+
    20be:	dd 91       	ld	r29, X+
    20c0:	ed 91       	ld	r30, X+
    20c2:	fd 91       	ld	r31, X+
    20c4:	0d 90       	ld	r0, X+
    20c6:	f8 94       	cli
    20c8:	fe bf       	out	0x3e, r31	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	ed bf       	out	0x3d, r30	; 61
    20ce:	ed 91       	ld	r30, X+
    20d0:	fd 91       	ld	r31, X+
    20d2:	09 94       	ijmp

000020d4 <_exit>:
    20d4:	f8 94       	cli

000020d6 <__stop_program>:
    20d6:	ff cf       	rjmp	.-2      	; 0x20d6 <__stop_program>
