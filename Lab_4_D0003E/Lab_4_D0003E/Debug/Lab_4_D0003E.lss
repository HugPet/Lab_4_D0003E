
Lab_4_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001f78  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800112  00800112  0000201e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000201e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028ea  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108f  00000000  00000000  00004baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016bf  00000000  00000000  00005c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b20  00000000  00000000  000072f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000905  00000000  00000000  00007e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003294  00000000  00000000  0000871d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000b9b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 b4 03 	jmp	0x768	; 0x768 <__vector_1>
       8:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_2>
       c:	0c 94 8c 04 	jmp	0x918	; 0x918 <__vector_3>
      10:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_4>
      14:	0c 94 64 05 	jmp	0xac8	; 0xac8 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_9>
      28:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_10>
      2c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_11>
      30:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <__vector_12>
      34:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_13>
      38:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__vector_14>
      3c:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__vector_15>
      40:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__vector_16>
      44:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_17>
      48:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_18>
      4c:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <__vector_19>
      50:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__vector_20>
      54:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_21>
      58:	0c 94 e0 0a 	jmp	0x15c0	; 0x15c0 <__vector_22>
      5c:	63 00       	.word	0x0063	; ????
      5e:	b4 00       	.word	0x00b4	; ????
      60:	bd 00       	.word	0x00bd	; ????
      62:	c6 00       	.word	0x00c6	; ????
      64:	cf 00       	.word	0x00cf	; ????
      66:	d8 00       	.word	0x00d8	; ????
      68:	e1 00       	.word	0x00e1	; ????
      6a:	ea 00       	.word	0x00ea	; ????
      6c:	f3 00       	.word	0x00f3	; ????
      6e:	fc 00       	.word	0x00fc	; ????

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e8 e7       	ldi	r30, 0x78	; 120
      84:	ff e1       	ldi	r31, 0x1F	; 31
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 31       	cpi	r26, 0x12	; 18
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a2 e1       	ldi	r26, 0x12	; 18
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a5 36       	cpi	r26, 0x65	; 101
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <main>
      a6:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <writeChar>:
// .c for a dedicated writer

#include "DediWriter.h"

void writeChar(char ch, int pos){
	DISABLE;
      ae:	78 94       	sei
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	fc 01       	movw	r30, r24
      b4:	f0 97       	sbiw	r30, 0x30	; 48
      b6:	ea 30       	cpi	r30, 0x0A	; 10
      b8:	f1 05       	cpc	r31, r1
      ba:	08 f0       	brcs	.+2      	; 0xbe <writeChar+0x10>
      bc:	54 c0       	rjmp	.+168    	; 0x166 <writeChar+0xb8>
      be:	e2 5d       	subi	r30, 0xD2	; 210
      c0:	ff 4f       	sbci	r31, 0xFF	; 255
      c2:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	30 e0       	ldi	r19, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
      ca:	45 e0       	ldi	r20, 0x05	; 5
      cc:	50 e0       	ldi	r21, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
      ce:	e5 e0       	ldi	r30, 0x05	; 5
      d0:	f0 e0       	ldi	r31, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
      d6:	62 30       	cpi	r22, 0x02	; 2
      d8:	71 05       	cpc	r23, r1
      da:	09 f4       	brne	.+2      	; 0xde <writeChar+0x30>
      dc:	3a c1       	rjmp	.+628    	; 0x352 <writeChar+0x2a4>
      de:	0c f4       	brge	.+2      	; 0xe2 <writeChar+0x34>
      e0:	94 c0       	rjmp	.+296    	; 0x20a <writeChar+0x15c>
      e2:	64 30       	cpi	r22, 0x04	; 4
      e4:	71 05       	cpc	r23, r1
      e6:	09 f4       	brne	.+2      	; 0xea <writeChar+0x3c>
      e8:	c9 c0       	rjmp	.+402    	; 0x27c <writeChar+0x1ce>
      ea:	0c f4       	brge	.+2      	; 0xee <writeChar+0x40>
      ec:	01 c1       	rjmp	.+514    	; 0x2f0 <writeChar+0x242>
      ee:	65 30       	cpi	r22, 0x05	; 5
      f0:	71 05       	cpc	r23, r1
      f2:	c1 f5       	brne	.+112    	; 0x164 <writeChar+0xb6>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
      f4:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
      f8:	6f 76       	andi	r22, 0x6F	; 111
      fa:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
      fe:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     102:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
     104:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     108:	82 95       	swap	r24
     10a:	92 95       	swap	r25
     10c:	90 7f       	andi	r25, 0xF0	; 240
     10e:	98 27       	eor	r25, r24
     110:	80 7f       	andi	r24, 0xF0	; 240
     112:	98 27       	eor	r25, r24
     114:	86 2b       	or	r24, r22
     116:	87 2b       	or	r24, r23
     118:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     11c:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     120:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     122:	e2 95       	swap	r30
     124:	f2 95       	swap	r31
     126:	f0 7f       	andi	r31, 0xF0	; 240
     128:	fe 27       	eor	r31, r30
     12a:	e0 7f       	andi	r30, 0xF0	; 240
     12c:	fe 27       	eor	r31, r30
     12e:	e8 2b       	or	r30, r24
     130:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     134:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     138:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     13a:	42 95       	swap	r20
     13c:	52 95       	swap	r21
     13e:	50 7f       	andi	r21, 0xF0	; 240
     140:	54 27       	eor	r21, r20
     142:	40 7f       	andi	r20, 0xF0	; 240
     144:	54 27       	eor	r21, r20
     146:	48 2b       	or	r20, r24
     148:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     14c:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     150:	8f 70       	andi	r24, 0x0F	; 15
	case 5:
		LCDDR2 &= 0x6F;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     152:	22 95       	swap	r18
     154:	32 95       	swap	r19
     156:	30 7f       	andi	r19, 0xF0	; 240
     158:	32 27       	eor	r19, r18
     15a:	20 7f       	andi	r18, 0xF0	; 240
     15c:	32 27       	eor	r19, r18
     15e:	28 2b       	or	r18, r24
     160:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
	default:
		ENABLE;
		return;
	}
	ENABLE;
     164:	f8 94       	cli
     166:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     16c:	41 e0       	ldi	r20, 0x01	; 1
     16e:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
     170:	e1 e0       	ldi	r30, 0x01	; 1
     172:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	ae cf       	rjmp	.-164    	; 0xd6 <writeChar+0x28>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
     17e:	4e e0       	ldi	r20, 0x0E	; 14
     180:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     182:	e1 e0       	ldi	r30, 0x01	; 1
     184:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
     18a:	a5 cf       	rjmp	.-182    	; 0xd6 <writeChar+0x28>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
     190:	4b e0       	ldi	r20, 0x0B	; 11
     192:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     194:	e1 e0       	ldi	r30, 0x01	; 1
     196:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
     198:	81 e0       	ldi	r24, 0x01	; 1
     19a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     19c:	9c cf       	rjmp	.-200    	; 0xd6 <writeChar+0x28>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1a2:	4b e0       	ldi	r20, 0x0B	; 11
     1a4:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
     1a6:	e5 e0       	ldi	r30, 0x05	; 5
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
     1ae:	93 cf       	rjmp	.-218    	; 0xd6 <writeChar+0x28>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
     1b4:	4b e0       	ldi	r20, 0x0B	; 11
     1b6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1b8:	e4 e0       	ldi	r30, 0x04	; 4
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     1c0:	8a cf       	rjmp	.-236    	; 0xd6 <writeChar+0x28>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1c2:	21 e0       	ldi	r18, 0x01	; 1
     1c4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
     1c6:	4f e0       	ldi	r20, 0x0F	; 15
     1c8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1ca:	e4 e0       	ldi	r30, 0x04	; 4
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1d2:	81 cf       	rjmp	.-254    	; 0xd6 <writeChar+0x28>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     1dc:	e1 e0       	ldi	r30, 0x01	; 1
     1de:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
     1e4:	78 cf       	rjmp	.-272    	; 0xd6 <writeChar+0x28>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
     1ea:	4f e0       	ldi	r20, 0x0F	; 15
     1ec:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     1ee:	e5 e0       	ldi	r30, 0x05	; 5
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1f6:	6f cf       	rjmp	.-290    	; 0xd6 <writeChar+0x28>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1fc:	4b e0       	ldi	r20, 0x0B	; 11
     1fe:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     200:	e5 e0       	ldi	r30, 0x05	; 5
     202:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     208:	66 cf       	rjmp	.-308    	; 0xd6 <writeChar+0x28>
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
     20a:	61 15       	cp	r22, r1
     20c:	71 05       	cpc	r23, r1
     20e:	09 f4       	brne	.+2      	; 0x212 <writeChar+0x164>
     210:	56 c0       	rjmp	.+172    	; 0x2be <writeChar+0x210>
     212:	61 30       	cpi	r22, 0x01	; 1
     214:	71 05       	cpc	r23, r1
     216:	09 f0       	breq	.+2      	; 0x21a <writeChar+0x16c>
     218:	a5 cf       	rjmp	.-182    	; 0x164 <writeChar+0xb6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     21a:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     21e:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     220:	82 95       	swap	r24
     222:	92 95       	swap	r25
     224:	90 7f       	andi	r25, 0xF0	; 240
     226:	98 27       	eor	r25, r24
     228:	80 7f       	andi	r24, 0xF0	; 240
     22a:	98 27       	eor	r25, r24
     22c:	86 2b       	or	r24, r22
     22e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     232:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     236:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     238:	e2 95       	swap	r30
     23a:	f2 95       	swap	r31
     23c:	f0 7f       	andi	r31, 0xF0	; 240
     23e:	fe 27       	eor	r31, r30
     240:	e0 7f       	andi	r30, 0xF0	; 240
     242:	fe 27       	eor	r31, r30
     244:	e8 2b       	or	r30, r24
     246:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     24a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     24e:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     250:	42 95       	swap	r20
     252:	52 95       	swap	r21
     254:	50 7f       	andi	r21, 0xF0	; 240
     256:	54 27       	eor	r21, r20
     258:	40 7f       	andi	r20, 0xF0	; 240
     25a:	54 27       	eor	r21, r20
     25c:	48 2b       	or	r20, r24
     25e:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     262:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     266:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     268:	22 95       	swap	r18
     26a:	32 95       	swap	r19
     26c:	30 7f       	andi	r19, 0xF0	; 240
     26e:	32 27       	eor	r19, r18
     270:	20 7f       	andi	r18, 0xF0	; 240
     272:	32 27       	eor	r19, r18
     274:	28 2b       	or	r18, r24
     276:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     27a:	74 cf       	rjmp	.-280    	; 0x164 <writeChar+0xb6>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
     27c:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     280:	66 7f       	andi	r22, 0xF6	; 246
     282:	60 93 ee 00 	sts	0x00EE, r22	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     286:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     28a:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
     28c:	70 91 ee 00 	lds	r23, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     290:	86 2b       	or	r24, r22
     292:	87 2b       	or	r24, r23
     294:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     298:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     29c:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     29e:	e8 2b       	or	r30, r24
     2a0:	e0 93 f3 00 	sts	0x00F3, r30	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     2a4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2a8:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     2aa:	48 2b       	or	r20, r24
     2ac:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     2b0:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2b4:	80 7f       	andi	r24, 0xF0	; 240
	case 4:
		LCDDR2 &= 0xF6;
		LCDDR2 |= writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     2b6:	28 2b       	or	r18, r24
     2b8:	20 93 fd 00 	sts	0x00FD, r18	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
     2bc:	53 cf       	rjmp	.-346    	; 0x164 <writeChar+0xb6>
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     2be:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2c2:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     2c4:	86 2b       	or	r24, r22
     2c6:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     2ca:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2ce:	80 7f       	andi	r24, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     2d0:	e8 2b       	or	r30, r24
     2d2:	e0 93 f1 00 	sts	0x00F1, r30	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     2d6:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2da:	80 7f       	andi	r24, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     2dc:	48 2b       	or	r20, r24
     2de:	40 93 f6 00 	sts	0x00F6, r20	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     2e2:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2e6:	80 7f       	andi	r24, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     2e8:	28 2b       	or	r18, r24
     2ea:	20 93 fb 00 	sts	0x00FB, r18	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     2ee:	3a cf       	rjmp	.-396    	; 0x164 <writeChar+0xb6>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2f0:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2f4:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2f6:	82 95       	swap	r24
     2f8:	92 95       	swap	r25
     2fa:	90 7f       	andi	r25, 0xF0	; 240
     2fc:	98 27       	eor	r25, r24
     2fe:	80 7f       	andi	r24, 0xF0	; 240
     300:	98 27       	eor	r25, r24
     302:	86 2b       	or	r24, r22
     304:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     308:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     30c:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     30e:	e2 95       	swap	r30
     310:	f2 95       	swap	r31
     312:	f0 7f       	andi	r31, 0xF0	; 240
     314:	fe 27       	eor	r31, r30
     316:	e0 7f       	andi	r30, 0xF0	; 240
     318:	fe 27       	eor	r31, r30
     31a:	e8 2b       	or	r30, r24
     31c:	e0 93 f2 00 	sts	0x00F2, r30	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     320:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     324:	8f 70       	andi	r24, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     326:	42 95       	swap	r20
     328:	52 95       	swap	r21
     32a:	50 7f       	andi	r21, 0xF0	; 240
     32c:	54 27       	eor	r21, r20
     32e:	40 7f       	andi	r20, 0xF0	; 240
     330:	54 27       	eor	r21, r20
     332:	48 2b       	or	r20, r24
     334:	40 93 f7 00 	sts	0x00F7, r20	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     338:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     33c:	8f 70       	andi	r24, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     33e:	22 95       	swap	r18
     340:	32 95       	swap	r19
     342:	30 7f       	andi	r19, 0xF0	; 240
     344:	32 27       	eor	r19, r18
     346:	20 7f       	andi	r18, 0xF0	; 240
     348:	32 27       	eor	r19, r18
     34a:	28 2b       	or	r18, r24
     34c:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     350:	09 cf       	rjmp	.-494    	; 0x164 <writeChar+0xb6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     352:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     356:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     358:	86 2b       	or	r24, r22
     35a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     35e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     362:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     364:	e8 2b       	or	r30, r24
     366:	e0 93 f2 00 	sts	0x00F2, r30	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     36a:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     36e:	80 7f       	andi	r24, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     370:	48 2b       	or	r20, r24
     372:	40 93 f7 00 	sts	0x00F7, r20	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     376:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     37a:	80 7f       	andi	r24, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     37c:	28 2b       	or	r18, r24
     37e:	20 93 fc 00 	sts	0x00FC, r18	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     382:	f0 ce       	rjmp	.-544    	; 0x164 <writeChar+0xb6>

00000384 <interHandlerFreq>:
	} else {
		g->pulseSwitch = 0;
	}
}

void interHandlerFreq(GUI *g, enum Vector v) {
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	2a 97       	sbiw	r28, 0x0a	; 10
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	7c 01       	movw	r14, r24
	int i = PINB & 0x40;
     3a0:	13 b1       	in	r17, 0x03	; 3
     3a2:	10 74       	andi	r17, 0x40	; 64
	printAt(11, 2);
     3a4:	42 e0       	ldi	r20, 0x02	; 2
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	6b e0       	ldi	r22, 0x0B	; 11
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 46 02 	call	0x48c	; 0x48c <printAt>
	if (g->pulseSwitch == 0) {
     3b4:	f7 01       	movw	r30, r14
     3b6:	80 8d       	ldd	r24, Z+24	; 0x18
     3b8:	81 11       	cpse	r24, r1
     3ba:	1a c0       	rjmp	.+52     	; 0x3f0 <interHandlerFreq+0x6c>
	pulse temp = g->p;
     3bc:	8a e0       	ldi	r24, 0x0A	; 10
     3be:	34 96       	adiw	r30, 0x04	; 4
	addFreq(&temp);
	} else {
	subFreq(&temp);
	}
	} else {
	pulse temp = g->q;
     3c0:	de 01       	movw	r26, r28
     3c2:	11 96       	adiw	r26, 0x01	; 1
     3c4:	01 90       	ld	r0, Z+
     3c6:	0d 92       	st	X+, r0
     3c8:	8a 95       	dec	r24
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <interHandlerFreq+0x40>
	if (i != 0x40) {
	addFreq(&temp);
     3cc:	ce 01       	movw	r24, r28
     3ce:	01 96       	adiw	r24, 0x01	; 1
	} else {
	subFreq(&temp);
	}
	} else {
	pulse temp = g->q;
	if (i != 0x40) {
     3d0:	10 34       	cpi	r17, 0x40	; 64
     3d2:	91 f0       	breq	.+36     	; 0x3f8 <interHandlerFreq+0x74>
	addFreq(&temp);
     3d4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <addFreq>
	} else {
	subFreq(&temp);
	}
	}
}
     3d8:	2a 96       	adiw	r28, 0x0a	; 10
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	08 95       	ret
	addFreq(&temp);
	} else {
	subFreq(&temp);
	}
	} else {
	pulse temp = g->q;
     3f0:	8a e0       	ldi	r24, 0x0A	; 10
     3f2:	f7 01       	movw	r30, r14
     3f4:	3e 96       	adiw	r30, 0x0e	; 14
     3f6:	e4 cf       	rjmp	.-56     	; 0x3c0 <interHandlerFreq+0x3c>
	if (i != 0x40) {
	addFreq(&temp);
	} else {
	subFreq(&temp);
     3f8:	0e 94 c8 02 	call	0x590	; 0x590 <subFreq>
	}
	}
}
     3fc:	ed cf       	rjmp	.-38     	; 0x3d8 <interHandlerFreq+0x54>

000003fe <printActivePulse>:

void printActivePulse(GUI *g) {
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	ec 01       	movw	r28, r24
	if (g->pulseSwitch == 0) {
     404:	88 8d       	ldd	r24, Y+24	; 0x18
     406:	88 23       	and	r24, r24
     408:	01 f1       	breq	.+64     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		LCDDR2 &= 0x9F;
		LCDDR2 |= 0x06;
	} else {
		LCDDR2 &= 0xF9;
     40a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     40e:	89 7f       	andi	r24, 0xF9	; 249
     410:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= 0x60;
     414:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     418:	80 66       	ori	r24, 0x60	; 96
     41a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	}
	printAt(g->p.freq, 0);
     41e:	68 85       	ldd	r22, Y+8	; 0x08
     420:	79 85       	ldd	r23, Y+9	; 0x09
     422:	07 2e       	mov	r0, r23
     424:	00 0c       	add	r0, r0
     426:	88 0b       	sbc	r24, r24
     428:	99 0b       	sbc	r25, r25
     42a:	40 e0       	ldi	r20, 0x00	; 0
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	0e 94 46 02 	call	0x48c	; 0x48c <printAt>
	printAt(g->q.freq, 4);
     432:	6a 89       	ldd	r22, Y+18	; 0x12
     434:	7b 89       	ldd	r23, Y+19	; 0x13
     436:	07 2e       	mov	r0, r23
     438:	00 0c       	add	r0, r0
     43a:	88 0b       	sbc	r24, r24
     43c:	99 0b       	sbc	r25, r25
     43e:	44 e0       	ldi	r20, 0x04	; 4
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
	} else {
		LCDDR2 &= 0xF9;
		LCDDR2 |= 0x60;
	}
	printAt(g->p.freq, 0);
	printAt(g->q.freq, 4);
     446:	0c 94 46 02 	jmp	0x48c	; 0x48c <printAt>
	}
}

void printActivePulse(GUI *g) {
	if (g->pulseSwitch == 0) {
		LCDDR2 &= 0x9F;
     44a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     44e:	8f 79       	andi	r24, 0x9F	; 159
     450:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR2 |= 0x06;
     454:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     458:	86 60       	ori	r24, 0x06	; 6
     45a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     45e:	df cf       	rjmp	.-66     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>

00000460 <LCDInit>:
#include "LCD.h"
#include "DediWriter.h"

void LCDInit(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
     460:	86 e3       	ldi	r24, 0x36	; 54
     462:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
     466:	87 e0       	ldi	r24, 0x07	; 7
     468:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
     46c:	8f e0       	ldi	r24, 0x0F	; 15
     46e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
     472:	90 ec       	ldi	r25, 0xC0	; 192
     474:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
     478:	8d e0       	ldi	r24, 0x0D	; 13
     47a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	EIMSK |= (1<<PCIF1)|(1<<PCIF0);
     47e:	8d b3       	in	r24, 0x1d	; 29
     480:	80 6c       	ori	r24, 0xC0	; 192
     482:	8d bb       	out	0x1d, r24	; 29
	PORTB = (1<<PB7)|(1<<PB6);
     484:	95 b9       	out	0x05, r25	; 5
	DDRB = (0<<DDB7)|(0<<DDB6);
     486:	14 b8       	out	0x04, r1	; 4
	MCUCR = (0 << PUD);
     488:	15 be       	out	0x35, r1	; 53
     48a:	08 95       	ret

0000048c <printAt>:
}

void printAt(long num, int pos) {
     48c:	8f 92       	push	r8
     48e:	9f 92       	push	r9
     490:	af 92       	push	r10
     492:	bf 92       	push	r11
     494:	cf 92       	push	r12
     496:	df 92       	push	r13
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	4b 01       	movw	r8, r22
     4a2:	5c 01       	movw	r10, r24
     4a4:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     4a6:	24 e6       	ldi	r18, 0x64	; 100
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__divmodsi4>
     4b2:	2a e0       	ldi	r18, 0x0A	; 10
     4b4:	c2 2e       	mov	r12, r18
     4b6:	d1 2c       	mov	r13, r1
     4b8:	e1 2c       	mov	r14, r1
     4ba:	f1 2c       	mov	r15, r1
     4bc:	a7 01       	movw	r20, r14
     4be:	96 01       	movw	r18, r12
     4c0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__divmodsi4>
     4c4:	be 01       	movw	r22, r28
     4c6:	80 e3       	ldi	r24, 0x30	; 48
     4c8:	82 0f       	add	r24, r18
     4ca:	0e 94 57 00 	call	0xae	; 0xae <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     4ce:	21 96       	adiw	r28, 0x01	; 1
     4d0:	c5 01       	movw	r24, r10
     4d2:	b4 01       	movw	r22, r8
     4d4:	a7 01       	movw	r20, r14
     4d6:	96 01       	movw	r18, r12
     4d8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__divmodsi4>
     4dc:	86 2f       	mov	r24, r22
     4de:	be 01       	movw	r22, r28
     4e0:	80 5d       	subi	r24, 0xD0	; 208
}
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     4f6:	0c 94 57 00 	jmp	0xae	; 0xae <writeChar>

000004fa <main>:
#include "LCD.h"
#include <avr/io.h>


int main(void)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	ad 97       	sbiw	r28, 0x2d	; 45
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
	LCDInit();
     50e:	0e 94 30 02 	call	0x460	; 0x460 <LCDInit>
    pulse p = initPulse(0, 0);
     512:	9e 01       	movw	r18, r28
     514:	2c 5d       	subi	r18, 0xDC	; 220
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	8a e0       	ldi	r24, 0x0A	; 10
     51a:	f9 01       	movw	r30, r18
     51c:	11 92       	st	Z+, r1
     51e:	8a 95       	dec	r24
     520:	e9 f7       	brne	.-6      	; 0x51c <__stack+0x1d>
	pulse q = initPulse(30, 1);
     522:	8a e0       	ldi	r24, 0x0A	; 10
     524:	e8 e0       	ldi	r30, 0x08	; 8
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	de 01       	movw	r26, r28
     52a:	5a 96       	adiw	r26, 0x1a	; 26
     52c:	01 90       	ld	r0, Z+
     52e:	0d 92       	st	X+, r0
     530:	8a 95       	dec	r24
     532:	e1 f7       	brne	.-8      	; 0x52c <__stack+0x2d>
	GUI g = GUI_init(p, q);
     534:	1a 82       	std	Y+2, r1	; 0x02
     536:	19 82       	std	Y+1, r1	; 0x01
     538:	1c 82       	std	Y+4, r1	; 0x04
     53a:	1b 82       	std	Y+3, r1	; 0x03
     53c:	8a e0       	ldi	r24, 0x0A	; 10
     53e:	f9 01       	movw	r30, r18
     540:	de 01       	movw	r26, r28
     542:	15 96       	adiw	r26, 0x05	; 5
     544:	01 90       	ld	r0, Z+
     546:	0d 92       	st	X+, r0
     548:	8a 95       	dec	r24
     54a:	e1 f7       	brne	.-8      	; 0x544 <__stack+0x45>
     54c:	8a e0       	ldi	r24, 0x0A	; 10
     54e:	fe 01       	movw	r30, r28
     550:	7a 96       	adiw	r30, 0x1a	; 26
     552:	de 01       	movw	r26, r28
     554:	1f 96       	adiw	r26, 0x0f	; 15
     556:	01 90       	ld	r0, Z+
     558:	0d 92       	st	X+, r0
     55a:	8a 95       	dec	r24
     55c:	e1 f7       	brne	.-8      	; 0x556 <__stack+0x57>
     55e:	19 8e       	std	Y+25, r1	; 0x19
	INSTALL(&g, interHandlerFreq, IRQ_PCINT1);
     560:	42 e0       	ldi	r20, 0x02	; 2
     562:	62 ec       	ldi	r22, 0xC2	; 194
     564:	71 e0       	ldi	r23, 0x01	; 1
     566:	ce 01       	movw	r24, r28
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <install>
	return TINYTIMBER(&g, printActivePulse, NULL);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	6f ef       	ldi	r22, 0xFF	; 255
     574:	71 e0       	ldi	r23, 0x01	; 1
     576:	ce 01       	movw	r24, r28
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <tinytimber>
	//addFreq(&q);
	//printAt(getFreq(&p), getPos(&p));
	//printAt(getFreq(&q), getPos(&q));
     57e:	ad 96       	adiw	r28, 0x2d	; 45
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <subFreq>:

#include "LCD.h"


void subFreq(pulse *p) {
	if (p->freq > 0) {
     590:	fc 01       	movw	r30, r24
     592:	24 81       	ldd	r18, Z+4	; 0x04
     594:	35 81       	ldd	r19, Z+5	; 0x05
     596:	12 16       	cp	r1, r18
     598:	13 06       	cpc	r1, r19
     59a:	24 f4       	brge	.+8      	; 0x5a4 <subFreq+0x14>
		p->freq--;
     59c:	21 50       	subi	r18, 0x01	; 1
     59e:	31 09       	sbc	r19, r1
     5a0:	35 83       	std	Z+5, r19	; 0x05
     5a2:	24 83       	std	Z+4, r18	; 0x04
     5a4:	08 95       	ret

000005a6 <addFreq>:
	}
}

void addFreq(pulse *p) {
	if (p->freq < 99) {
     5a6:	fc 01       	movw	r30, r24
     5a8:	24 81       	ldd	r18, Z+4	; 0x04
     5aa:	35 81       	ldd	r19, Z+5	; 0x05
     5ac:	23 36       	cpi	r18, 0x63	; 99
     5ae:	31 05       	cpc	r19, r1
     5b0:	24 f4       	brge	.+8      	; 0x5ba <addFreq+0x14>
		p->freq++;
     5b2:	2f 5f       	subi	r18, 0xFF	; 255
     5b4:	3f 4f       	sbci	r19, 0xFF	; 255
     5b6:	35 83       	std	Z+5, r19	; 0x05
     5b8:	24 83       	std	Z+4, r18	; 0x04
     5ba:	08 95       	ret

000005bc <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <initialize+0x6>
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <initialize+0x8>
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	85 e0       	ldi	r24, 0x05	; 5
     5ca:	92 e0       	ldi	r25, 0x02	; 2
     5cc:	25 ee       	ldi	r18, 0xE5	; 229
     5ce:	32 e0       	ldi	r19, 0x02	; 2
     5d0:	fc 01       	movw	r30, r24
     5d2:	70 97       	sbiw	r30, 0x10	; 16
     5d4:	91 83       	std	Z+1, r25	; 0x01
     5d6:	80 83       	st	Z, r24
     5d8:	40 96       	adiw	r24, 0x10	; 16
     5da:	82 17       	cp	r24, r18
     5dc:	93 07       	cpc	r25, r19
     5de:	c1 f7       	brne	.-16     	; 0x5d0 <initialize+0x14>
     5e0:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <messages+0xe1>
     5e4:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <messages+0xe0>
     5e8:	e0 e4       	ldi	r30, 0x40	; 64
     5ea:	f1 e0       	ldi	r31, 0x01	; 1
     5ec:	8d e5       	ldi	r24, 0x5D	; 93
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	91 83       	std	Z+1, r25	; 0x01
     5f2:	80 83       	st	Z, r24
     5f4:	8a e7       	ldi	r24, 0x7A	; 122
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	96 8f       	std	Z+30, r25	; 0x1e
     5fa:	85 8f       	std	Z+29, r24	; 0x1d
     5fc:	a7 e9       	ldi	r26, 0x97	; 151
     5fe:	b1 e0       	ldi	r27, 0x01	; 1
     600:	b3 af       	std	Z+59, r27	; 0x3b
     602:	a2 af       	std	Z+58, r26	; 0x3a
     604:	1d 92       	st	X+, r1
     606:	1c 92       	st	X, r1
     608:	fa 83       	std	Y+2, r31	; 0x02
     60a:	e9 83       	std	Y+1, r30	; 0x01
     60c:	e1 e4       	ldi	r30, 0x41	; 65
     60e:	f3 e0       	ldi	r31, 0x03	; 3
     610:	fc 83       	std	Y+4, r31	; 0x04
     612:	eb 83       	std	Y+3, r30	; 0x03
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	06 96       	adiw	r24, 0x06	; 6
     61a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <setjmp>
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	9c 81       	ldd	r25, Y+4	; 0x04
     622:	e9 81       	ldd	r30, Y+1	; 0x01
     624:	fa 81       	ldd	r31, Y+2	; 0x02
     626:	97 8b       	std	Z+23, r25	; 0x17
     628:	86 8b       	std	Z+22, r24	; 0x16
     62a:	91 8f       	std	Z+25, r25	; 0x19
     62c:	80 8f       	std	Z+24, r24	; 0x18
     62e:	81 e8       	ldi	r24, 0x81	; 129
     630:	9e e0       	ldi	r25, 0x0E	; 14
     632:	94 8f       	std	Z+28, r25	; 0x1c
     634:	83 8f       	std	Z+27, r24	; 0x1b
     636:	15 82       	std	Z+5, r1	; 0x05
     638:	14 82       	std	Z+4, r1	; 0x04
     63a:	7d 96       	adiw	r30, 0x1d	; 29
     63c:	fa 83       	std	Y+2, r31	; 0x02
     63e:	e9 83       	std	Y+1, r30	; 0x01
     640:	eb 81       	ldd	r30, Y+3	; 0x03
     642:	fc 81       	ldd	r31, Y+4	; 0x04
     644:	e0 5a       	subi	r30, 0xA0	; 160
     646:	ff 4f       	sbci	r31, 0xFF	; 255
     648:	fc 83       	std	Y+4, r31	; 0x04
     64a:	eb 83       	std	Y+3, r30	; 0x03
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	84 5b       	subi	r24, 0xB4	; 180
     652:	91 40       	sbci	r25, 0x01	; 1
     654:	f9 f6       	brne	.-66     	; 0x614 <initialize+0x58>
     656:	e8 ed       	ldi	r30, 0xD8	; 216
     658:	f1 e0       	ldi	r31, 0x01	; 1
     65a:	11 82       	std	Z+1, r1	; 0x01
     65c:	10 82       	st	Z, r1
     65e:	15 82       	std	Z+5, r1	; 0x05
     660:	14 82       	std	Z+4, r1	; 0x04
     662:	13 82       	std	Z+3, r1	; 0x03
     664:	12 82       	std	Z+2, r1	; 0x02
     666:	e1 e6       	ldi	r30, 0x61	; 97
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	80 83       	st	Z, r24
     66e:	10 82       	st	Z, r1
     670:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     674:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     678:	84 e0       	ldi	r24, 0x04	; 4
     67a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <dispatch>:
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	00 d0       	rcall	.+0      	; 0x698 <dispatch+0x6>
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	9a 83       	std	Y+2, r25	; 0x02
     69e:	89 83       	std	Y+1, r24	; 0x01
     6a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     6a8:	06 96       	adiw	r24, 0x06	; 6
     6aa:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <setjmp>
     6ae:	89 2b       	or	r24, r25
     6b0:	29 f0       	breq	.+10     	; 0x6bc <dispatch+0x2a>
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     6c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	06 96       	adiw	r24, 0x06	; 6
     6ce:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <longjmp>

000006d2 <schedule>:
     6d2:	0f 93       	push	r16
     6d4:	1f 93       	push	r17
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <msgQ>
     6de:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <msgQ+0x1>
     6e2:	30 97       	sbiw	r30, 0x00	; 0
     6e4:	f1 f0       	breq	.+60     	; 0x722 <schedule+0x50>
     6e6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     6ea:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     6ee:	00 97       	sbiw	r24, 0x00	; 0
     6f0:	c1 f0       	breq	.+48     	; 0x722 <schedule+0x50>
     6f2:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     6f6:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     6fa:	aa 81       	ldd	r26, Y+2	; 0x02
     6fc:	bb 81       	ldd	r27, Y+3	; 0x03
     6fe:	10 97       	sbiw	r26, 0x00	; 0
     700:	a9 f0       	breq	.+42     	; 0x72c <schedule+0x5a>
     702:	46 81       	ldd	r20, Z+6	; 0x06
     704:	57 81       	ldd	r21, Z+7	; 0x07
     706:	60 85       	ldd	r22, Z+8	; 0x08
     708:	71 85       	ldd	r23, Z+9	; 0x09
     70a:	16 96       	adiw	r26, 0x06	; 6
     70c:	0d 91       	ld	r16, X+
     70e:	1d 91       	ld	r17, X+
     710:	2d 91       	ld	r18, X+
     712:	3c 91       	ld	r19, X
     714:	19 97       	sbiw	r26, 0x09	; 9
     716:	40 1b       	sub	r20, r16
     718:	51 0b       	sbc	r21, r17
     71a:	62 0b       	sbc	r22, r18
     71c:	73 0b       	sbc	r23, r19
     71e:	77 fd       	sbrc	r23, 7
     720:	05 c0       	rjmp	.+10     	; 0x72c <schedule+0x5a>
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	08 95       	ret
     72c:	fc 01       	movw	r30, r24
     72e:	20 81       	ld	r18, Z
     730:	31 81       	ldd	r19, Z+1	; 0x01
     732:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     736:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     73a:	d1 83       	std	Z+1, r29	; 0x01
     73c:	c0 83       	st	Z, r28
     73e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     742:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	0c 94 49 03 	jmp	0x692	; 0x692 <dispatch>

00000752 <dequeue.part.0>:
     752:	8f ef       	ldi	r24, 0xFF	; 255
     754:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
     758:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
     75c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	83 bf       	out	0x33, r24	; 51
     764:	88 95       	sleep
     766:	fd cf       	rjmp	.-6      	; 0x762 <dequeue.part.0+0x10>

00000768 <__vector_1>:
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	2f 93       	push	r18
     774:	3f 93       	push	r19
     776:	4f 93       	push	r20
     778:	5f 93       	push	r21
     77a:	6f 93       	push	r22
     77c:	7f 93       	push	r23
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	af 93       	push	r26
     784:	bf 93       	push	r27
     786:	ef 93       	push	r30
     788:	ff 93       	push	r31
     78a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     78e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     792:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     796:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     79a:	c9 01       	movw	r24, r18
     79c:	03 2e       	mov	r0, r19
     79e:	00 0c       	add	r0, r0
     7a0:	aa 0b       	sbc	r26, r26
     7a2:	bb 0b       	sbc	r27, r27
     7a4:	dc 01       	movw	r26, r24
     7a6:	99 27       	eor	r25, r25
     7a8:	88 27       	eor	r24, r24
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	84 2b       	or	r24, r20
     7b0:	95 2b       	or	r25, r21
     7b2:	a6 2b       	or	r26, r22
     7b4:	b7 2b       	or	r27, r23
     7b6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     7ba:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     7be:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     7c2:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     7c6:	b0 9b       	sbis	0x16, 0	; 22
     7c8:	1b c0       	rjmp	.+54     	; 0x800 <__vector_1+0x98>
     7ca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7ce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7d2:	c9 01       	movw	r24, r18
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	09 2e       	mov	r0, r25
     7d8:	00 0c       	add	r0, r0
     7da:	aa 0b       	sbc	r26, r26
     7dc:	bb 0b       	sbc	r27, r27
     7de:	dc 01       	movw	r26, r24
     7e0:	99 27       	eor	r25, r25
     7e2:	88 27       	eor	r24, r24
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	84 2b       	or	r24, r20
     7ea:	95 2b       	or	r25, r21
     7ec:	a6 2b       	or	r26, r22
     7ee:	b7 2b       	or	r27, r23
     7f0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     7f4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     7f8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     7fc:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     800:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable>
     804:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0x1>
     808:	30 97       	sbiw	r30, 0x00	; 0
     80a:	39 f0       	breq	.+14     	; 0x81a <__vector_1+0xb2>
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable>
     814:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0x1>
     818:	09 95       	icall
     81a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	bf 91       	pop	r27
     824:	af 91       	pop	r26
     826:	9f 91       	pop	r25
     828:	8f 91       	pop	r24
     82a:	7f 91       	pop	r23
     82c:	6f 91       	pop	r22
     82e:	5f 91       	pop	r21
     830:	4f 91       	pop	r20
     832:	3f 91       	pop	r19
     834:	2f 91       	pop	r18
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <__vector_2>:
     840:	1f 92       	push	r1
     842:	0f 92       	push	r0
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	0f 92       	push	r0
     848:	11 24       	eor	r1, r1
     84a:	2f 93       	push	r18
     84c:	3f 93       	push	r19
     84e:	4f 93       	push	r20
     850:	5f 93       	push	r21
     852:	6f 93       	push	r22
     854:	7f 93       	push	r23
     856:	8f 93       	push	r24
     858:	9f 93       	push	r25
     85a:	af 93       	push	r26
     85c:	bf 93       	push	r27
     85e:	ef 93       	push	r30
     860:	ff 93       	push	r31
     862:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     866:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     86a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     86e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     872:	c9 01       	movw	r24, r18
     874:	03 2e       	mov	r0, r19
     876:	00 0c       	add	r0, r0
     878:	aa 0b       	sbc	r26, r26
     87a:	bb 0b       	sbc	r27, r27
     87c:	dc 01       	movw	r26, r24
     87e:	99 27       	eor	r25, r25
     880:	88 27       	eor	r24, r24
     882:	60 e0       	ldi	r22, 0x00	; 0
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	84 2b       	or	r24, r20
     888:	95 2b       	or	r25, r21
     88a:	a6 2b       	or	r26, r22
     88c:	b7 2b       	or	r27, r23
     88e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     892:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     896:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     89a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     89e:	b0 9b       	sbis	0x16, 0	; 22
     8a0:	1b c0       	rjmp	.+54     	; 0x8d8 <__vector_2+0x98>
     8a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8aa:	c9 01       	movw	r24, r18
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	09 2e       	mov	r0, r25
     8b0:	00 0c       	add	r0, r0
     8b2:	aa 0b       	sbc	r26, r26
     8b4:	bb 0b       	sbc	r27, r27
     8b6:	dc 01       	movw	r26, r24
     8b8:	99 27       	eor	r25, r25
     8ba:	88 27       	eor	r24, r24
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	84 2b       	or	r24, r20
     8c2:	95 2b       	or	r25, r21
     8c4:	a6 2b       	or	r26, r22
     8c6:	b7 2b       	or	r27, r23
     8c8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     8cc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     8d0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     8d4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     8d8:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0x2>
     8dc:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0x3>
     8e0:	30 97       	sbiw	r30, 0x00	; 0
     8e2:	39 f0       	breq	.+14     	; 0x8f2 <__vector_2+0xb2>
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0x2>
     8ec:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0x3>
     8f0:	09 95       	icall
     8f2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     8f6:	ff 91       	pop	r31
     8f8:	ef 91       	pop	r30
     8fa:	bf 91       	pop	r27
     8fc:	af 91       	pop	r26
     8fe:	9f 91       	pop	r25
     900:	8f 91       	pop	r24
     902:	7f 91       	pop	r23
     904:	6f 91       	pop	r22
     906:	5f 91       	pop	r21
     908:	4f 91       	pop	r20
     90a:	3f 91       	pop	r19
     90c:	2f 91       	pop	r18
     90e:	0f 90       	pop	r0
     910:	0f be       	out	0x3f, r0	; 63
     912:	0f 90       	pop	r0
     914:	1f 90       	pop	r1
     916:	18 95       	reti

00000918 <__vector_3>:
     918:	1f 92       	push	r1
     91a:	0f 92       	push	r0
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	0f 92       	push	r0
     920:	11 24       	eor	r1, r1
     922:	2f 93       	push	r18
     924:	3f 93       	push	r19
     926:	4f 93       	push	r20
     928:	5f 93       	push	r21
     92a:	6f 93       	push	r22
     92c:	7f 93       	push	r23
     92e:	8f 93       	push	r24
     930:	9f 93       	push	r25
     932:	af 93       	push	r26
     934:	bf 93       	push	r27
     936:	ef 93       	push	r30
     938:	ff 93       	push	r31
     93a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     93e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     942:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     946:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     94a:	c9 01       	movw	r24, r18
     94c:	03 2e       	mov	r0, r19
     94e:	00 0c       	add	r0, r0
     950:	aa 0b       	sbc	r26, r26
     952:	bb 0b       	sbc	r27, r27
     954:	dc 01       	movw	r26, r24
     956:	99 27       	eor	r25, r25
     958:	88 27       	eor	r24, r24
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	84 2b       	or	r24, r20
     960:	95 2b       	or	r25, r21
     962:	a6 2b       	or	r26, r22
     964:	b7 2b       	or	r27, r23
     966:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     96a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     96e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     972:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     976:	b0 9b       	sbis	0x16, 0	; 22
     978:	1b c0       	rjmp	.+54     	; 0x9b0 <__vector_3+0x98>
     97a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     97e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     982:	c9 01       	movw	r24, r18
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	09 2e       	mov	r0, r25
     988:	00 0c       	add	r0, r0
     98a:	aa 0b       	sbc	r26, r26
     98c:	bb 0b       	sbc	r27, r27
     98e:	dc 01       	movw	r26, r24
     990:	99 27       	eor	r25, r25
     992:	88 27       	eor	r24, r24
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	84 2b       	or	r24, r20
     99a:	95 2b       	or	r25, r21
     99c:	a6 2b       	or	r26, r22
     99e:	b7 2b       	or	r27, r23
     9a0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     9a4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     9a8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     9ac:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     9b0:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x4>
     9b4:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x5>
     9b8:	30 97       	sbiw	r30, 0x00	; 0
     9ba:	39 f0       	breq	.+14     	; 0x9ca <__vector_3+0xb2>
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x4>
     9c4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x5>
     9c8:	09 95       	icall
     9ca:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     9ce:	ff 91       	pop	r31
     9d0:	ef 91       	pop	r30
     9d2:	bf 91       	pop	r27
     9d4:	af 91       	pop	r26
     9d6:	9f 91       	pop	r25
     9d8:	8f 91       	pop	r24
     9da:	7f 91       	pop	r23
     9dc:	6f 91       	pop	r22
     9de:	5f 91       	pop	r21
     9e0:	4f 91       	pop	r20
     9e2:	3f 91       	pop	r19
     9e4:	2f 91       	pop	r18
     9e6:	0f 90       	pop	r0
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	0f 90       	pop	r0
     9ec:	1f 90       	pop	r1
     9ee:	18 95       	reti

000009f0 <__vector_4>:
     9f0:	1f 92       	push	r1
     9f2:	0f 92       	push	r0
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	0f 92       	push	r0
     9f8:	11 24       	eor	r1, r1
     9fa:	2f 93       	push	r18
     9fc:	3f 93       	push	r19
     9fe:	4f 93       	push	r20
     a00:	5f 93       	push	r21
     a02:	6f 93       	push	r22
     a04:	7f 93       	push	r23
     a06:	8f 93       	push	r24
     a08:	9f 93       	push	r25
     a0a:	af 93       	push	r26
     a0c:	bf 93       	push	r27
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
     a12:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     a16:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     a1a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a1e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a22:	c9 01       	movw	r24, r18
     a24:	03 2e       	mov	r0, r19
     a26:	00 0c       	add	r0, r0
     a28:	aa 0b       	sbc	r26, r26
     a2a:	bb 0b       	sbc	r27, r27
     a2c:	dc 01       	movw	r26, r24
     a2e:	99 27       	eor	r25, r25
     a30:	88 27       	eor	r24, r24
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	84 2b       	or	r24, r20
     a38:	95 2b       	or	r25, r21
     a3a:	a6 2b       	or	r26, r22
     a3c:	b7 2b       	or	r27, r23
     a3e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     a42:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     a46:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     a4a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     a4e:	b0 9b       	sbis	0x16, 0	; 22
     a50:	1b c0       	rjmp	.+54     	; 0xa88 <__vector_4+0x98>
     a52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a5a:	c9 01       	movw	r24, r18
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	09 2e       	mov	r0, r25
     a60:	00 0c       	add	r0, r0
     a62:	aa 0b       	sbc	r26, r26
     a64:	bb 0b       	sbc	r27, r27
     a66:	dc 01       	movw	r26, r24
     a68:	99 27       	eor	r25, r25
     a6a:	88 27       	eor	r24, r24
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	84 2b       	or	r24, r20
     a72:	95 2b       	or	r25, r21
     a74:	a6 2b       	or	r26, r22
     a76:	b7 2b       	or	r27, r23
     a78:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     a7c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     a80:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     a84:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     a88:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x6>
     a8c:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x7>
     a90:	30 97       	sbiw	r30, 0x00	; 0
     a92:	39 f0       	breq	.+14     	; 0xaa2 <__vector_4+0xb2>
     a94:	63 e0       	ldi	r22, 0x03	; 3
     a96:	70 e0       	ldi	r23, 0x00	; 0
     a98:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x6>
     a9c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x7>
     aa0:	09 95       	icall
     aa2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	0f 90       	pop	r0
     ac4:	1f 90       	pop	r1
     ac6:	18 95       	reti

00000ac8 <__vector_5>:
     ac8:	1f 92       	push	r1
     aca:	0f 92       	push	r0
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	ef 93       	push	r30
     ae8:	ff 93       	push	r31
     aea:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     aee:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     af2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     af6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     afa:	c9 01       	movw	r24, r18
     afc:	03 2e       	mov	r0, r19
     afe:	00 0c       	add	r0, r0
     b00:	aa 0b       	sbc	r26, r26
     b02:	bb 0b       	sbc	r27, r27
     b04:	dc 01       	movw	r26, r24
     b06:	99 27       	eor	r25, r25
     b08:	88 27       	eor	r24, r24
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	84 2b       	or	r24, r20
     b10:	95 2b       	or	r25, r21
     b12:	a6 2b       	or	r26, r22
     b14:	b7 2b       	or	r27, r23
     b16:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     b1a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     b1e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     b22:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     b26:	b0 9b       	sbis	0x16, 0	; 22
     b28:	1b c0       	rjmp	.+54     	; 0xb60 <__vector_5+0x98>
     b2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b32:	c9 01       	movw	r24, r18
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	09 2e       	mov	r0, r25
     b38:	00 0c       	add	r0, r0
     b3a:	aa 0b       	sbc	r26, r26
     b3c:	bb 0b       	sbc	r27, r27
     b3e:	dc 01       	movw	r26, r24
     b40:	99 27       	eor	r25, r25
     b42:	88 27       	eor	r24, r24
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	84 2b       	or	r24, r20
     b4a:	95 2b       	or	r25, r21
     b4c:	a6 2b       	or	r26, r22
     b4e:	b7 2b       	or	r27, r23
     b50:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     b54:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     b58:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     b5c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     b60:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x8>
     b64:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x9>
     b68:	30 97       	sbiw	r30, 0x00	; 0
     b6a:	39 f0       	breq	.+14     	; 0xb7a <__vector_5+0xb2>
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x8>
     b74:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x9>
     b78:	09 95       	icall
     b7a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	bf 91       	pop	r27
     b84:	af 91       	pop	r26
     b86:	9f 91       	pop	r25
     b88:	8f 91       	pop	r24
     b8a:	7f 91       	pop	r23
     b8c:	6f 91       	pop	r22
     b8e:	5f 91       	pop	r21
     b90:	4f 91       	pop	r20
     b92:	3f 91       	pop	r19
     b94:	2f 91       	pop	r18
     b96:	0f 90       	pop	r0
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	0f 90       	pop	r0
     b9c:	1f 90       	pop	r1
     b9e:	18 95       	reti

00000ba0 <__vector_10>:
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
     bc2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     bc6:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     bca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bce:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bd2:	c9 01       	movw	r24, r18
     bd4:	03 2e       	mov	r0, r19
     bd6:	00 0c       	add	r0, r0
     bd8:	aa 0b       	sbc	r26, r26
     bda:	bb 0b       	sbc	r27, r27
     bdc:	dc 01       	movw	r26, r24
     bde:	99 27       	eor	r25, r25
     be0:	88 27       	eor	r24, r24
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	84 2b       	or	r24, r20
     be8:	95 2b       	or	r25, r21
     bea:	a6 2b       	or	r26, r22
     bec:	b7 2b       	or	r27, r23
     bee:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     bf2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     bf6:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     bfa:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     bfe:	b0 9b       	sbis	0x16, 0	; 22
     c00:	1b c0       	rjmp	.+54     	; 0xc38 <__vector_10+0x98>
     c02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c0a:	c9 01       	movw	r24, r18
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	09 2e       	mov	r0, r25
     c10:	00 0c       	add	r0, r0
     c12:	aa 0b       	sbc	r26, r26
     c14:	bb 0b       	sbc	r27, r27
     c16:	dc 01       	movw	r26, r24
     c18:	99 27       	eor	r25, r25
     c1a:	88 27       	eor	r24, r24
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	84 2b       	or	r24, r20
     c22:	95 2b       	or	r25, r21
     c24:	a6 2b       	or	r26, r22
     c26:	b7 2b       	or	r27, r23
     c28:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     c2c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     c30:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     c34:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     c38:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0xa>
     c3c:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0xb>
     c40:	30 97       	sbiw	r30, 0x00	; 0
     c42:	39 f0       	breq	.+14     	; 0xc52 <__vector_10+0xb2>
     c44:	65 e0       	ldi	r22, 0x05	; 5
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0xa>
     c4c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0xb>
     c50:	09 95       	icall
     c52:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_11>:
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
     c9a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     c9e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     ca2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ca6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     caa:	c9 01       	movw	r24, r18
     cac:	03 2e       	mov	r0, r19
     cae:	00 0c       	add	r0, r0
     cb0:	aa 0b       	sbc	r26, r26
     cb2:	bb 0b       	sbc	r27, r27
     cb4:	dc 01       	movw	r26, r24
     cb6:	99 27       	eor	r25, r25
     cb8:	88 27       	eor	r24, r24
     cba:	60 e0       	ldi	r22, 0x00	; 0
     cbc:	70 e0       	ldi	r23, 0x00	; 0
     cbe:	84 2b       	or	r24, r20
     cc0:	95 2b       	or	r25, r21
     cc2:	a6 2b       	or	r26, r22
     cc4:	b7 2b       	or	r27, r23
     cc6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     cca:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     cce:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     cd2:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     cd6:	b0 9b       	sbis	0x16, 0	; 22
     cd8:	1b c0       	rjmp	.+54     	; 0xd10 <__vector_11+0x98>
     cda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ce2:	c9 01       	movw	r24, r18
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	09 2e       	mov	r0, r25
     ce8:	00 0c       	add	r0, r0
     cea:	aa 0b       	sbc	r26, r26
     cec:	bb 0b       	sbc	r27, r27
     cee:	dc 01       	movw	r26, r24
     cf0:	99 27       	eor	r25, r25
     cf2:	88 27       	eor	r24, r24
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	84 2b       	or	r24, r20
     cfa:	95 2b       	or	r25, r21
     cfc:	a6 2b       	or	r26, r22
     cfe:	b7 2b       	or	r27, r23
     d00:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     d04:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     d08:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     d0c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     d10:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0xc>
     d14:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0xd>
     d18:	30 97       	sbiw	r30, 0x00	; 0
     d1a:	39 f0       	breq	.+14     	; 0xd2a <__vector_11+0xb2>
     d1c:	66 e0       	ldi	r22, 0x06	; 6
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0xc>
     d24:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0xd>
     d28:	09 95       	icall
     d2a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <__vector_12>:
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	2f 93       	push	r18
     d5c:	3f 93       	push	r19
     d5e:	4f 93       	push	r20
     d60:	5f 93       	push	r21
     d62:	6f 93       	push	r22
     d64:	7f 93       	push	r23
     d66:	8f 93       	push	r24
     d68:	9f 93       	push	r25
     d6a:	af 93       	push	r26
     d6c:	bf 93       	push	r27
     d6e:	ef 93       	push	r30
     d70:	ff 93       	push	r31
     d72:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     d76:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     d7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d82:	c9 01       	movw	r24, r18
     d84:	03 2e       	mov	r0, r19
     d86:	00 0c       	add	r0, r0
     d88:	aa 0b       	sbc	r26, r26
     d8a:	bb 0b       	sbc	r27, r27
     d8c:	dc 01       	movw	r26, r24
     d8e:	99 27       	eor	r25, r25
     d90:	88 27       	eor	r24, r24
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	84 2b       	or	r24, r20
     d98:	95 2b       	or	r25, r21
     d9a:	a6 2b       	or	r26, r22
     d9c:	b7 2b       	or	r27, r23
     d9e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     da2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     da6:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     daa:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     dae:	b0 9b       	sbis	0x16, 0	; 22
     db0:	1b c0       	rjmp	.+54     	; 0xde8 <__vector_12+0x98>
     db2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     db6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dba:	c9 01       	movw	r24, r18
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	09 2e       	mov	r0, r25
     dc0:	00 0c       	add	r0, r0
     dc2:	aa 0b       	sbc	r26, r26
     dc4:	bb 0b       	sbc	r27, r27
     dc6:	dc 01       	movw	r26, r24
     dc8:	99 27       	eor	r25, r25
     dca:	88 27       	eor	r24, r24
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	84 2b       	or	r24, r20
     dd2:	95 2b       	or	r25, r21
     dd4:	a6 2b       	or	r26, r22
     dd6:	b7 2b       	or	r27, r23
     dd8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     ddc:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     de0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     de4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     de8:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0xe>
     dec:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0xf>
     df0:	30 97       	sbiw	r30, 0x00	; 0
     df2:	39 f0       	breq	.+14     	; 0xe02 <__vector_12+0xb2>
     df4:	67 e0       	ldi	r22, 0x07	; 7
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0xe>
     dfc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0xf>
     e00:	09 95       	icall
     e02:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     e06:	ff 91       	pop	r31
     e08:	ef 91       	pop	r30
     e0a:	bf 91       	pop	r27
     e0c:	af 91       	pop	r26
     e0e:	9f 91       	pop	r25
     e10:	8f 91       	pop	r24
     e12:	7f 91       	pop	r23
     e14:	6f 91       	pop	r22
     e16:	5f 91       	pop	r21
     e18:	4f 91       	pop	r20
     e1a:	3f 91       	pop	r19
     e1c:	2f 91       	pop	r18
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_13>:
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	2f 93       	push	r18
     e34:	3f 93       	push	r19
     e36:	4f 93       	push	r20
     e38:	5f 93       	push	r21
     e3a:	6f 93       	push	r22
     e3c:	7f 93       	push	r23
     e3e:	8f 93       	push	r24
     e40:	9f 93       	push	r25
     e42:	af 93       	push	r26
     e44:	bf 93       	push	r27
     e46:	ef 93       	push	r30
     e48:	ff 93       	push	r31
     e4a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     e4e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     e52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e5a:	c9 01       	movw	r24, r18
     e5c:	03 2e       	mov	r0, r19
     e5e:	00 0c       	add	r0, r0
     e60:	aa 0b       	sbc	r26, r26
     e62:	bb 0b       	sbc	r27, r27
     e64:	dc 01       	movw	r26, r24
     e66:	99 27       	eor	r25, r25
     e68:	88 27       	eor	r24, r24
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	84 2b       	or	r24, r20
     e70:	95 2b       	or	r25, r21
     e72:	a6 2b       	or	r26, r22
     e74:	b7 2b       	or	r27, r23
     e76:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     e7a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     e7e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     e82:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     e86:	b0 9b       	sbis	0x16, 0	; 22
     e88:	1b c0       	rjmp	.+54     	; 0xec0 <__vector_13+0x98>
     e8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e92:	c9 01       	movw	r24, r18
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	09 2e       	mov	r0, r25
     e98:	00 0c       	add	r0, r0
     e9a:	aa 0b       	sbc	r26, r26
     e9c:	bb 0b       	sbc	r27, r27
     e9e:	dc 01       	movw	r26, r24
     ea0:	99 27       	eor	r25, r25
     ea2:	88 27       	eor	r24, r24
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	84 2b       	or	r24, r20
     eaa:	95 2b       	or	r25, r21
     eac:	a6 2b       	or	r26, r22
     eae:	b7 2b       	or	r27, r23
     eb0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     eb4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     eb8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     ebc:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     ec0:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x10>
     ec4:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x11>
     ec8:	30 97       	sbiw	r30, 0x00	; 0
     eca:	39 f0       	breq	.+14     	; 0xeda <__vector_13+0xb2>
     ecc:	68 e0       	ldi	r22, 0x08	; 8
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x10>
     ed4:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x11>
     ed8:	09 95       	icall
     eda:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     ede:	ff 91       	pop	r31
     ee0:	ef 91       	pop	r30
     ee2:	bf 91       	pop	r27
     ee4:	af 91       	pop	r26
     ee6:	9f 91       	pop	r25
     ee8:	8f 91       	pop	r24
     eea:	7f 91       	pop	r23
     eec:	6f 91       	pop	r22
     eee:	5f 91       	pop	r21
     ef0:	4f 91       	pop	r20
     ef2:	3f 91       	pop	r19
     ef4:	2f 91       	pop	r18
     ef6:	0f 90       	pop	r0
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	0f 90       	pop	r0
     efc:	1f 90       	pop	r1
     efe:	18 95       	reti

00000f00 <__vector_14>:
     f00:	1f 92       	push	r1
     f02:	0f 92       	push	r0
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	0f 92       	push	r0
     f08:	11 24       	eor	r1, r1
     f0a:	2f 93       	push	r18
     f0c:	3f 93       	push	r19
     f0e:	4f 93       	push	r20
     f10:	5f 93       	push	r21
     f12:	6f 93       	push	r22
     f14:	7f 93       	push	r23
     f16:	8f 93       	push	r24
     f18:	9f 93       	push	r25
     f1a:	af 93       	push	r26
     f1c:	bf 93       	push	r27
     f1e:	ef 93       	push	r30
     f20:	ff 93       	push	r31
     f22:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     f26:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
     f2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f32:	c9 01       	movw	r24, r18
     f34:	03 2e       	mov	r0, r19
     f36:	00 0c       	add	r0, r0
     f38:	aa 0b       	sbc	r26, r26
     f3a:	bb 0b       	sbc	r27, r27
     f3c:	dc 01       	movw	r26, r24
     f3e:	99 27       	eor	r25, r25
     f40:	88 27       	eor	r24, r24
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	84 2b       	or	r24, r20
     f48:	95 2b       	or	r25, r21
     f4a:	a6 2b       	or	r26, r22
     f4c:	b7 2b       	or	r27, r23
     f4e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     f52:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     f56:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     f5a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     f5e:	b0 9b       	sbis	0x16, 0	; 22
     f60:	1b c0       	rjmp	.+54     	; 0xf98 <__vector_14+0x98>
     f62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f6a:	c9 01       	movw	r24, r18
     f6c:	01 96       	adiw	r24, 0x01	; 1
     f6e:	09 2e       	mov	r0, r25
     f70:	00 0c       	add	r0, r0
     f72:	aa 0b       	sbc	r26, r26
     f74:	bb 0b       	sbc	r27, r27
     f76:	dc 01       	movw	r26, r24
     f78:	99 27       	eor	r25, r25
     f7a:	88 27       	eor	r24, r24
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	84 2b       	or	r24, r20
     f82:	95 2b       	or	r25, r21
     f84:	a6 2b       	or	r26, r22
     f86:	b7 2b       	or	r27, r23
     f88:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
     f8c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
     f90:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
     f94:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
     f98:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x12>
     f9c:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x13>
     fa0:	30 97       	sbiw	r30, 0x00	; 0
     fa2:	39 f0       	breq	.+14     	; 0xfb2 <__vector_14+0xb2>
     fa4:	69 e0       	ldi	r22, 0x09	; 9
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x12>
     fac:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x13>
     fb0:	09 95       	icall
     fb2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
     fb6:	ff 91       	pop	r31
     fb8:	ef 91       	pop	r30
     fba:	bf 91       	pop	r27
     fbc:	af 91       	pop	r26
     fbe:	9f 91       	pop	r25
     fc0:	8f 91       	pop	r24
     fc2:	7f 91       	pop	r23
     fc4:	6f 91       	pop	r22
     fc6:	5f 91       	pop	r21
     fc8:	4f 91       	pop	r20
     fca:	3f 91       	pop	r19
     fcc:	2f 91       	pop	r18
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_15>:
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	2f 93       	push	r18
     fe4:	3f 93       	push	r19
     fe6:	4f 93       	push	r20
     fe8:	5f 93       	push	r21
     fea:	6f 93       	push	r22
     fec:	7f 93       	push	r23
     fee:	8f 93       	push	r24
     ff0:	9f 93       	push	r25
     ff2:	af 93       	push	r26
     ff4:	bf 93       	push	r27
     ff6:	ef 93       	push	r30
     ff8:	ff 93       	push	r31
     ffa:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
     ffe:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    1002:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1006:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    100a:	c9 01       	movw	r24, r18
    100c:	03 2e       	mov	r0, r19
    100e:	00 0c       	add	r0, r0
    1010:	aa 0b       	sbc	r26, r26
    1012:	bb 0b       	sbc	r27, r27
    1014:	dc 01       	movw	r26, r24
    1016:	99 27       	eor	r25, r25
    1018:	88 27       	eor	r24, r24
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	84 2b       	or	r24, r20
    1020:	95 2b       	or	r25, r21
    1022:	a6 2b       	or	r26, r22
    1024:	b7 2b       	or	r27, r23
    1026:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    102a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    102e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1032:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1036:	b0 9b       	sbis	0x16, 0	; 22
    1038:	1b c0       	rjmp	.+54     	; 0x1070 <__vector_15+0x98>
    103a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    103e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1042:	c9 01       	movw	r24, r18
    1044:	01 96       	adiw	r24, 0x01	; 1
    1046:	09 2e       	mov	r0, r25
    1048:	00 0c       	add	r0, r0
    104a:	aa 0b       	sbc	r26, r26
    104c:	bb 0b       	sbc	r27, r27
    104e:	dc 01       	movw	r26, r24
    1050:	99 27       	eor	r25, r25
    1052:	88 27       	eor	r24, r24
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	84 2b       	or	r24, r20
    105a:	95 2b       	or	r25, r21
    105c:	a6 2b       	or	r26, r22
    105e:	b7 2b       	or	r27, r23
    1060:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1064:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1068:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    106c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1070:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x14>
    1074:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x15>
    1078:	30 97       	sbiw	r30, 0x00	; 0
    107a:	39 f0       	breq	.+14     	; 0x108a <__vector_15+0xb2>
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x14>
    1084:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x15>
    1088:	09 95       	icall
    108a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    108e:	ff 91       	pop	r31
    1090:	ef 91       	pop	r30
    1092:	bf 91       	pop	r27
    1094:	af 91       	pop	r26
    1096:	9f 91       	pop	r25
    1098:	8f 91       	pop	r24
    109a:	7f 91       	pop	r23
    109c:	6f 91       	pop	r22
    109e:	5f 91       	pop	r21
    10a0:	4f 91       	pop	r20
    10a2:	3f 91       	pop	r19
    10a4:	2f 91       	pop	r18
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	0f 90       	pop	r0
    10ac:	1f 90       	pop	r1
    10ae:	18 95       	reti

000010b0 <__vector_16>:
    10b0:	1f 92       	push	r1
    10b2:	0f 92       	push	r0
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	0f 92       	push	r0
    10b8:	11 24       	eor	r1, r1
    10ba:	2f 93       	push	r18
    10bc:	3f 93       	push	r19
    10be:	4f 93       	push	r20
    10c0:	5f 93       	push	r21
    10c2:	6f 93       	push	r22
    10c4:	7f 93       	push	r23
    10c6:	8f 93       	push	r24
    10c8:	9f 93       	push	r25
    10ca:	af 93       	push	r26
    10cc:	bf 93       	push	r27
    10ce:	ef 93       	push	r30
    10d0:	ff 93       	push	r31
    10d2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    10d6:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    10da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10e2:	c9 01       	movw	r24, r18
    10e4:	03 2e       	mov	r0, r19
    10e6:	00 0c       	add	r0, r0
    10e8:	aa 0b       	sbc	r26, r26
    10ea:	bb 0b       	sbc	r27, r27
    10ec:	dc 01       	movw	r26, r24
    10ee:	99 27       	eor	r25, r25
    10f0:	88 27       	eor	r24, r24
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	84 2b       	or	r24, r20
    10f8:	95 2b       	or	r25, r21
    10fa:	a6 2b       	or	r26, r22
    10fc:	b7 2b       	or	r27, r23
    10fe:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1102:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1106:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    110a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    110e:	b0 9b       	sbis	0x16, 0	; 22
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <__vector_16+0x98>
    1112:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1116:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    111a:	c9 01       	movw	r24, r18
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	09 2e       	mov	r0, r25
    1120:	00 0c       	add	r0, r0
    1122:	aa 0b       	sbc	r26, r26
    1124:	bb 0b       	sbc	r27, r27
    1126:	dc 01       	movw	r26, r24
    1128:	99 27       	eor	r25, r25
    112a:	88 27       	eor	r24, r24
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	84 2b       	or	r24, r20
    1132:	95 2b       	or	r25, r21
    1134:	a6 2b       	or	r26, r22
    1136:	b7 2b       	or	r27, r23
    1138:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    113c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1140:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1144:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1148:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x16>
    114c:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x17>
    1150:	30 97       	sbiw	r30, 0x00	; 0
    1152:	39 f0       	breq	.+14     	; 0x1162 <__vector_16+0xb2>
    1154:	6b e0       	ldi	r22, 0x0B	; 11
    1156:	70 e0       	ldi	r23, 0x00	; 0
    1158:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x16>
    115c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x17>
    1160:	09 95       	icall
    1162:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    1166:	ff 91       	pop	r31
    1168:	ef 91       	pop	r30
    116a:	bf 91       	pop	r27
    116c:	af 91       	pop	r26
    116e:	9f 91       	pop	r25
    1170:	8f 91       	pop	r24
    1172:	7f 91       	pop	r23
    1174:	6f 91       	pop	r22
    1176:	5f 91       	pop	r21
    1178:	4f 91       	pop	r20
    117a:	3f 91       	pop	r19
    117c:	2f 91       	pop	r18
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_17>:
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	2f 93       	push	r18
    1194:	3f 93       	push	r19
    1196:	4f 93       	push	r20
    1198:	5f 93       	push	r21
    119a:	6f 93       	push	r22
    119c:	7f 93       	push	r23
    119e:	8f 93       	push	r24
    11a0:	9f 93       	push	r25
    11a2:	af 93       	push	r26
    11a4:	bf 93       	push	r27
    11a6:	ef 93       	push	r30
    11a8:	ff 93       	push	r31
    11aa:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    11ae:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    11b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11ba:	c9 01       	movw	r24, r18
    11bc:	03 2e       	mov	r0, r19
    11be:	00 0c       	add	r0, r0
    11c0:	aa 0b       	sbc	r26, r26
    11c2:	bb 0b       	sbc	r27, r27
    11c4:	dc 01       	movw	r26, r24
    11c6:	99 27       	eor	r25, r25
    11c8:	88 27       	eor	r24, r24
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	84 2b       	or	r24, r20
    11d0:	95 2b       	or	r25, r21
    11d2:	a6 2b       	or	r26, r22
    11d4:	b7 2b       	or	r27, r23
    11d6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    11da:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    11de:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    11e2:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    11e6:	b0 9b       	sbis	0x16, 0	; 22
    11e8:	1b c0       	rjmp	.+54     	; 0x1220 <__vector_17+0x98>
    11ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11f2:	c9 01       	movw	r24, r18
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	09 2e       	mov	r0, r25
    11f8:	00 0c       	add	r0, r0
    11fa:	aa 0b       	sbc	r26, r26
    11fc:	bb 0b       	sbc	r27, r27
    11fe:	dc 01       	movw	r26, r24
    1200:	99 27       	eor	r25, r25
    1202:	88 27       	eor	r24, r24
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	84 2b       	or	r24, r20
    120a:	95 2b       	or	r25, r21
    120c:	a6 2b       	or	r26, r22
    120e:	b7 2b       	or	r27, r23
    1210:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1214:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1218:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    121c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1220:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x18>
    1224:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x19>
    1228:	30 97       	sbiw	r30, 0x00	; 0
    122a:	39 f0       	breq	.+14     	; 0x123a <__vector_17+0xb2>
    122c:	6c e0       	ldi	r22, 0x0C	; 12
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x18>
    1234:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x19>
    1238:	09 95       	icall
    123a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    123e:	ff 91       	pop	r31
    1240:	ef 91       	pop	r30
    1242:	bf 91       	pop	r27
    1244:	af 91       	pop	r26
    1246:	9f 91       	pop	r25
    1248:	8f 91       	pop	r24
    124a:	7f 91       	pop	r23
    124c:	6f 91       	pop	r22
    124e:	5f 91       	pop	r21
    1250:	4f 91       	pop	r20
    1252:	3f 91       	pop	r19
    1254:	2f 91       	pop	r18
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <__vector_18>:
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    1286:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    128a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    128e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1292:	c9 01       	movw	r24, r18
    1294:	03 2e       	mov	r0, r19
    1296:	00 0c       	add	r0, r0
    1298:	aa 0b       	sbc	r26, r26
    129a:	bb 0b       	sbc	r27, r27
    129c:	dc 01       	movw	r26, r24
    129e:	99 27       	eor	r25, r25
    12a0:	88 27       	eor	r24, r24
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	70 e0       	ldi	r23, 0x00	; 0
    12a6:	84 2b       	or	r24, r20
    12a8:	95 2b       	or	r25, r21
    12aa:	a6 2b       	or	r26, r22
    12ac:	b7 2b       	or	r27, r23
    12ae:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    12b2:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    12b6:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    12ba:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    12be:	b0 9b       	sbis	0x16, 0	; 22
    12c0:	1b c0       	rjmp	.+54     	; 0x12f8 <__vector_18+0x98>
    12c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12ca:	c9 01       	movw	r24, r18
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	09 2e       	mov	r0, r25
    12d0:	00 0c       	add	r0, r0
    12d2:	aa 0b       	sbc	r26, r26
    12d4:	bb 0b       	sbc	r27, r27
    12d6:	dc 01       	movw	r26, r24
    12d8:	99 27       	eor	r25, r25
    12da:	88 27       	eor	r24, r24
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	84 2b       	or	r24, r20
    12e2:	95 2b       	or	r25, r21
    12e4:	a6 2b       	or	r26, r22
    12e6:	b7 2b       	or	r27, r23
    12e8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    12ec:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    12f0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    12f4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    12f8:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x1a>
    12fc:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x1b>
    1300:	30 97       	sbiw	r30, 0x00	; 0
    1302:	39 f0       	breq	.+14     	; 0x1312 <__vector_18+0xb2>
    1304:	6d e0       	ldi	r22, 0x0D	; 13
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x1a>
    130c:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x1b>
    1310:	09 95       	icall
    1312:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	1f 90       	pop	r1
    1336:	18 95       	reti

00001338 <__vector_19>:
    1338:	1f 92       	push	r1
    133a:	0f 92       	push	r0
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	0f 92       	push	r0
    1340:	11 24       	eor	r1, r1
    1342:	2f 93       	push	r18
    1344:	3f 93       	push	r19
    1346:	4f 93       	push	r20
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
    135a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    135e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    1362:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1366:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    136a:	c9 01       	movw	r24, r18
    136c:	03 2e       	mov	r0, r19
    136e:	00 0c       	add	r0, r0
    1370:	aa 0b       	sbc	r26, r26
    1372:	bb 0b       	sbc	r27, r27
    1374:	dc 01       	movw	r26, r24
    1376:	99 27       	eor	r25, r25
    1378:	88 27       	eor	r24, r24
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	84 2b       	or	r24, r20
    1380:	95 2b       	or	r25, r21
    1382:	a6 2b       	or	r26, r22
    1384:	b7 2b       	or	r27, r23
    1386:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    138a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    138e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1392:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1396:	b0 9b       	sbis	0x16, 0	; 22
    1398:	1b c0       	rjmp	.+54     	; 0x13d0 <__vector_19+0x98>
    139a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    139e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13a2:	c9 01       	movw	r24, r18
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	09 2e       	mov	r0, r25
    13a8:	00 0c       	add	r0, r0
    13aa:	aa 0b       	sbc	r26, r26
    13ac:	bb 0b       	sbc	r27, r27
    13ae:	dc 01       	movw	r26, r24
    13b0:	99 27       	eor	r25, r25
    13b2:	88 27       	eor	r24, r24
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	84 2b       	or	r24, r20
    13ba:	95 2b       	or	r25, r21
    13bc:	a6 2b       	or	r26, r22
    13be:	b7 2b       	or	r27, r23
    13c0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    13c4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    13c8:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    13cc:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    13d0:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x1c>
    13d4:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x1d>
    13d8:	30 97       	sbiw	r30, 0x00	; 0
    13da:	39 f0       	breq	.+14     	; 0x13ea <__vector_19+0xb2>
    13dc:	6e e0       	ldi	r22, 0x0E	; 14
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x1c>
    13e4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x1d>
    13e8:	09 95       	icall
    13ea:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    13ee:	ff 91       	pop	r31
    13f0:	ef 91       	pop	r30
    13f2:	bf 91       	pop	r27
    13f4:	af 91       	pop	r26
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	7f 91       	pop	r23
    13fc:	6f 91       	pop	r22
    13fe:	5f 91       	pop	r21
    1400:	4f 91       	pop	r20
    1402:	3f 91       	pop	r19
    1404:	2f 91       	pop	r18
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <__vector_20>:
    1410:	1f 92       	push	r1
    1412:	0f 92       	push	r0
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	0f 92       	push	r0
    1418:	11 24       	eor	r1, r1
    141a:	2f 93       	push	r18
    141c:	3f 93       	push	r19
    141e:	4f 93       	push	r20
    1420:	5f 93       	push	r21
    1422:	6f 93       	push	r22
    1424:	7f 93       	push	r23
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	af 93       	push	r26
    142c:	bf 93       	push	r27
    142e:	ef 93       	push	r30
    1430:	ff 93       	push	r31
    1432:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    1436:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    143a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    143e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1442:	c9 01       	movw	r24, r18
    1444:	03 2e       	mov	r0, r19
    1446:	00 0c       	add	r0, r0
    1448:	aa 0b       	sbc	r26, r26
    144a:	bb 0b       	sbc	r27, r27
    144c:	dc 01       	movw	r26, r24
    144e:	99 27       	eor	r25, r25
    1450:	88 27       	eor	r24, r24
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	84 2b       	or	r24, r20
    1458:	95 2b       	or	r25, r21
    145a:	a6 2b       	or	r26, r22
    145c:	b7 2b       	or	r27, r23
    145e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1462:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1466:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    146a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    146e:	b0 9b       	sbis	0x16, 0	; 22
    1470:	1b c0       	rjmp	.+54     	; 0x14a8 <__vector_20+0x98>
    1472:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1476:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    147a:	c9 01       	movw	r24, r18
    147c:	01 96       	adiw	r24, 0x01	; 1
    147e:	09 2e       	mov	r0, r25
    1480:	00 0c       	add	r0, r0
    1482:	aa 0b       	sbc	r26, r26
    1484:	bb 0b       	sbc	r27, r27
    1486:	dc 01       	movw	r26, r24
    1488:	99 27       	eor	r25, r25
    148a:	88 27       	eor	r24, r24
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	84 2b       	or	r24, r20
    1492:	95 2b       	or	r25, r21
    1494:	a6 2b       	or	r26, r22
    1496:	b7 2b       	or	r27, r23
    1498:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    149c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    14a0:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    14a4:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    14a8:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x1e>
    14ac:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x1f>
    14b0:	30 97       	sbiw	r30, 0x00	; 0
    14b2:	39 f0       	breq	.+14     	; 0x14c2 <__vector_20+0xb2>
    14b4:	6f e0       	ldi	r22, 0x0F	; 15
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x1e>
    14bc:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x1f>
    14c0:	09 95       	icall
    14c2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    14c6:	ff 91       	pop	r31
    14c8:	ef 91       	pop	r30
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_21>:
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	2f 93       	push	r18
    14f4:	3f 93       	push	r19
    14f6:	4f 93       	push	r20
    14f8:	5f 93       	push	r21
    14fa:	6f 93       	push	r22
    14fc:	7f 93       	push	r23
    14fe:	8f 93       	push	r24
    1500:	9f 93       	push	r25
    1502:	af 93       	push	r26
    1504:	bf 93       	push	r27
    1506:	ef 93       	push	r30
    1508:	ff 93       	push	r31
    150a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    150e:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    1512:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1516:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    151a:	c9 01       	movw	r24, r18
    151c:	03 2e       	mov	r0, r19
    151e:	00 0c       	add	r0, r0
    1520:	aa 0b       	sbc	r26, r26
    1522:	bb 0b       	sbc	r27, r27
    1524:	dc 01       	movw	r26, r24
    1526:	99 27       	eor	r25, r25
    1528:	88 27       	eor	r24, r24
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	84 2b       	or	r24, r20
    1530:	95 2b       	or	r25, r21
    1532:	a6 2b       	or	r26, r22
    1534:	b7 2b       	or	r27, r23
    1536:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    153a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    153e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1542:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1546:	b0 9b       	sbis	0x16, 0	; 22
    1548:	1b c0       	rjmp	.+54     	; 0x1580 <__vector_21+0x98>
    154a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    154e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1552:	c9 01       	movw	r24, r18
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	09 2e       	mov	r0, r25
    1558:	00 0c       	add	r0, r0
    155a:	aa 0b       	sbc	r26, r26
    155c:	bb 0b       	sbc	r27, r27
    155e:	dc 01       	movw	r26, r24
    1560:	99 27       	eor	r25, r25
    1562:	88 27       	eor	r24, r24
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	84 2b       	or	r24, r20
    156a:	95 2b       	or	r25, r21
    156c:	a6 2b       	or	r26, r22
    156e:	b7 2b       	or	r27, r23
    1570:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1574:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1578:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    157c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1580:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x20>
    1584:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x21>
    1588:	30 97       	sbiw	r30, 0x00	; 0
    158a:	39 f0       	breq	.+14     	; 0x159a <__vector_21+0xb2>
    158c:	60 e1       	ldi	r22, 0x10	; 16
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x20>
    1594:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x21>
    1598:	09 95       	icall
    159a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    159e:	ff 91       	pop	r31
    15a0:	ef 91       	pop	r30
    15a2:	bf 91       	pop	r27
    15a4:	af 91       	pop	r26
    15a6:	9f 91       	pop	r25
    15a8:	8f 91       	pop	r24
    15aa:	7f 91       	pop	r23
    15ac:	6f 91       	pop	r22
    15ae:	5f 91       	pop	r21
    15b0:	4f 91       	pop	r20
    15b2:	3f 91       	pop	r19
    15b4:	2f 91       	pop	r18
    15b6:	0f 90       	pop	r0
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	0f 90       	pop	r0
    15bc:	1f 90       	pop	r1
    15be:	18 95       	reti

000015c0 <__vector_22>:
    15c0:	1f 92       	push	r1
    15c2:	0f 92       	push	r0
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	0f 92       	push	r0
    15c8:	11 24       	eor	r1, r1
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
    15e2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <__data_end>
    15e6:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <__data_end+0x1>
    15ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15f2:	c9 01       	movw	r24, r18
    15f4:	03 2e       	mov	r0, r19
    15f6:	00 0c       	add	r0, r0
    15f8:	aa 0b       	sbc	r26, r26
    15fa:	bb 0b       	sbc	r27, r27
    15fc:	dc 01       	movw	r26, r24
    15fe:	99 27       	eor	r25, r25
    1600:	88 27       	eor	r24, r24
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	84 2b       	or	r24, r20
    1608:	95 2b       	or	r25, r21
    160a:	a6 2b       	or	r26, r22
    160c:	b7 2b       	or	r27, r23
    160e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    1612:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1616:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    161a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    161e:	b0 9b       	sbis	0x16, 0	; 22
    1620:	1b c0       	rjmp	.+54     	; 0x1658 <__vector_22+0x98>
    1622:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1626:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    162a:	c9 01       	movw	r24, r18
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	09 2e       	mov	r0, r25
    1630:	00 0c       	add	r0, r0
    1632:	aa 0b       	sbc	r26, r26
    1634:	bb 0b       	sbc	r27, r27
    1636:	dc 01       	movw	r26, r24
    1638:	99 27       	eor	r25, r25
    163a:	88 27       	eor	r24, r24
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	84 2b       	or	r24, r20
    1642:	95 2b       	or	r25, r21
    1644:	a6 2b       	or	r26, r22
    1646:	b7 2b       	or	r27, r23
    1648:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <timestamp>
    164c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <timestamp+0x1>
    1650:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <timestamp+0x2>
    1654:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <timestamp+0x3>
    1658:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x22>
    165c:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x23>
    1660:	30 97       	sbiw	r30, 0x00	; 0
    1662:	39 f0       	breq	.+14     	; 0x1672 <__vector_22+0xb2>
    1664:	61 e1       	ldi	r22, 0x11	; 17
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x22>
    166c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x23>
    1670:	09 95       	icall
    1672:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    1676:	ff 91       	pop	r31
    1678:	ef 91       	pop	r30
    167a:	bf 91       	pop	r27
    167c:	af 91       	pop	r26
    167e:	9f 91       	pop	r25
    1680:	8f 91       	pop	r24
    1682:	7f 91       	pop	r23
    1684:	6f 91       	pop	r22
    1686:	5f 91       	pop	r21
    1688:	4f 91       	pop	r20
    168a:	3f 91       	pop	r19
    168c:	2f 91       	pop	r18
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_9>:
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    16ba:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
    16c4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
    16c8:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <timerQ>
    16cc:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <timerQ+0x1>
    16d0:	30 97       	sbiw	r30, 0x00	; 0
    16d2:	39 f0       	breq	.+14     	; 0x16e2 <__vector_9+0x4a>
    16d4:	42 81       	ldd	r20, Z+2	; 0x02
    16d6:	53 81       	ldd	r21, Z+3	; 0x03
    16d8:	64 81       	ldd	r22, Z+4	; 0x04
    16da:	75 81       	ldd	r23, Z+5	; 0x05
    16dc:	86 17       	cp	r24, r22
    16de:	97 07       	cpc	r25, r23
    16e0:	a1 f0       	breq	.+40     	; 0x170a <__vector_9+0x72>
    16e2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    16e6:	8d 7f       	andi	r24, 0xFD	; 253
    16e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	9f 91       	pop	r25
    16f2:	8f 91       	pop	r24
    16f4:	7f 91       	pop	r23
    16f6:	6f 91       	pop	r22
    16f8:	5f 91       	pop	r21
    16fa:	4f 91       	pop	r20
    16fc:	3f 91       	pop	r19
    16fe:	2f 91       	pop	r18
    1700:	0f 90       	pop	r0
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	0f 90       	pop	r0
    1706:	1f 90       	pop	r1
    1708:	18 95       	reti
    170a:	ca 01       	movw	r24, r20
    170c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1710:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1714:	42 1b       	sub	r20, r18
    1716:	53 0b       	sbc	r21, r19
    1718:	41 30       	cpi	r20, 0x01	; 1
    171a:	51 05       	cpc	r21, r1
    171c:	51 f0       	breq	.+20     	; 0x1732 <__vector_9+0x9a>
    171e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1722:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1726:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    172a:	82 60       	ori	r24, 0x02	; 2
    172c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1730:	dd cf       	rjmp	.-70     	; 0x16ec <__vector_9+0x54>
    1732:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1736:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	f0 cf       	rjmp	.-32     	; 0x171e <__vector_9+0x86>

0000173e <__vector_7>:
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	2f 93       	push	r18
    175e:	3f 93       	push	r19
    1760:	4f 93       	push	r20
    1762:	5f 93       	push	r21
    1764:	6f 93       	push	r22
    1766:	7f 93       	push	r23
    1768:	8f 93       	push	r24
    176a:	9f 93       	push	r25
    176c:	af 93       	push	r26
    176e:	bf 93       	push	r27
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	e0 90 12 01 	lds	r14, 0x0112	; 0x800112 <__data_end>
    177c:	f0 90 13 01 	lds	r15, 0x0113	; 0x800113 <__data_end+0x1>
    1780:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1784:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1788:	b0 99       	sbic	0x16, 0	; 22
    178a:	98 c0       	rjmp	.+304    	; 0x18bc <__vector_7+0x17e>
    178c:	47 01       	movw	r8, r14
    178e:	0f 2c       	mov	r0, r15
    1790:	00 0c       	add	r0, r0
    1792:	aa 08       	sbc	r10, r10
    1794:	bb 08       	sbc	r11, r11
    1796:	54 01       	movw	r10, r8
    1798:	99 24       	eor	r9, r9
    179a:	88 24       	eor	r8, r8
    179c:	a0 e0       	ldi	r26, 0x00	; 0
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	88 2a       	or	r8, r24
    17a2:	99 2a       	or	r9, r25
    17a4:	aa 2a       	or	r10, r26
    17a6:	bb 2a       	or	r11, r27
    17a8:	c0 91 18 01 	lds	r28, 0x0118	; 0x800118 <timerQ>
    17ac:	d0 91 19 01 	lds	r29, 0x0119	; 0x800119 <timerQ+0x1>
    17b0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <msgQ>
    17b4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <msgQ+0x1>
    17b8:	20 97       	sbiw	r28, 0x00	; 0
    17ba:	09 f4       	brne	.+2      	; 0x17be <__vector_7+0x80>
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <__vector_7+0xfe>
    17be:	4a 81       	ldd	r20, Y+2	; 0x02
    17c0:	5b 81       	ldd	r21, Y+3	; 0x03
    17c2:	6c 81       	ldd	r22, Y+4	; 0x04
    17c4:	7d 81       	ldd	r23, Y+5	; 0x05
    17c6:	8a 01       	movw	r16, r20
    17c8:	9b 01       	movw	r18, r22
    17ca:	08 19       	sub	r16, r8
    17cc:	19 09       	sbc	r17, r9
    17ce:	2a 09       	sbc	r18, r10
    17d0:	3b 09       	sbc	r19, r11
    17d2:	10 16       	cp	r1, r16
    17d4:	11 06       	cpc	r1, r17
    17d6:	12 06       	cpc	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	0c f4       	brge	.+2      	; 0x17de <__vector_7+0xa0>
    17dc:	40 c0       	rjmp	.+128    	; 0x185e <__vector_7+0x120>
    17de:	d8 80       	ld	r13, Y
    17e0:	c9 80       	ldd	r12, Y+1	; 0x01
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	b9 f1       	breq	.+110    	; 0x1854 <__vector_7+0x116>
    17e6:	0e 81       	ldd	r16, Y+6	; 0x06
    17e8:	1f 81       	ldd	r17, Y+7	; 0x07
    17ea:	28 85       	ldd	r18, Y+8	; 0x08
    17ec:	39 85       	ldd	r19, Y+9	; 0x09
    17ee:	fc 01       	movw	r30, r24
    17f0:	46 81       	ldd	r20, Z+6	; 0x06
    17f2:	57 81       	ldd	r21, Z+7	; 0x07
    17f4:	60 85       	ldd	r22, Z+8	; 0x08
    17f6:	71 85       	ldd	r23, Z+9	; 0x09
    17f8:	04 17       	cp	r16, r20
    17fa:	15 07       	cpc	r17, r21
    17fc:	26 07       	cpc	r18, r22
    17fe:	37 07       	cpc	r19, r23
    1800:	4c f1       	brlt	.+82     	; 0x1854 <__vector_7+0x116>
    1802:	dc 01       	movw	r26, r24
    1804:	0a c0       	rjmp	.+20     	; 0x181a <__vector_7+0xdc>
    1806:	46 81       	ldd	r20, Z+6	; 0x06
    1808:	57 81       	ldd	r21, Z+7	; 0x07
    180a:	60 85       	ldd	r22, Z+8	; 0x08
    180c:	71 85       	ldd	r23, Z+9	; 0x09
    180e:	04 17       	cp	r16, r20
    1810:	15 07       	cpc	r17, r21
    1812:	26 07       	cpc	r18, r22
    1814:	37 07       	cpc	r19, r23
    1816:	dc f0       	brlt	.+54     	; 0x184e <__vector_7+0x110>
    1818:	df 01       	movw	r26, r30
    181a:	ed 91       	ld	r30, X+
    181c:	fc 91       	ld	r31, X
    181e:	11 97       	sbiw	r26, 0x01	; 1
    1820:	30 97       	sbiw	r30, 0x00	; 0
    1822:	89 f7       	brne	.-30     	; 0x1806 <__vector_7+0xc8>
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	18 82       	st	Y, r1
    1828:	cd 93       	st	X+, r28
    182a:	dc 93       	st	X, r29
    182c:	38 2f       	mov	r19, r24
    182e:	29 2f       	mov	r18, r25
    1830:	cd 2d       	mov	r28, r13
    1832:	dc 2d       	mov	r29, r12
    1834:	83 2f       	mov	r24, r19
    1836:	92 2f       	mov	r25, r18
    1838:	20 97       	sbiw	r28, 0x00	; 0
    183a:	09 f6       	brne	.-126    	; 0x17be <__vector_7+0x80>
    183c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <timerQ+0x1>
    1840:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <timerQ>
    1844:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <msgQ+0x1>
    1848:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <msgQ>
    184c:	13 c0       	rjmp	.+38     	; 0x1874 <__vector_7+0x136>
    184e:	f9 83       	std	Y+1, r31	; 0x01
    1850:	e8 83       	st	Y, r30
    1852:	ea cf       	rjmp	.-44     	; 0x1828 <__vector_7+0xea>
    1854:	99 83       	std	Y+1, r25	; 0x01
    1856:	88 83       	st	Y, r24
    1858:	3c 2f       	mov	r19, r28
    185a:	2d 2f       	mov	r18, r29
    185c:	e9 cf       	rjmp	.-46     	; 0x1830 <__vector_7+0xf2>
    185e:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <timerQ+0x1>
    1862:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <timerQ>
    1866:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <msgQ+0x1>
    186a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <msgQ>
    186e:	e6 16       	cp	r14, r22
    1870:	f7 06       	cpc	r15, r23
    1872:	d9 f1       	breq	.+118    	; 0x18ea <__vector_7+0x1ac>
    1874:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1878:	8d 7f       	andi	r24, 0xFD	; 253
    187a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    187e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    1882:	ff 91       	pop	r31
    1884:	ef 91       	pop	r30
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	bf 91       	pop	r27
    188c:	af 91       	pop	r26
    188e:	9f 91       	pop	r25
    1890:	8f 91       	pop	r24
    1892:	7f 91       	pop	r23
    1894:	6f 91       	pop	r22
    1896:	5f 91       	pop	r21
    1898:	4f 91       	pop	r20
    189a:	3f 91       	pop	r19
    189c:	2f 91       	pop	r18
    189e:	1f 91       	pop	r17
    18a0:	0f 91       	pop	r16
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	9f 90       	pop	r9
    18b0:	8f 90       	pop	r8
    18b2:	0f 90       	pop	r0
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	0f 90       	pop	r0
    18b8:	1f 90       	pop	r1
    18ba:	18 95       	reti
    18bc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18c0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18c4:	47 01       	movw	r8, r14
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	88 1a       	sub	r8, r24
    18ca:	98 0a       	sbc	r9, r24
    18cc:	09 2c       	mov	r0, r9
    18ce:	00 0c       	add	r0, r0
    18d0:	aa 08       	sbc	r10, r10
    18d2:	bb 08       	sbc	r11, r11
    18d4:	d4 01       	movw	r26, r8
    18d6:	99 27       	eor	r25, r25
    18d8:	88 27       	eor	r24, r24
    18da:	49 01       	movw	r8, r18
    18dc:	a1 2c       	mov	r10, r1
    18de:	b1 2c       	mov	r11, r1
    18e0:	88 2a       	or	r8, r24
    18e2:	99 2a       	or	r9, r25
    18e4:	aa 2a       	or	r10, r26
    18e6:	bb 2a       	or	r11, r27
    18e8:	5f cf       	rjmp	.-322    	; 0x17a8 <__vector_7+0x6a>
    18ea:	ca 01       	movw	r24, r20
    18ec:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18f0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18f4:	42 1b       	sub	r20, r18
    18f6:	53 0b       	sbc	r21, r19
    18f8:	41 30       	cpi	r20, 0x01	; 1
    18fa:	51 05       	cpc	r21, r1
    18fc:	51 f0       	breq	.+20     	; 0x1912 <__vector_7+0x1d4>
    18fe:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1902:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1906:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    190a:	82 60       	ori	r24, 0x02	; 2
    190c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1910:	b6 cf       	rjmp	.-148    	; 0x187e <__vector_7+0x140>
    1912:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1916:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    191a:	01 96       	adiw	r24, 0x01	; 1
    191c:	f0 cf       	rjmp	.-32     	; 0x18fe <__vector_7+0x1c0>

0000191e <async>:
    191e:	3f 92       	push	r3
    1920:	4f 92       	push	r4
    1922:	5f 92       	push	r5
    1924:	6f 92       	push	r6
    1926:	7f 92       	push	r7
    1928:	8f 92       	push	r8
    192a:	9f 92       	push	r9
    192c:	af 92       	push	r10
    192e:	bf 92       	push	r11
    1930:	cf 92       	push	r12
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	ef b7       	in	r30, 0x3f	; 63
    1942:	e0 78       	andi	r30, 0x80	; 128
    1944:	3e 2e       	mov	r3, r30
    1946:	f8 94       	cli
    1948:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <msgPool>
    194c:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <msgPool+0x1>
    1950:	20 97       	sbiw	r28, 0x00	; 0
    1952:	09 f4       	brne	.+2      	; 0x1956 <async+0x38>
    1954:	52 c1       	rjmp	.+676    	; 0x1bfa <async+0x2dc>
    1956:	e8 81       	ld	r30, Y
    1958:	f9 81       	ldd	r31, Y+1	; 0x01
    195a:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <msgPool+0x1>
    195e:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <msgPool>
    1962:	1b 87       	std	Y+11, r17	; 0x0b
    1964:	0a 87       	std	Y+10, r16	; 0x0a
    1966:	fd 86       	std	Y+13, r15	; 0x0d
    1968:	ec 86       	std	Y+12, r14	; 0x0c
    196a:	df 86       	std	Y+15, r13	; 0x0f
    196c:	ce 86       	std	Y+14, r12	; 0x0e
    196e:	33 20       	and	r3, r3
    1970:	09 f4       	brne	.+2      	; 0x1974 <async+0x56>
    1972:	6f c0       	rjmp	.+222    	; 0x1a52 <async+0x134>
    1974:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1978:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    197c:	02 80       	ldd	r0, Z+2	; 0x02
    197e:	f3 81       	ldd	r31, Z+3	; 0x03
    1980:	e0 2d       	mov	r30, r0
    1982:	c2 80       	ldd	r12, Z+2	; 0x02
    1984:	d3 80       	ldd	r13, Z+3	; 0x03
    1986:	e4 80       	ldd	r14, Z+4	; 0x04
    1988:	f5 80       	ldd	r15, Z+5	; 0x05
    198a:	c6 0e       	add	r12, r22
    198c:	d7 1e       	adc	r13, r23
    198e:	e8 1e       	adc	r14, r24
    1990:	f9 1e       	adc	r15, r25
    1992:	ca 82       	std	Y+2, r12	; 0x02
    1994:	db 82       	std	Y+3, r13	; 0x03
    1996:	ec 82       	std	Y+4, r14	; 0x04
    1998:	fd 82       	std	Y+5, r15	; 0x05
    199a:	12 16       	cp	r1, r18
    199c:	13 06       	cpc	r1, r19
    199e:	14 06       	cpc	r1, r20
    19a0:	15 06       	cpc	r1, r21
    19a2:	0c f0       	brlt	.+2      	; 0x19a6 <async+0x88>
    19a4:	f8 c0       	rjmp	.+496    	; 0x1b96 <async+0x278>
    19a6:	da 01       	movw	r26, r20
    19a8:	c9 01       	movw	r24, r18
    19aa:	8c 01       	movw	r16, r24
    19ac:	9d 01       	movw	r18, r26
    19ae:	0c 0d       	add	r16, r12
    19b0:	1d 1d       	adc	r17, r13
    19b2:	2e 1d       	adc	r18, r14
    19b4:	3f 1d       	adc	r19, r15
    19b6:	0e 83       	std	Y+6, r16	; 0x06
    19b8:	1f 83       	std	Y+7, r17	; 0x07
    19ba:	28 87       	std	Y+8, r18	; 0x08
    19bc:	39 87       	std	Y+9, r19	; 0x09
    19be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
    19c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
    19c6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    19ca:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    19ce:	b0 99       	sbic	0x16, 0	; 22
    19d0:	49 c0       	rjmp	.+146    	; 0x1a64 <async+0x146>
    19d2:	2c 01       	movw	r4, r24
    19d4:	09 2e       	mov	r0, r25
    19d6:	00 0c       	add	r0, r0
    19d8:	66 08       	sbc	r6, r6
    19da:	77 08       	sbc	r7, r7
    19dc:	52 01       	movw	r10, r4
    19de:	99 24       	eor	r9, r9
    19e0:	88 24       	eor	r8, r8
    19e2:	2b 01       	movw	r4, r22
    19e4:	61 2c       	mov	r6, r1
    19e6:	71 2c       	mov	r7, r1
    19e8:	48 28       	or	r4, r8
    19ea:	59 28       	or	r5, r9
    19ec:	6a 28       	or	r6, r10
    19ee:	7b 28       	or	r7, r11
    19f0:	b7 01       	movw	r22, r14
    19f2:	a6 01       	movw	r20, r12
    19f4:	44 19       	sub	r20, r4
    19f6:	55 09       	sbc	r21, r5
    19f8:	66 09       	sbc	r22, r6
    19fa:	77 09       	sbc	r23, r7
    19fc:	14 16       	cp	r1, r20
    19fe:	15 06       	cpc	r1, r21
    1a00:	16 06       	cpc	r1, r22
    1a02:	17 06       	cpc	r1, r23
    1a04:	0c f0       	brlt	.+2      	; 0x1a08 <async+0xea>
    1a06:	68 c0       	rjmp	.+208    	; 0x1ad8 <async+0x1ba>
    1a08:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <timerQ>
    1a0c:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <timerQ+0x1>
    1a10:	10 97       	sbiw	r26, 0x00	; 0
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <async+0xf8>
    1a14:	dc c0       	rjmp	.+440    	; 0x1bce <async+0x2b0>
    1a16:	12 96       	adiw	r26, 0x02	; 2
    1a18:	0d 91       	ld	r16, X+
    1a1a:	1d 91       	ld	r17, X+
    1a1c:	2d 91       	ld	r18, X+
    1a1e:	3c 91       	ld	r19, X
    1a20:	15 97       	sbiw	r26, 0x05	; 5
    1a22:	c0 16       	cp	r12, r16
    1a24:	d1 06       	cpc	r13, r17
    1a26:	e2 06       	cpc	r14, r18
    1a28:	f3 06       	cpc	r15, r19
    1a2a:	5c f4       	brge	.+22     	; 0x1a42 <async+0x124>
    1a2c:	d0 c0       	rjmp	.+416    	; 0x1bce <async+0x2b0>
    1a2e:	42 81       	ldd	r20, Z+2	; 0x02
    1a30:	53 81       	ldd	r21, Z+3	; 0x03
    1a32:	64 81       	ldd	r22, Z+4	; 0x04
    1a34:	75 81       	ldd	r23, Z+5	; 0x05
    1a36:	c4 16       	cp	r12, r20
    1a38:	d5 06       	cpc	r13, r21
    1a3a:	e6 06       	cpc	r14, r22
    1a3c:	f7 06       	cpc	r15, r23
    1a3e:	4c f1       	brlt	.+82     	; 0x1a92 <async+0x174>
    1a40:	df 01       	movw	r26, r30
    1a42:	ed 91       	ld	r30, X+
    1a44:	fc 91       	ld	r31, X
    1a46:	11 97       	sbiw	r26, 0x01	; 1
    1a48:	30 97       	sbiw	r30, 0x00	; 0
    1a4a:	89 f7       	brne	.-30     	; 0x1a2e <async+0x110>
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	18 82       	st	Y, r1
    1a50:	22 c0       	rjmp	.+68     	; 0x1a96 <async+0x178>
    1a52:	c0 90 14 01 	lds	r12, 0x0114	; 0x800114 <timestamp>
    1a56:	d0 90 15 01 	lds	r13, 0x0115	; 0x800115 <timestamp+0x1>
    1a5a:	e0 90 16 01 	lds	r14, 0x0116	; 0x800116 <timestamp+0x2>
    1a5e:	f0 90 17 01 	lds	r15, 0x0117	; 0x800117 <timestamp+0x3>
    1a62:	93 cf       	rjmp	.-218    	; 0x198a <async+0x6c>
    1a64:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a68:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a6c:	2c 01       	movw	r4, r24
    1a6e:	4f ef       	ldi	r20, 0xFF	; 255
    1a70:	44 1a       	sub	r4, r20
    1a72:	54 0a       	sbc	r5, r20
    1a74:	05 2c       	mov	r0, r5
    1a76:	00 0c       	add	r0, r0
    1a78:	66 08       	sbc	r6, r6
    1a7a:	77 08       	sbc	r7, r7
    1a7c:	b2 01       	movw	r22, r4
    1a7e:	55 27       	eor	r21, r21
    1a80:	44 27       	eor	r20, r20
    1a82:	2f 01       	movw	r4, r30
    1a84:	61 2c       	mov	r6, r1
    1a86:	71 2c       	mov	r7, r1
    1a88:	44 2a       	or	r4, r20
    1a8a:	55 2a       	or	r5, r21
    1a8c:	66 2a       	or	r6, r22
    1a8e:	77 2a       	or	r7, r23
    1a90:	af cf       	rjmp	.-162    	; 0x19f0 <async+0xd2>
    1a92:	f9 83       	std	Y+1, r31	; 0x01
    1a94:	e8 83       	st	Y, r30
    1a96:	cd 93       	st	X+, r28
    1a98:	dc 93       	st	X, r29
    1a9a:	82 17       	cp	r24, r18
    1a9c:	93 07       	cpc	r25, r19
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <async+0x184>
    1aa0:	7f c0       	rjmp	.+254    	; 0x1ba0 <async+0x282>
    1aa2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1aa6:	8d 7f       	andi	r24, 0xFD	; 253
    1aa8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1aac:	33 20       	and	r3, r3
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <async+0x194>
    1ab0:	78 94       	sei
    1ab2:	ce 01       	movw	r24, r28
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	ff 90       	pop	r15
    1abe:	ef 90       	pop	r14
    1ac0:	df 90       	pop	r13
    1ac2:	cf 90       	pop	r12
    1ac4:	bf 90       	pop	r11
    1ac6:	af 90       	pop	r10
    1ac8:	9f 90       	pop	r9
    1aca:	8f 90       	pop	r8
    1acc:	7f 90       	pop	r7
    1ace:	6f 90       	pop	r6
    1ad0:	5f 90       	pop	r5
    1ad2:	4f 90       	pop	r4
    1ad4:	3f 90       	pop	r3
    1ad6:	08 95       	ret
    1ad8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <msgQ>
    1adc:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <msgQ+0x1>
    1ae0:	10 97       	sbiw	r26, 0x00	; 0
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <async+0x1c8>
    1ae4:	83 c0       	rjmp	.+262    	; 0x1bec <async+0x2ce>
    1ae6:	16 96       	adiw	r26, 0x06	; 6
    1ae8:	cd 90       	ld	r12, X+
    1aea:	dd 90       	ld	r13, X+
    1aec:	ed 90       	ld	r14, X+
    1aee:	fc 90       	ld	r15, X
    1af0:	19 97       	sbiw	r26, 0x09	; 9
    1af2:	0c 15       	cp	r16, r12
    1af4:	1d 05       	cpc	r17, r13
    1af6:	2e 05       	cpc	r18, r14
    1af8:	3f 05       	cpc	r19, r15
    1afa:	64 f4       	brge	.+24     	; 0x1b14 <async+0x1f6>
    1afc:	77 c0       	rjmp	.+238    	; 0x1bec <async+0x2ce>
    1afe:	c6 80       	ldd	r12, Z+6	; 0x06
    1b00:	d7 80       	ldd	r13, Z+7	; 0x07
    1b02:	e0 84       	ldd	r14, Z+8	; 0x08
    1b04:	f1 84       	ldd	r15, Z+9	; 0x09
    1b06:	0c 15       	cp	r16, r12
    1b08:	1d 05       	cpc	r17, r13
    1b0a:	2e 05       	cpc	r18, r14
    1b0c:	3f 05       	cpc	r19, r15
    1b0e:	0c f4       	brge	.+2      	; 0x1b12 <async+0x1f4>
    1b10:	5b c0       	rjmp	.+182    	; 0x1bc8 <async+0x2aa>
    1b12:	df 01       	movw	r26, r30
    1b14:	ed 91       	ld	r30, X+
    1b16:	fc 91       	ld	r31, X
    1b18:	11 97       	sbiw	r26, 0x01	; 1
    1b1a:	30 97       	sbiw	r30, 0x00	; 0
    1b1c:	81 f7       	brne	.-32     	; 0x1afe <async+0x1e0>
    1b1e:	19 82       	std	Y+1, r1	; 0x01
    1b20:	18 82       	st	Y, r1
    1b22:	cd 93       	st	X+, r28
    1b24:	dc 93       	st	X, r29
    1b26:	33 20       	and	r3, r3
    1b28:	21 f2       	breq	.-120    	; 0x1ab2 <async+0x194>
    1b2a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1b2e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <async+0x21a>
    1b36:	bc cf       	rjmp	.-136    	; 0x1ab0 <async+0x192>
    1b38:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1b3c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1b40:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <msgQ>
    1b44:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <msgQ+0x1>
    1b48:	02 81       	ldd	r16, Z+2	; 0x02
    1b4a:	13 81       	ldd	r17, Z+3	; 0x03
    1b4c:	d9 01       	movw	r26, r18
    1b4e:	16 96       	adiw	r26, 0x06	; 6
    1b50:	4d 91       	ld	r20, X+
    1b52:	5d 91       	ld	r21, X+
    1b54:	6d 91       	ld	r22, X+
    1b56:	7c 91       	ld	r23, X
    1b58:	19 97       	sbiw	r26, 0x09	; 9
    1b5a:	d8 01       	movw	r26, r16
    1b5c:	16 96       	adiw	r26, 0x06	; 6
    1b5e:	0d 91       	ld	r16, X+
    1b60:	1d 91       	ld	r17, X+
    1b62:	2d 91       	ld	r18, X+
    1b64:	3c 91       	ld	r19, X
    1b66:	19 97       	sbiw	r26, 0x09	; 9
    1b68:	40 1b       	sub	r20, r16
    1b6a:	51 0b       	sbc	r21, r17
    1b6c:	62 0b       	sbc	r22, r18
    1b6e:	73 0b       	sbc	r23, r19
    1b70:	77 ff       	sbrs	r23, 7
    1b72:	9e cf       	rjmp	.-196    	; 0x1ab0 <async+0x192>
    1b74:	dc 01       	movw	r26, r24
    1b76:	2d 91       	ld	r18, X+
    1b78:	3c 91       	ld	r19, X
    1b7a:	11 97       	sbiw	r26, 0x01	; 1
    1b7c:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1b80:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1b84:	ed 93       	st	X+, r30
    1b86:	fc 93       	st	X, r31
    1b88:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1b8c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1b90:	0e 94 49 03 	call	0x692	; 0x692 <dispatch>
    1b94:	8d cf       	rjmp	.-230    	; 0x1ab0 <async+0x192>
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	9f ef       	ldi	r25, 0xFF	; 255
    1b9a:	af ef       	ldi	r26, 0xFF	; 255
    1b9c:	bf e7       	ldi	r27, 0x7F	; 127
    1b9e:	05 cf       	rjmp	.-502    	; 0x19aa <async+0x8c>
    1ba0:	c8 01       	movw	r24, r16
    1ba2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1ba6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1baa:	04 1b       	sub	r16, r20
    1bac:	15 0b       	sbc	r17, r21
    1bae:	01 30       	cpi	r16, 0x01	; 1
    1bb0:	11 05       	cpc	r17, r1
    1bb2:	b1 f0       	breq	.+44     	; 0x1be0 <async+0x2c2>
    1bb4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1bb8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1bbc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1bc0:	82 60       	ori	r24, 0x02	; 2
    1bc2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1bc6:	72 cf       	rjmp	.-284    	; 0x1aac <async+0x18e>
    1bc8:	f9 83       	std	Y+1, r31	; 0x01
    1bca:	e8 83       	st	Y, r30
    1bcc:	aa cf       	rjmp	.-172    	; 0x1b22 <async+0x204>
    1bce:	b9 83       	std	Y+1, r27	; 0x01
    1bd0:	a8 83       	st	Y, r26
    1bd2:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <timerQ+0x1>
    1bd6:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <timerQ>
    1bda:	97 01       	movw	r18, r14
    1bdc:	86 01       	movw	r16, r12
    1bde:	5d cf       	rjmp	.-326    	; 0x1a9a <async+0x17c>
    1be0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1be4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	e4 cf       	rjmp	.-56     	; 0x1bb4 <async+0x296>
    1bec:	b9 83       	std	Y+1, r27	; 0x01
    1bee:	a8 83       	st	Y, r26
    1bf0:	d0 93 1b 01 	sts	0x011B, r29	; 0x80011b <msgQ+0x1>
    1bf4:	c0 93 1a 01 	sts	0x011A, r28	; 0x80011a <msgQ>
    1bf8:	96 cf       	rjmp	.-212    	; 0x1b26 <async+0x208>
    1bfa:	0e 94 a9 03 	call	0x752	; 0x752 <dequeue.part.0>

00001bfe <sync>:
    1bfe:	cf 92       	push	r12
    1c00:	df 92       	push	r13
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
    1c10:	7b 01       	movw	r14, r22
    1c12:	6a 01       	movw	r12, r20
    1c14:	1f b7       	in	r17, 0x3f	; 63
    1c16:	10 78       	andi	r17, 0x80	; 128
    1c18:	f8 94       	cli
    1c1a:	a8 81       	ld	r26, Y
    1c1c:	b9 81       	ldd	r27, Y+1	; 0x01
    1c1e:	10 97       	sbiw	r26, 0x00	; 0
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <sync+0x2a>
    1c22:	62 c0       	rjmp	.+196    	; 0x1ce8 <sync+0xea>
    1c24:	a0 81       	ld	r26, Z
    1c26:	b1 81       	ldd	r27, Z+1	; 0x01
    1c28:	14 96       	adiw	r26, 0x04	; 4
    1c2a:	ed 91       	ld	r30, X+
    1c2c:	fc 91       	ld	r31, X
    1c2e:	15 97       	sbiw	r26, 0x05	; 5
    1c30:	30 97       	sbiw	r30, 0x00	; 0
    1c32:	c1 f7       	brne	.-16     	; 0x1c24 <sync+0x26>
    1c34:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1c38:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1c3c:	2a 17       	cp	r18, r26
    1c3e:	3b 07       	cpc	r19, r27
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <sync+0x46>
    1c42:	4c c0       	rjmp	.+152    	; 0x1cdc <sync+0xde>
    1c44:	11 23       	and	r17, r17
    1c46:	a1 f1       	breq	.+104    	; 0x1cb0 <sync+0xb2>
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	19 f0       	breq	.+6      	; 0x1c56 <sync+0x58>
    1c50:	fc 01       	movw	r30, r24
    1c52:	15 82       	std	Z+5, r1	; 0x05
    1c54:	14 82       	std	Z+4, r1	; 0x04
    1c56:	3b 83       	std	Y+3, r19	; 0x03
    1c58:	2a 83       	std	Y+2, r18	; 0x02
    1c5a:	f9 01       	movw	r30, r18
    1c5c:	d5 83       	std	Z+5, r29	; 0x05
    1c5e:	c4 83       	std	Z+4, r28	; 0x04
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 03 	call	0x692	; 0x692 <dispatch>
    1c66:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1c6a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	89 2b       	or	r24, r25
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <sync+0x7a>
    1c76:	41 c0       	rjmp	.+130    	; 0x1cfa <sync+0xfc>
    1c78:	f9 83       	std	Y+1, r31	; 0x01
    1c7a:	e8 83       	st	Y, r30
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	09 f0       	breq	.+2      	; 0x1c86 <sync+0x88>
    1c84:	78 94       	sei
    1c86:	b6 01       	movw	r22, r12
    1c88:	ce 01       	movw	r24, r28
    1c8a:	f7 01       	movw	r30, r14
    1c8c:	09 95       	icall
    1c8e:	f8 2e       	mov	r15, r24
    1c90:	09 2f       	mov	r16, r25
    1c92:	8f b7       	in	r24, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	19 82       	std	Y+1, r1	; 0x01
    1c98:	18 82       	st	Y, r1
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9e:	82 30       	cpi	r24, 0x02	; 2
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	a0 f4       	brcc	.+40     	; 0x1ccc <sync+0xce>
    1ca4:	11 23       	and	r17, r17
    1ca6:	79 f0       	breq	.+30     	; 0x1cc6 <sync+0xc8>
    1ca8:	78 94       	sei
    1caa:	8f 2d       	mov	r24, r15
    1cac:	90 2f       	mov	r25, r16
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <sync+0xb6>
    1cb0:	8f ef       	ldi	r24, 0xFF	; 255
    1cb2:	9f ef       	ldi	r25, 0xFF	; 255
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	0f 91       	pop	r16
    1cbc:	ff 90       	pop	r15
    1cbe:	ef 90       	pop	r14
    1cc0:	df 90       	pop	r13
    1cc2:	cf 90       	pop	r12
    1cc4:	08 95       	ret
    1cc6:	8f 2d       	mov	r24, r15
    1cc8:	90 2f       	mov	r25, r16
    1cca:	f4 cf       	rjmp	.-24     	; 0x1cb4 <sync+0xb6>
    1ccc:	1b 82       	std	Y+3, r1	; 0x03
    1cce:	1a 82       	std	Y+2, r1	; 0x02
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	15 82       	std	Z+5, r1	; 0x05
    1cd4:	14 82       	std	Z+4, r1	; 0x04
    1cd6:	0e 94 49 03 	call	0x692	; 0x692 <dispatch>
    1cda:	e4 cf       	rjmp	.-56     	; 0x1ca4 <sync+0xa6>
    1cdc:	11 23       	and	r17, r17
    1cde:	41 f3       	breq	.-48     	; 0x1cb0 <sync+0xb2>
    1ce0:	78 94       	sei
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
    1ce6:	e6 cf       	rjmp	.-52     	; 0x1cb4 <sync+0xb6>
    1ce8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1cec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1cf0:	99 83       	std	Y+1, r25	; 0x01
    1cf2:	88 83       	st	Y, r24
    1cf4:	11 23       	and	r17, r17
    1cf6:	39 f2       	breq	.-114    	; 0x1c86 <sync+0x88>
    1cf8:	c1 cf       	rjmp	.-126    	; 0x1c7c <sync+0x7e>
    1cfa:	78 94       	sei
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	d9 cf       	rjmp	.-78     	; 0x1cb4 <sync+0xb6>

00001d02 <run>:
    1d02:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <msgQ>
    1d06:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <msgQ+0x1>
    1d0a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1d0e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1d12:	20 97       	sbiw	r28, 0x00	; 0
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <run+0x16>
    1d16:	6e c0       	rjmp	.+220    	; 0x1df4 <run+0xf2>
    1d18:	88 81       	ld	r24, Y
    1d1a:	99 81       	ldd	r25, Y+1	; 0x01
    1d1c:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <msgQ+0x1>
    1d20:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <msgQ>
    1d24:	d3 83       	std	Z+3, r29	; 0x03
    1d26:	c2 83       	std	Z+2, r28	; 0x02
    1d28:	78 94       	sei
    1d2a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d2c:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d2e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d30:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d32:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d34:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d36:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <sync>
    1d3a:	8f b7       	in	r24, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    1d42:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    1d46:	99 83       	std	Y+1, r25	; 0x01
    1d48:	88 83       	st	Y, r24
    1d4a:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    1d4e:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    1d52:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <activeStack>
    1d56:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <activeStack+0x1>
    1d5a:	f7 01       	movw	r30, r14
    1d5c:	a0 81       	ld	r26, Z
    1d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d60:	12 96       	adiw	r26, 0x02	; 2
    1d62:	8d 91       	ld	r24, X+
    1d64:	9c 91       	ld	r25, X
    1d66:	13 97       	sbiw	r26, 0x03	; 3
    1d68:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <msgQ>
    1d6c:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <msgQ+0x1>
    1d70:	20 97       	sbiw	r28, 0x00	; 0
    1d72:	a9 f0       	breq	.+42     	; 0x1d9e <run+0x9c>
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	49 f2       	breq	.-110    	; 0x1d0a <run+0x8>
    1d78:	4e 81       	ldd	r20, Y+6	; 0x06
    1d7a:	5f 81       	ldd	r21, Y+7	; 0x07
    1d7c:	68 85       	ldd	r22, Y+8	; 0x08
    1d7e:	79 85       	ldd	r23, Y+9	; 0x09
    1d80:	fc 01       	movw	r30, r24
    1d82:	06 81       	ldd	r16, Z+6	; 0x06
    1d84:	17 81       	ldd	r17, Z+7	; 0x07
    1d86:	20 85       	ldd	r18, Z+8	; 0x08
    1d88:	31 85       	ldd	r19, Z+9	; 0x09
    1d8a:	40 1b       	sub	r20, r16
    1d8c:	51 0b       	sbc	r21, r17
    1d8e:	62 0b       	sbc	r22, r18
    1d90:	73 0b       	sbc	r23, r19
    1d92:	14 16       	cp	r1, r20
    1d94:	15 06       	cpc	r1, r21
    1d96:	16 06       	cpc	r1, r22
    1d98:	17 06       	cpc	r1, r23
    1d9a:	0c f0       	brlt	.+2      	; 0x1d9e <run+0x9c>
    1d9c:	b6 cf       	rjmp	.-148    	; 0x1d0a <run+0x8>
    1d9e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <activeStack+0x1>
    1da2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <activeStack>
    1da6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1daa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1dae:	f7 01       	movw	r30, r14
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <threadPool+0x1>
    1db8:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <threadPool>
    1dbc:	14 96       	adiw	r26, 0x04	; 4
    1dbe:	ed 91       	ld	r30, X+
    1dc0:	fc 91       	ld	r31, X
    1dc2:	15 97       	sbiw	r26, 0x05	; 5
    1dc4:	30 97       	sbiw	r30, 0x00	; 0
    1dc6:	41 f0       	breq	.+16     	; 0x1dd8 <run+0xd6>
    1dc8:	a0 81       	ld	r26, Z
    1dca:	b1 81       	ldd	r27, Z+1	; 0x01
    1dcc:	14 96       	adiw	r26, 0x04	; 4
    1dce:	ed 91       	ld	r30, X+
    1dd0:	fc 91       	ld	r31, X
    1dd2:	15 97       	sbiw	r26, 0x05	; 5
    1dd4:	30 97       	sbiw	r30, 0x00	; 0
    1dd6:	c1 f7       	brne	.-16     	; 0x1dc8 <run+0xc6>
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 03 	call	0x692	; 0x692 <dispatch>
    1dde:	c0 91 1a 01 	lds	r28, 0x011A	; 0x80011a <msgQ>
    1de2:	d0 91 1b 01 	lds	r29, 0x011B	; 0x80011b <msgQ+0x1>
    1de6:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1dea:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1dee:	20 97       	sbiw	r28, 0x00	; 0
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <run+0xf2>
    1df2:	92 cf       	rjmp	.-220    	; 0x1d18 <run+0x16>
    1df4:	0e 94 a9 03 	call	0x752	; 0x752 <dequeue.part.0>

00001df8 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1df8:	42 31       	cpi	r20, 0x12	; 18
    1dfa:	b8 f4       	brcc	.+46     	; 0x1e2a <install+0x32>
        char status;
        DISABLE(status);
    1dfc:	2f b7       	in	r18, 0x3f	; 63
    1dfe:	f8 94       	cli
        otable[i] = obj;
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	44 0f       	add	r20, r20
    1e04:	55 1f       	adc	r21, r21
    1e06:	fa 01       	movw	r30, r20
    1e08:	e4 5e       	subi	r30, 0xE4	; 228
    1e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0c:	91 83       	std	Z+1, r25	; 0x01
    1e0e:	80 83       	st	Z, r24
        mtable[i] = m;
    1e10:	fa 01       	movw	r30, r20
    1e12:	ec 54       	subi	r30, 0x4C	; 76
    1e14:	fe 4f       	sbci	r31, 0xFE	; 254
    1e16:	71 83       	std	Z+1, r23	; 0x01
    1e18:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	fc 01       	movw	r30, r24
    1e20:	53 83       	std	Z+3, r21	; 0x03
    1e22:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1e24:	27 ff       	sbrs	r18, 7
    1e26:	01 c0       	rjmp	.+2      	; 0x1e2a <install+0x32>
    1e28:	78 94       	sei
    1e2a:	08 95       	ret

00001e2c <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1e2c:	8c 01       	movw	r16, r24
    1e2e:	7b 01       	movw	r14, r22
    1e30:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1e32:	8f b7       	in	r24, 0x3f	; 63
    1e34:	f8 94       	cli
    initialize();
    1e36:	0e 94 de 02 	call	0x5bc	; 0x5bc <initialize>
    ENABLE(1);
    1e3a:	78 94       	sei
    if (m != NULL)
    1e3c:	e1 14       	cp	r14, r1
    1e3e:	f1 04       	cpc	r15, r1
    1e40:	41 f0       	breq	.+16     	; 0x1e52 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	a9 01       	movw	r20, r18
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	70 e0       	ldi	r23, 0x00	; 0
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	0e 94 8f 0c 	call	0x191e	; 0x191e <async>
    DISABLE(status);
    1e52:	8f b7       	in	r24, 0x3f	; 63
    1e54:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1e56:	0e 94 69 03 	call	0x6d2	; 0x6d2 <schedule>
    ENABLE(1);
    1e5a:	78 94       	sei
    while (1) {
        SLEEP();
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	83 bf       	out	0x33, r24	; 51
    1e60:	88 95       	sleep
    1e62:	fd cf       	rjmp	.-6      	; 0x1e5e <tinytimber+0x32>

00001e64 <__divmodsi4>:
    1e64:	05 2e       	mov	r0, r21
    1e66:	97 fb       	bst	r25, 7
    1e68:	1e f4       	brtc	.+6      	; 0x1e70 <__divmodsi4+0xc>
    1e6a:	00 94       	com	r0
    1e6c:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <__negsi2>
    1e70:	57 fd       	sbrc	r21, 7
    1e72:	07 d0       	rcall	.+14     	; 0x1e82 <__divmodsi4_neg2>
    1e74:	0e 94 57 0f 	call	0x1eae	; 0x1eae <__udivmodsi4>
    1e78:	07 fc       	sbrc	r0, 7
    1e7a:	03 d0       	rcall	.+6      	; 0x1e82 <__divmodsi4_neg2>
    1e7c:	4e f4       	brtc	.+18     	; 0x1e90 <__divmodsi4_exit>
    1e7e:	0c 94 49 0f 	jmp	0x1e92	; 0x1e92 <__negsi2>

00001e82 <__divmodsi4_neg2>:
    1e82:	50 95       	com	r21
    1e84:	40 95       	com	r20
    1e86:	30 95       	com	r19
    1e88:	21 95       	neg	r18
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e8e:	5f 4f       	sbci	r21, 0xFF	; 255

00001e90 <__divmodsi4_exit>:
    1e90:	08 95       	ret

00001e92 <__negsi2>:
    1e92:	90 95       	com	r25
    1e94:	80 95       	com	r24
    1e96:	70 95       	com	r23
    1e98:	61 95       	neg	r22
    1e9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea0:	08 95       	ret

00001ea2 <__tablejump2__>:
    1ea2:	ee 0f       	add	r30, r30
    1ea4:	ff 1f       	adc	r31, r31
    1ea6:	05 90       	lpm	r0, Z+
    1ea8:	f4 91       	lpm	r31, Z
    1eaa:	e0 2d       	mov	r30, r0
    1eac:	09 94       	ijmp

00001eae <__udivmodsi4>:
    1eae:	a1 e2       	ldi	r26, 0x21	; 33
    1eb0:	1a 2e       	mov	r1, r26
    1eb2:	aa 1b       	sub	r26, r26
    1eb4:	bb 1b       	sub	r27, r27
    1eb6:	fd 01       	movw	r30, r26
    1eb8:	0d c0       	rjmp	.+26     	; 0x1ed4 <__udivmodsi4_ep>

00001eba <__udivmodsi4_loop>:
    1eba:	aa 1f       	adc	r26, r26
    1ebc:	bb 1f       	adc	r27, r27
    1ebe:	ee 1f       	adc	r30, r30
    1ec0:	ff 1f       	adc	r31, r31
    1ec2:	a2 17       	cp	r26, r18
    1ec4:	b3 07       	cpc	r27, r19
    1ec6:	e4 07       	cpc	r30, r20
    1ec8:	f5 07       	cpc	r31, r21
    1eca:	20 f0       	brcs	.+8      	; 0x1ed4 <__udivmodsi4_ep>
    1ecc:	a2 1b       	sub	r26, r18
    1ece:	b3 0b       	sbc	r27, r19
    1ed0:	e4 0b       	sbc	r30, r20
    1ed2:	f5 0b       	sbc	r31, r21

00001ed4 <__udivmodsi4_ep>:
    1ed4:	66 1f       	adc	r22, r22
    1ed6:	77 1f       	adc	r23, r23
    1ed8:	88 1f       	adc	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	1a 94       	dec	r1
    1ede:	69 f7       	brne	.-38     	; 0x1eba <__udivmodsi4_loop>
    1ee0:	60 95       	com	r22
    1ee2:	70 95       	com	r23
    1ee4:	80 95       	com	r24
    1ee6:	90 95       	com	r25
    1ee8:	9b 01       	movw	r18, r22
    1eea:	ac 01       	movw	r20, r24
    1eec:	bd 01       	movw	r22, r26
    1eee:	cf 01       	movw	r24, r30
    1ef0:	08 95       	ret

00001ef2 <setjmp>:
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	2d 92       	st	X+, r2
    1ef6:	3d 92       	st	X+, r3
    1ef8:	4d 92       	st	X+, r4
    1efa:	5d 92       	st	X+, r5
    1efc:	6d 92       	st	X+, r6
    1efe:	7d 92       	st	X+, r7
    1f00:	8d 92       	st	X+, r8
    1f02:	9d 92       	st	X+, r9
    1f04:	ad 92       	st	X+, r10
    1f06:	bd 92       	st	X+, r11
    1f08:	cd 92       	st	X+, r12
    1f0a:	dd 92       	st	X+, r13
    1f0c:	ed 92       	st	X+, r14
    1f0e:	fd 92       	st	X+, r15
    1f10:	0d 93       	st	X+, r16
    1f12:	1d 93       	st	X+, r17
    1f14:	cd 93       	st	X+, r28
    1f16:	dd 93       	st	X+, r29
    1f18:	ff 91       	pop	r31
    1f1a:	ef 91       	pop	r30
    1f1c:	8d b7       	in	r24, 0x3d	; 61
    1f1e:	8d 93       	st	X+, r24
    1f20:	8e b7       	in	r24, 0x3e	; 62
    1f22:	8d 93       	st	X+, r24
    1f24:	8f b7       	in	r24, 0x3f	; 63
    1f26:	8d 93       	st	X+, r24
    1f28:	ed 93       	st	X+, r30
    1f2a:	fd 93       	st	X+, r31
    1f2c:	88 27       	eor	r24, r24
    1f2e:	99 27       	eor	r25, r25
    1f30:	09 94       	ijmp

00001f32 <longjmp>:
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	81 1d       	adc	r24, r1
    1f3c:	2d 90       	ld	r2, X+
    1f3e:	3d 90       	ld	r3, X+
    1f40:	4d 90       	ld	r4, X+
    1f42:	5d 90       	ld	r5, X+
    1f44:	6d 90       	ld	r6, X+
    1f46:	7d 90       	ld	r7, X+
    1f48:	8d 90       	ld	r8, X+
    1f4a:	9d 90       	ld	r9, X+
    1f4c:	ad 90       	ld	r10, X+
    1f4e:	bd 90       	ld	r11, X+
    1f50:	cd 90       	ld	r12, X+
    1f52:	dd 90       	ld	r13, X+
    1f54:	ed 90       	ld	r14, X+
    1f56:	fd 90       	ld	r15, X+
    1f58:	0d 91       	ld	r16, X+
    1f5a:	1d 91       	ld	r17, X+
    1f5c:	cd 91       	ld	r28, X+
    1f5e:	dd 91       	ld	r29, X+
    1f60:	ed 91       	ld	r30, X+
    1f62:	fd 91       	ld	r31, X+
    1f64:	0d 90       	ld	r0, X+
    1f66:	f8 94       	cli
    1f68:	fe bf       	out	0x3e, r31	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	ed bf       	out	0x3d, r30	; 61
    1f6e:	ed 91       	ld	r30, X+
    1f70:	fd 91       	ld	r31, X+
    1f72:	09 94       	ijmp

00001f74 <_exit>:
    1f74:	f8 94       	cli

00001f76 <__stop_program>:
    1f76:	ff cf       	rjmp	.-2      	; 0x1f76 <__stop_program>
