
Lab_4_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000017e6  0000187a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  00800106  00800106  00001880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022ac  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e04  00000000  00000000  00003d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013de  00000000  00000000  00004b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000acc  00000000  00000000  00005f48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087c  00000000  00000000  00006a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003185  00000000  00000000  00007290  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000a415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__vector_1>
       8:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__vector_2>
       c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_3>
      10:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__vector_4>
      14:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__vector_9>
      28:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_10>
      2c:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <__vector_11>
      30:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__vector_12>
      34:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_13>
      38:	0c 94 5a 06 	jmp	0xcb4	; 0xcb4 <__vector_14>
      3c:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__vector_15>
      40:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_16>
      44:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__vector_17>
      48:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_18>
      4c:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__vector_19>
      50:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_20>
      54:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__vector_21>
      58:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <__vector_22>
      5c:	72 00       	.word	0x0072	; ????
      5e:	bb 00       	.word	0x00bb	; ????
      60:	c4 00       	.word	0x00c4	; ????
      62:	cd 00       	.word	0x00cd	; ????
      64:	d6 00       	.word	0x00d6	; ????
      66:	df 00       	.word	0x00df	; ????
      68:	e8 00       	.word	0x00e8	; ????
      6a:	f1 00       	.word	0x00f1	; ????
      6c:	fa 00       	.word	0x00fa	; ????
      6e:	03 01       	movw	r0, r6

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 ee       	ldi	r30, 0xE6	; 230
      84:	f7 e1       	ldi	r31, 0x17	; 23
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a6 30       	cpi	r26, 0x06	; 6
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	a6 e0       	ldi	r26, 0x06	; 6
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a9 35       	cpi	r26, 0x59	; 89
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
      a6:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCDInit>:
#include <stdbool.h>
#include <avr/io.h>

void LCDInit(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
      ae:	86 e3       	ldi	r24, 0x36	; 54
      b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
      b4:	87 e0       	ldi	r24, 0x07	; 7
      b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
      ba:	8f e0       	ldi	r24, 0x0F	; 15
      bc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
      c6:	8d e0       	ldi	r24, 0x0D	; 13
      c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
      cc:	08 95       	ret

000000ce <writeChar>:
}

void writeChar(char ch, int pos){
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	fc 01       	movw	r30, r24
      d2:	f0 97       	sbiw	r30, 0x30	; 48
      d4:	ea 30       	cpi	r30, 0x0A	; 10
      d6:	f1 05       	cpc	r31, r1
      d8:	08 f0       	brcs	.+2      	; 0xdc <writeChar+0xe>
      da:	4c c0       	rjmp	.+152    	; 0x174 <writeChar+0xa6>
      dc:	e2 5d       	subi	r30, 0xD2	; 210
      de:	ff 4f       	sbci	r31, 0xFF	; 255
      e0:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
      e8:	25 e0       	ldi	r18, 0x05	; 5
      ea:	30 e0       	ldi	r19, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
      ec:	45 e0       	ldi	r20, 0x05	; 5
      ee:	50 e0       	ldi	r21, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
      f0:	e1 e0       	ldi	r30, 0x01	; 1
      f2:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
      f4:	62 30       	cpi	r22, 0x02	; 2
      f6:	71 05       	cpc	r23, r1
      f8:	09 f4       	brne	.+2      	; 0xfc <writeChar+0x2e>
      fa:	c7 c0       	rjmp	.+398    	; 0x28a <writeChar+0x1bc>
      fc:	0c f4       	brge	.+2      	; 0x100 <writeChar+0x32>
      fe:	8c c0       	rjmp	.+280    	; 0x218 <writeChar+0x14a>
     100:	64 30       	cpi	r22, 0x04	; 4
     102:	71 05       	cpc	r23, r1
     104:	09 f4       	brne	.+2      	; 0x108 <writeChar+0x3a>
     106:	0b c1       	rjmp	.+534    	; 0x31e <writeChar+0x250>
     108:	0c f4       	brge	.+2      	; 0x10c <writeChar+0x3e>
     10a:	d8 c0       	rjmp	.+432    	; 0x2bc <writeChar+0x1ee>
     10c:	65 30       	cpi	r22, 0x05	; 5
     10e:	71 05       	cpc	r23, r1
     110:	09 f0       	breq	.+2      	; 0x114 <writeChar+0x46>
     112:	37 c1       	rjmp	.+622    	; 0x382 <writeChar+0x2b4>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
     114:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     118:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
     11a:	e2 95       	swap	r30
     11c:	f2 95       	swap	r31
     11e:	f0 7f       	andi	r31, 0xF0	; 240
     120:	fe 27       	eor	r31, r30
     122:	e0 7f       	andi	r30, 0xF0	; 240
     124:	fe 27       	eor	r31, r30
     126:	e6 2b       	or	r30, r22
     128:	e0 93 ee 00 	sts	0x00EE, r30	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     12c:	60 91 f3 00 	lds	r22, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     130:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     132:	42 95       	swap	r20
     134:	52 95       	swap	r21
     136:	50 7f       	andi	r21, 0xF0	; 240
     138:	54 27       	eor	r21, r20
     13a:	40 7f       	andi	r20, 0xF0	; 240
     13c:	54 27       	eor	r21, r20
     13e:	46 2b       	or	r20, r22
     140:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     144:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     148:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     14a:	22 95       	swap	r18
     14c:	32 95       	swap	r19
     14e:	30 7f       	andi	r19, 0xF0	; 240
     150:	32 27       	eor	r19, r18
     152:	20 7f       	andi	r18, 0xF0	; 240
     154:	32 27       	eor	r19, r18
     156:	24 2b       	or	r18, r20
     158:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     15c:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     160:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     162:	82 95       	swap	r24
     164:	92 95       	swap	r25
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	98 27       	eor	r25, r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	98 27       	eor	r25, r24
     16e:	82 2b       	or	r24, r18
     170:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
     174:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
     17e:	41 e0       	ldi	r20, 0x01	; 1
     180:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
     182:	e0 e0       	ldi	r30, 0x00	; 0
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b6 cf       	rjmp	.-148    	; 0xf4 <writeChar+0x26>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
     18c:	2e e0       	ldi	r18, 0x0E	; 14
     18e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     190:	41 e0       	ldi	r20, 0x01	; 1
     192:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
     194:	e1 e0       	ldi	r30, 0x01	; 1
     196:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
     198:	ad cf       	rjmp	.-166    	; 0xf4 <writeChar+0x26>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
     19e:	2b e0       	ldi	r18, 0x0B	; 11
     1a0:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     1a2:	41 e0       	ldi	r20, 0x01	; 1
     1a4:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
     1a6:	e1 e0       	ldi	r30, 0x01	; 1
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     1aa:	a4 cf       	rjmp	.-184    	; 0xf4 <writeChar+0x26>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1b0:	2b e0       	ldi	r18, 0x0B	; 11
     1b2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
     1b4:	45 e0       	ldi	r20, 0x05	; 5
     1b6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
     1b8:	e0 e0       	ldi	r30, 0x00	; 0
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
     1bc:	9b cf       	rjmp	.-202    	; 0xf4 <writeChar+0x26>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
     1c2:	2b e0       	ldi	r18, 0x0B	; 11
     1c4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1c6:	44 e0       	ldi	r20, 0x04	; 4
     1c8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
     1ca:	e1 e0       	ldi	r30, 0x01	; 1
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     1ce:	92 cf       	rjmp	.-220    	; 0xf4 <writeChar+0x26>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
     1d4:	2f e0       	ldi	r18, 0x0F	; 15
     1d6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1d8:	44 e0       	ldi	r20, 0x04	; 4
     1da:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
     1dc:	e1 e0       	ldi	r30, 0x01	; 1
     1de:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1e0:	89 cf       	rjmp	.-238    	; 0xf4 <writeChar+0x26>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     1ea:	41 e0       	ldi	r20, 0x01	; 1
     1ec:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
     1ee:	e1 e0       	ldi	r30, 0x01	; 1
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
     1f2:	80 cf       	rjmp	.-256    	; 0xf4 <writeChar+0x26>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
     1f8:	2f e0       	ldi	r18, 0x0F	; 15
     1fa:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     1fc:	45 e0       	ldi	r20, 0x05	; 5
     1fe:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
     200:	e1 e0       	ldi	r30, 0x01	; 1
     202:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     204:	77 cf       	rjmp	.-274    	; 0xf4 <writeChar+0x26>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     20a:	2b e0       	ldi	r18, 0x0B	; 11
     20c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     20e:	45 e0       	ldi	r20, 0x05	; 5
     210:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
     212:	e1 e0       	ldi	r30, 0x01	; 1
     214:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     216:	6e cf       	rjmp	.-292    	; 0xf4 <writeChar+0x26>
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
     218:	61 15       	cp	r22, r1
     21a:	71 05       	cpc	r23, r1
     21c:	09 f4       	brne	.+2      	; 0x220 <writeChar+0x152>
     21e:	98 c0       	rjmp	.+304    	; 0x350 <writeChar+0x282>
     220:	61 30       	cpi	r22, 0x01	; 1
     222:	71 05       	cpc	r23, r1
     224:	09 f0       	breq	.+2      	; 0x228 <writeChar+0x15a>
     226:	ae c0       	rjmp	.+348    	; 0x384 <writeChar+0x2b6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     228:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     22c:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     22e:	e2 95       	swap	r30
     230:	f2 95       	swap	r31
     232:	f0 7f       	andi	r31, 0xF0	; 240
     234:	fe 27       	eor	r31, r30
     236:	e0 7f       	andi	r30, 0xF0	; 240
     238:	fe 27       	eor	r31, r30
     23a:	e6 2b       	or	r30, r22
     23c:	e0 93 ec 00 	sts	0x00EC, r30	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     240:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     244:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     246:	42 95       	swap	r20
     248:	52 95       	swap	r21
     24a:	50 7f       	andi	r21, 0xF0	; 240
     24c:	54 27       	eor	r21, r20
     24e:	40 7f       	andi	r20, 0xF0	; 240
     250:	54 27       	eor	r21, r20
     252:	46 2b       	or	r20, r22
     254:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     258:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     25c:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     25e:	22 95       	swap	r18
     260:	32 95       	swap	r19
     262:	30 7f       	andi	r19, 0xF0	; 240
     264:	32 27       	eor	r19, r18
     266:	20 7f       	andi	r18, 0xF0	; 240
     268:	32 27       	eor	r19, r18
     26a:	24 2b       	or	r18, r20
     26c:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     270:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     274:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     276:	82 95       	swap	r24
     278:	92 95       	swap	r25
     27a:	90 7f       	andi	r25, 0xF0	; 240
     27c:	98 27       	eor	r25, r24
     27e:	80 7f       	andi	r24, 0xF0	; 240
     280:	98 27       	eor	r25, r24
     282:	82 2b       	or	r24, r18
     284:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     288:	08 95       	ret
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     28a:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     28e:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     290:	e6 2b       	or	r30, r22
     292:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     296:	60 91 f2 00 	lds	r22, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     29a:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     29c:	46 2b       	or	r20, r22
     29e:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     2a2:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2a6:	40 7f       	andi	r20, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     2a8:	24 2b       	or	r18, r20
     2aa:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     2ae:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2b2:	20 7f       	andi	r18, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     2b4:	82 2b       	or	r24, r18
     2b6:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     2ba:	08 95       	ret
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2bc:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2c0:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2c2:	e2 95       	swap	r30
     2c4:	f2 95       	swap	r31
     2c6:	f0 7f       	andi	r31, 0xF0	; 240
     2c8:	fe 27       	eor	r31, r30
     2ca:	e0 7f       	andi	r30, 0xF0	; 240
     2cc:	fe 27       	eor	r31, r30
     2ce:	e6 2b       	or	r30, r22
     2d0:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     2d4:	60 91 f2 00 	lds	r22, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2d8:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     2da:	42 95       	swap	r20
     2dc:	52 95       	swap	r21
     2de:	50 7f       	andi	r21, 0xF0	; 240
     2e0:	54 27       	eor	r21, r20
     2e2:	40 7f       	andi	r20, 0xF0	; 240
     2e4:	54 27       	eor	r21, r20
     2e6:	46 2b       	or	r20, r22
     2e8:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     2ec:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2f0:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     2f2:	22 95       	swap	r18
     2f4:	32 95       	swap	r19
     2f6:	30 7f       	andi	r19, 0xF0	; 240
     2f8:	32 27       	eor	r19, r18
     2fa:	20 7f       	andi	r18, 0xF0	; 240
     2fc:	32 27       	eor	r19, r18
     2fe:	24 2b       	or	r18, r20
     300:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     304:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     308:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     30a:	82 95       	swap	r24
     30c:	92 95       	swap	r25
     30e:	90 7f       	andi	r25, 0xF0	; 240
     310:	98 27       	eor	r25, r24
     312:	80 7f       	andi	r24, 0xF0	; 240
     314:	98 27       	eor	r25, r24
     316:	82 2b       	or	r24, r18
     318:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     31c:	08 95       	ret
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
     31e:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     322:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
     324:	e6 2b       	or	r30, r22
     326:	e0 93 ee 00 	sts	0x00EE, r30	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     32a:	60 91 f3 00 	lds	r22, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     32e:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     330:	46 2b       	or	r20, r22
     332:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     336:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     33a:	40 7f       	andi	r20, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     33c:	24 2b       	or	r18, r20
     33e:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     342:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     346:	20 7f       	andi	r18, 0xF0	; 240
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     348:	82 2b       	or	r24, r18
     34a:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
     34e:	08 95       	ret
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     350:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     354:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     356:	e6 2b       	or	r30, r22
     358:	e0 93 ec 00 	sts	0x00EC, r30	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     35c:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     360:	60 7f       	andi	r22, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     362:	46 2b       	or	r20, r22
     364:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     368:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     36c:	40 7f       	andi	r20, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     36e:	24 2b       	or	r18, r20
     370:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     374:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     378:	20 7f       	andi	r18, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     37a:	82 2b       	or	r24, r18
     37c:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     380:	08 95       	ret
     382:	08 95       	ret
     384:	08 95       	ret

00000386 <printAt>:
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
	
}

void printAt(long num, int pos) {
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	4b 01       	movw	r8, r22
     39c:	5c 01       	movw	r10, r24
     39e:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     3a0:	24 e6       	ldi	r18, 0x64	; 100
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__divmodsi4>
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	c2 2e       	mov	r12, r18
     3b0:	d1 2c       	mov	r13, r1
     3b2:	e1 2c       	mov	r14, r1
     3b4:	f1 2c       	mov	r15, r1
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__divmodsi4>
     3be:	be 01       	movw	r22, r28
     3c0:	80 e3       	ldi	r24, 0x30	; 48
     3c2:	82 0f       	add	r24, r18
     3c4:	0e 94 67 00 	call	0xce	; 0xce <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     3c8:	21 96       	adiw	r28, 0x01	; 1
     3ca:	c5 01       	movw	r24, r10
     3cc:	b4 01       	movw	r22, r8
     3ce:	a7 01       	movw	r20, r14
     3d0:	96 01       	movw	r18, r12
     3d2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__divmodsi4>
     3d6:	86 2f       	mov	r24, r22
     3d8:	be 01       	movw	r22, r28
     3da:	80 5d       	subi	r24, 0xD0	; 208
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	df 90       	pop	r13
     3e6:	cf 90       	pop	r12
     3e8:	bf 90       	pop	r11
     3ea:	af 90       	pop	r10
     3ec:	9f 90       	pop	r9
     3ee:	8f 90       	pop	r8

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     3f0:	0c 94 67 00 	jmp	0xce	; 0xce <writeChar>

000003f4 <main>:
#include "LCD.h"
#include <avr/io.h>


int main(void)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	00 d0       	rcall	.+0      	; 0x3fa <main+0x6>
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <main+0x8>
     3fc:	1f 92       	push	r1
     3fe:	cd b7       	in	r28, 0x3d	; 61
     400:	de b7       	in	r29, 0x3e	; 62
    pulse p = initPulse();
     402:	1d 82       	std	Y+5, r1	; 0x05
     404:	1c 82       	std	Y+4, r1	; 0x04
	addFreq(p);
     406:	1b 82       	std	Y+3, r1	; 0x03
     408:	1a 82       	std	Y+2, r1	; 0x02
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	50 e0       	ldi	r21, 0x00	; 0
     40e:	6b 81       	ldd	r22, Y+3	; 0x03
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	8d 81       	ldd	r24, Y+5	; 0x05
     414:	0e 94 1f 02 	call	0x43e	; 0x43e <addFreq>
	LCDInit();
     418:	0e 94 57 00 	call	0xae	; 0xae <LCDInit>
	printAt(p.freq, 0);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	cb 01       	movw	r24, r22
     426:	0e 94 c3 01 	call	0x386	; 0x386 <printAt>
}
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <addFreq>:
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	00 d0       	rcall	.+0      	; 0x444 <addFreq+0x6>
     444:	00 d0       	rcall	.+0      	; 0x446 <addFreq+0x8>
     446:	1f 92       	push	r1
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <dispatch>:

Thread pop(Thread *stack) {
    Thread t = *stack;
    *stack = t->next;
    return t;
}
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <dispatch+0x6>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	9a 83       	std	Y+2, r25	; 0x02
     468:	89 83       	std	Y+1, r24	; 0x01
     46a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     46e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     472:	06 96       	adiw	r24, 0x06	; 6
     474:	0e 94 b0 0b 	call	0x1760	; 0x1760 <setjmp>
     478:	89 2b       	or	r24, r25
     47a:	29 f0       	breq	.+10     	; 0x486 <dispatch+0x2a>
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     48e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	06 96       	adiw	r24, 0x06	; 6
     498:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <longjmp>

0000049c <schedule>:
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <msgQ>
     4a8:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <msgQ+0x1>
     4ac:	30 97       	sbiw	r30, 0x00	; 0
     4ae:	f1 f0       	breq	.+60     	; 0x4ec <schedule+0x50>
     4b0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     4b4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     4b8:	00 97       	sbiw	r24, 0x00	; 0
     4ba:	c1 f0       	breq	.+48     	; 0x4ec <schedule+0x50>
     4bc:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     4c0:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     4c4:	aa 81       	ldd	r26, Y+2	; 0x02
     4c6:	bb 81       	ldd	r27, Y+3	; 0x03
     4c8:	10 97       	sbiw	r26, 0x00	; 0
     4ca:	a9 f0       	breq	.+42     	; 0x4f6 <schedule+0x5a>
     4cc:	46 81       	ldd	r20, Z+6	; 0x06
     4ce:	57 81       	ldd	r21, Z+7	; 0x07
     4d0:	60 85       	ldd	r22, Z+8	; 0x08
     4d2:	71 85       	ldd	r23, Z+9	; 0x09
     4d4:	16 96       	adiw	r26, 0x06	; 6
     4d6:	0d 91       	ld	r16, X+
     4d8:	1d 91       	ld	r17, X+
     4da:	2d 91       	ld	r18, X+
     4dc:	3c 91       	ld	r19, X
     4de:	19 97       	sbiw	r26, 0x09	; 9
     4e0:	40 1b       	sub	r20, r16
     4e2:	51 0b       	sbc	r21, r17
     4e4:	62 0b       	sbc	r22, r18
     4e6:	73 0b       	sbc	r23, r19
     4e8:	77 fd       	sbrc	r23, 7
     4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <schedule+0x5a>
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret
     4f6:	fc 01       	movw	r30, r24
     4f8:	20 81       	ld	r18, Z
     4fa:	31 81       	ldd	r19, Z+1	; 0x01
     4fc:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     500:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     504:	d1 83       	std	Z+1, r29	; 0x01
     506:	c0 83       	st	Z, r28
     508:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     50c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
     516:	0f 91       	pop	r16
     518:	0c 94 2e 02 	jmp	0x45c	; 0x45c <dispatch>

0000051c <__vector_1>:
     51c:	1f 92       	push	r1
     51e:	0f 92       	push	r0
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	0f 92       	push	r0
     524:	11 24       	eor	r1, r1
     526:	2f 93       	push	r18
     528:	3f 93       	push	r19
     52a:	4f 93       	push	r20
     52c:	5f 93       	push	r21
     52e:	6f 93       	push	r22
     530:	7f 93       	push	r23
     532:	8f 93       	push	r24
     534:	9f 93       	push	r25
     536:	af 93       	push	r26
     538:	bf 93       	push	r27
     53a:	ef 93       	push	r30
     53c:	ff 93       	push	r31
     53e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     542:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     546:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     54a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     54e:	c9 01       	movw	r24, r18
     550:	03 2e       	mov	r0, r19
     552:	00 0c       	add	r0, r0
     554:	aa 0b       	sbc	r26, r26
     556:	bb 0b       	sbc	r27, r27
     558:	dc 01       	movw	r26, r24
     55a:	99 27       	eor	r25, r25
     55c:	88 27       	eor	r24, r24
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	84 2b       	or	r24, r20
     564:	95 2b       	or	r25, r21
     566:	a6 2b       	or	r26, r22
     568:	b7 2b       	or	r27, r23
     56a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     56e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     572:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     576:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     57a:	b0 9b       	sbis	0x16, 0	; 22
     57c:	1b c0       	rjmp	.+54     	; 0x5b4 <__vector_1+0x98>
     57e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     582:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     586:	c9 01       	movw	r24, r18
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	09 2e       	mov	r0, r25
     58c:	00 0c       	add	r0, r0
     58e:	aa 0b       	sbc	r26, r26
     590:	bb 0b       	sbc	r27, r27
     592:	dc 01       	movw	r26, r24
     594:	99 27       	eor	r25, r25
     596:	88 27       	eor	r24, r24
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	84 2b       	or	r24, r20
     59e:	95 2b       	or	r25, r21
     5a0:	a6 2b       	or	r26, r22
     5a2:	b7 2b       	or	r27, r23
     5a4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     5a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     5ac:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     5b0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     5b4:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <mtable>
     5b8:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <mtable+0x1>
     5bc:	30 97       	sbiw	r30, 0x00	; 0
     5be:	39 f0       	breq	.+14     	; 0x5ce <__vector_1+0xb2>
     5c0:	60 e0       	ldi	r22, 0x00	; 0
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <otable>
     5c8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <otable+0x1>
     5cc:	09 95       	icall
     5ce:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	0f 90       	pop	r0
     5f0:	1f 90       	pop	r1
     5f2:	18 95       	reti

000005f4 <__vector_2>:
     5f4:	1f 92       	push	r1
     5f6:	0f 92       	push	r0
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	0f 92       	push	r0
     5fc:	11 24       	eor	r1, r1
     5fe:	2f 93       	push	r18
     600:	3f 93       	push	r19
     602:	4f 93       	push	r20
     604:	5f 93       	push	r21
     606:	6f 93       	push	r22
     608:	7f 93       	push	r23
     60a:	8f 93       	push	r24
     60c:	9f 93       	push	r25
     60e:	af 93       	push	r26
     610:	bf 93       	push	r27
     612:	ef 93       	push	r30
     614:	ff 93       	push	r31
     616:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     61a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     61e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     622:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     626:	c9 01       	movw	r24, r18
     628:	03 2e       	mov	r0, r19
     62a:	00 0c       	add	r0, r0
     62c:	aa 0b       	sbc	r26, r26
     62e:	bb 0b       	sbc	r27, r27
     630:	dc 01       	movw	r26, r24
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	84 2b       	or	r24, r20
     63c:	95 2b       	or	r25, r21
     63e:	a6 2b       	or	r26, r22
     640:	b7 2b       	or	r27, r23
     642:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     646:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     64a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     64e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     652:	b0 9b       	sbis	0x16, 0	; 22
     654:	1b c0       	rjmp	.+54     	; 0x68c <__vector_2+0x98>
     656:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     65a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     65e:	c9 01       	movw	r24, r18
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	09 2e       	mov	r0, r25
     664:	00 0c       	add	r0, r0
     666:	aa 0b       	sbc	r26, r26
     668:	bb 0b       	sbc	r27, r27
     66a:	dc 01       	movw	r26, r24
     66c:	99 27       	eor	r25, r25
     66e:	88 27       	eor	r24, r24
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	84 2b       	or	r24, r20
     676:	95 2b       	or	r25, r21
     678:	a6 2b       	or	r26, r22
     67a:	b7 2b       	or	r27, r23
     67c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     680:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     684:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     688:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     68c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <mtable+0x2>
     690:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <mtable+0x3>
     694:	30 97       	sbiw	r30, 0x00	; 0
     696:	39 f0       	breq	.+14     	; 0x6a6 <__vector_2+0xb2>
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <otable+0x2>
     6a0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <otable+0x3>
     6a4:	09 95       	icall
     6a6:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     6aa:	ff 91       	pop	r31
     6ac:	ef 91       	pop	r30
     6ae:	bf 91       	pop	r27
     6b0:	af 91       	pop	r26
     6b2:	9f 91       	pop	r25
     6b4:	8f 91       	pop	r24
     6b6:	7f 91       	pop	r23
     6b8:	6f 91       	pop	r22
     6ba:	5f 91       	pop	r21
     6bc:	4f 91       	pop	r20
     6be:	3f 91       	pop	r19
     6c0:	2f 91       	pop	r18
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <__vector_3>:
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	2f 93       	push	r18
     6d8:	3f 93       	push	r19
     6da:	4f 93       	push	r20
     6dc:	5f 93       	push	r21
     6de:	6f 93       	push	r22
     6e0:	7f 93       	push	r23
     6e2:	8f 93       	push	r24
     6e4:	9f 93       	push	r25
     6e6:	af 93       	push	r26
     6e8:	bf 93       	push	r27
     6ea:	ef 93       	push	r30
     6ec:	ff 93       	push	r31
     6ee:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     6f2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     6f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     6fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     6fe:	c9 01       	movw	r24, r18
     700:	03 2e       	mov	r0, r19
     702:	00 0c       	add	r0, r0
     704:	aa 0b       	sbc	r26, r26
     706:	bb 0b       	sbc	r27, r27
     708:	dc 01       	movw	r26, r24
     70a:	99 27       	eor	r25, r25
     70c:	88 27       	eor	r24, r24
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	84 2b       	or	r24, r20
     714:	95 2b       	or	r25, r21
     716:	a6 2b       	or	r26, r22
     718:	b7 2b       	or	r27, r23
     71a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     71e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     722:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     726:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     72a:	b0 9b       	sbis	0x16, 0	; 22
     72c:	1b c0       	rjmp	.+54     	; 0x764 <__vector_3+0x98>
     72e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     732:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     736:	c9 01       	movw	r24, r18
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	09 2e       	mov	r0, r25
     73c:	00 0c       	add	r0, r0
     73e:	aa 0b       	sbc	r26, r26
     740:	bb 0b       	sbc	r27, r27
     742:	dc 01       	movw	r26, r24
     744:	99 27       	eor	r25, r25
     746:	88 27       	eor	r24, r24
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	84 2b       	or	r24, r20
     74e:	95 2b       	or	r25, r21
     750:	a6 2b       	or	r26, r22
     752:	b7 2b       	or	r27, r23
     754:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     758:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     75c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     760:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     764:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <mtable+0x4>
     768:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <mtable+0x5>
     76c:	30 97       	sbiw	r30, 0x00	; 0
     76e:	39 f0       	breq	.+14     	; 0x77e <__vector_3+0xb2>
     770:	62 e0       	ldi	r22, 0x02	; 2
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <otable+0x4>
     778:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <otable+0x5>
     77c:	09 95       	icall
     77e:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     782:	ff 91       	pop	r31
     784:	ef 91       	pop	r30
     786:	bf 91       	pop	r27
     788:	af 91       	pop	r26
     78a:	9f 91       	pop	r25
     78c:	8f 91       	pop	r24
     78e:	7f 91       	pop	r23
     790:	6f 91       	pop	r22
     792:	5f 91       	pop	r21
     794:	4f 91       	pop	r20
     796:	3f 91       	pop	r19
     798:	2f 91       	pop	r18
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_4>:
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	2f 93       	push	r18
     7b0:	3f 93       	push	r19
     7b2:	4f 93       	push	r20
     7b4:	5f 93       	push	r21
     7b6:	6f 93       	push	r22
     7b8:	7f 93       	push	r23
     7ba:	8f 93       	push	r24
     7bc:	9f 93       	push	r25
     7be:	af 93       	push	r26
     7c0:	bf 93       	push	r27
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
     7c6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     7ca:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     7ce:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7d2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7d6:	c9 01       	movw	r24, r18
     7d8:	03 2e       	mov	r0, r19
     7da:	00 0c       	add	r0, r0
     7dc:	aa 0b       	sbc	r26, r26
     7de:	bb 0b       	sbc	r27, r27
     7e0:	dc 01       	movw	r26, r24
     7e2:	99 27       	eor	r25, r25
     7e4:	88 27       	eor	r24, r24
     7e6:	60 e0       	ldi	r22, 0x00	; 0
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	84 2b       	or	r24, r20
     7ec:	95 2b       	or	r25, r21
     7ee:	a6 2b       	or	r26, r22
     7f0:	b7 2b       	or	r27, r23
     7f2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     7f6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     7fa:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     7fe:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     802:	b0 9b       	sbis	0x16, 0	; 22
     804:	1b c0       	rjmp	.+54     	; 0x83c <__vector_4+0x98>
     806:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     80a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     80e:	c9 01       	movw	r24, r18
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	09 2e       	mov	r0, r25
     814:	00 0c       	add	r0, r0
     816:	aa 0b       	sbc	r26, r26
     818:	bb 0b       	sbc	r27, r27
     81a:	dc 01       	movw	r26, r24
     81c:	99 27       	eor	r25, r25
     81e:	88 27       	eor	r24, r24
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	84 2b       	or	r24, r20
     826:	95 2b       	or	r25, r21
     828:	a6 2b       	or	r26, r22
     82a:	b7 2b       	or	r27, r23
     82c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     830:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     834:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     838:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     83c:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <mtable+0x6>
     840:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <mtable+0x7>
     844:	30 97       	sbiw	r30, 0x00	; 0
     846:	39 f0       	breq	.+14     	; 0x856 <__vector_4+0xb2>
     848:	63 e0       	ldi	r22, 0x03	; 3
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <otable+0x6>
     850:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <otable+0x7>
     854:	09 95       	icall
     856:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     85a:	ff 91       	pop	r31
     85c:	ef 91       	pop	r30
     85e:	bf 91       	pop	r27
     860:	af 91       	pop	r26
     862:	9f 91       	pop	r25
     864:	8f 91       	pop	r24
     866:	7f 91       	pop	r23
     868:	6f 91       	pop	r22
     86a:	5f 91       	pop	r21
     86c:	4f 91       	pop	r20
     86e:	3f 91       	pop	r19
     870:	2f 91       	pop	r18
     872:	0f 90       	pop	r0
     874:	0f be       	out	0x3f, r0	; 63
     876:	0f 90       	pop	r0
     878:	1f 90       	pop	r1
     87a:	18 95       	reti

0000087c <__vector_5>:
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	5f 93       	push	r21
     88e:	6f 93       	push	r22
     890:	7f 93       	push	r23
     892:	8f 93       	push	r24
     894:	9f 93       	push	r25
     896:	af 93       	push	r26
     898:	bf 93       	push	r27
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
     89e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     8a2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     8a6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8aa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8ae:	c9 01       	movw	r24, r18
     8b0:	03 2e       	mov	r0, r19
     8b2:	00 0c       	add	r0, r0
     8b4:	aa 0b       	sbc	r26, r26
     8b6:	bb 0b       	sbc	r27, r27
     8b8:	dc 01       	movw	r26, r24
     8ba:	99 27       	eor	r25, r25
     8bc:	88 27       	eor	r24, r24
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	84 2b       	or	r24, r20
     8c4:	95 2b       	or	r25, r21
     8c6:	a6 2b       	or	r26, r22
     8c8:	b7 2b       	or	r27, r23
     8ca:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     8ce:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     8d2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     8d6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     8da:	b0 9b       	sbis	0x16, 0	; 22
     8dc:	1b c0       	rjmp	.+54     	; 0x914 <__vector_5+0x98>
     8de:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     8e2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     8e6:	c9 01       	movw	r24, r18
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	09 2e       	mov	r0, r25
     8ec:	00 0c       	add	r0, r0
     8ee:	aa 0b       	sbc	r26, r26
     8f0:	bb 0b       	sbc	r27, r27
     8f2:	dc 01       	movw	r26, r24
     8f4:	99 27       	eor	r25, r25
     8f6:	88 27       	eor	r24, r24
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	84 2b       	or	r24, r20
     8fe:	95 2b       	or	r25, r21
     900:	a6 2b       	or	r26, r22
     902:	b7 2b       	or	r27, r23
     904:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     908:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     90c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     910:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     914:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable+0x8>
     918:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x9>
     91c:	30 97       	sbiw	r30, 0x00	; 0
     91e:	39 f0       	breq	.+14     	; 0x92e <__vector_5+0xb2>
     920:	64 e0       	ldi	r22, 0x04	; 4
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable+0x8>
     928:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x9>
     92c:	09 95       	icall
     92e:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <__vector_10>:
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
     976:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     97a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     97e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     982:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     986:	c9 01       	movw	r24, r18
     988:	03 2e       	mov	r0, r19
     98a:	00 0c       	add	r0, r0
     98c:	aa 0b       	sbc	r26, r26
     98e:	bb 0b       	sbc	r27, r27
     990:	dc 01       	movw	r26, r24
     992:	99 27       	eor	r25, r25
     994:	88 27       	eor	r24, r24
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	84 2b       	or	r24, r20
     99c:	95 2b       	or	r25, r21
     99e:	a6 2b       	or	r26, r22
     9a0:	b7 2b       	or	r27, r23
     9a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     9a6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     9aa:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     9ae:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     9b2:	b0 9b       	sbis	0x16, 0	; 22
     9b4:	1b c0       	rjmp	.+54     	; 0x9ec <__vector_10+0x98>
     9b6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9ba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9be:	c9 01       	movw	r24, r18
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	09 2e       	mov	r0, r25
     9c4:	00 0c       	add	r0, r0
     9c6:	aa 0b       	sbc	r26, r26
     9c8:	bb 0b       	sbc	r27, r27
     9ca:	dc 01       	movw	r26, r24
     9cc:	99 27       	eor	r25, r25
     9ce:	88 27       	eor	r24, r24
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	70 e0       	ldi	r23, 0x00	; 0
     9d4:	84 2b       	or	r24, r20
     9d6:	95 2b       	or	r25, r21
     9d8:	a6 2b       	or	r26, r22
     9da:	b7 2b       	or	r27, r23
     9dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     9e0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     9e4:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     9e8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     9ec:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0xa>
     9f0:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0xb>
     9f4:	30 97       	sbiw	r30, 0x00	; 0
     9f6:	39 f0       	breq	.+14     	; 0xa06 <__vector_10+0xb2>
     9f8:	65 e0       	ldi	r22, 0x05	; 5
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0xa>
     a00:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0xb>
     a04:	09 95       	icall
     a06:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_11>:
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	2f 93       	push	r18
     a38:	3f 93       	push	r19
     a3a:	4f 93       	push	r20
     a3c:	5f 93       	push	r21
     a3e:	6f 93       	push	r22
     a40:	7f 93       	push	r23
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	af 93       	push	r26
     a48:	bf 93       	push	r27
     a4a:	ef 93       	push	r30
     a4c:	ff 93       	push	r31
     a4e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     a52:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     a56:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a5a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a5e:	c9 01       	movw	r24, r18
     a60:	03 2e       	mov	r0, r19
     a62:	00 0c       	add	r0, r0
     a64:	aa 0b       	sbc	r26, r26
     a66:	bb 0b       	sbc	r27, r27
     a68:	dc 01       	movw	r26, r24
     a6a:	99 27       	eor	r25, r25
     a6c:	88 27       	eor	r24, r24
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	84 2b       	or	r24, r20
     a74:	95 2b       	or	r25, r21
     a76:	a6 2b       	or	r26, r22
     a78:	b7 2b       	or	r27, r23
     a7a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     a7e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     a82:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     a86:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     a8a:	b0 9b       	sbis	0x16, 0	; 22
     a8c:	1b c0       	rjmp	.+54     	; 0xac4 <__vector_11+0x98>
     a8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a96:	c9 01       	movw	r24, r18
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	09 2e       	mov	r0, r25
     a9c:	00 0c       	add	r0, r0
     a9e:	aa 0b       	sbc	r26, r26
     aa0:	bb 0b       	sbc	r27, r27
     aa2:	dc 01       	movw	r26, r24
     aa4:	99 27       	eor	r25, r25
     aa6:	88 27       	eor	r24, r24
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	84 2b       	or	r24, r20
     aae:	95 2b       	or	r25, r21
     ab0:	a6 2b       	or	r26, r22
     ab2:	b7 2b       	or	r27, r23
     ab4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     ab8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     abc:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     ac0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     ac4:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0xc>
     ac8:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0xd>
     acc:	30 97       	sbiw	r30, 0x00	; 0
     ace:	39 f0       	breq	.+14     	; 0xade <__vector_11+0xb2>
     ad0:	66 e0       	ldi	r22, 0x06	; 6
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0xc>
     ad8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0xd>
     adc:	09 95       	icall
     ade:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	bf 91       	pop	r27
     ae8:	af 91       	pop	r26
     aea:	9f 91       	pop	r25
     aec:	8f 91       	pop	r24
     aee:	7f 91       	pop	r23
     af0:	6f 91       	pop	r22
     af2:	5f 91       	pop	r21
     af4:	4f 91       	pop	r20
     af6:	3f 91       	pop	r19
     af8:	2f 91       	pop	r18
     afa:	0f 90       	pop	r0
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	0f 90       	pop	r0
     b00:	1f 90       	pop	r1
     b02:	18 95       	reti

00000b04 <__vector_12>:
     b04:	1f 92       	push	r1
     b06:	0f 92       	push	r0
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	0f 92       	push	r0
     b0c:	11 24       	eor	r1, r1
     b0e:	2f 93       	push	r18
     b10:	3f 93       	push	r19
     b12:	4f 93       	push	r20
     b14:	5f 93       	push	r21
     b16:	6f 93       	push	r22
     b18:	7f 93       	push	r23
     b1a:	8f 93       	push	r24
     b1c:	9f 93       	push	r25
     b1e:	af 93       	push	r26
     b20:	bf 93       	push	r27
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
     b26:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     b2a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     b2e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b32:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b36:	c9 01       	movw	r24, r18
     b38:	03 2e       	mov	r0, r19
     b3a:	00 0c       	add	r0, r0
     b3c:	aa 0b       	sbc	r26, r26
     b3e:	bb 0b       	sbc	r27, r27
     b40:	dc 01       	movw	r26, r24
     b42:	99 27       	eor	r25, r25
     b44:	88 27       	eor	r24, r24
     b46:	60 e0       	ldi	r22, 0x00	; 0
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	84 2b       	or	r24, r20
     b4c:	95 2b       	or	r25, r21
     b4e:	a6 2b       	or	r26, r22
     b50:	b7 2b       	or	r27, r23
     b52:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     b56:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     b5a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     b5e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     b62:	b0 9b       	sbis	0x16, 0	; 22
     b64:	1b c0       	rjmp	.+54     	; 0xb9c <__vector_12+0x98>
     b66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b6e:	c9 01       	movw	r24, r18
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	09 2e       	mov	r0, r25
     b74:	00 0c       	add	r0, r0
     b76:	aa 0b       	sbc	r26, r26
     b78:	bb 0b       	sbc	r27, r27
     b7a:	dc 01       	movw	r26, r24
     b7c:	99 27       	eor	r25, r25
     b7e:	88 27       	eor	r24, r24
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	84 2b       	or	r24, r20
     b86:	95 2b       	or	r25, r21
     b88:	a6 2b       	or	r26, r22
     b8a:	b7 2b       	or	r27, r23
     b8c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     b90:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     b94:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     b98:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     b9c:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0xe>
     ba0:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0xf>
     ba4:	30 97       	sbiw	r30, 0x00	; 0
     ba6:	39 f0       	breq	.+14     	; 0xbb6 <__vector_12+0xb2>
     ba8:	67 e0       	ldi	r22, 0x07	; 7
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0xe>
     bb0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0xf>
     bb4:	09 95       	icall
     bb6:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     bba:	ff 91       	pop	r31
     bbc:	ef 91       	pop	r30
     bbe:	bf 91       	pop	r27
     bc0:	af 91       	pop	r26
     bc2:	9f 91       	pop	r25
     bc4:	8f 91       	pop	r24
     bc6:	7f 91       	pop	r23
     bc8:	6f 91       	pop	r22
     bca:	5f 91       	pop	r21
     bcc:	4f 91       	pop	r20
     bce:	3f 91       	pop	r19
     bd0:	2f 91       	pop	r18
     bd2:	0f 90       	pop	r0
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	0f 90       	pop	r0
     bd8:	1f 90       	pop	r1
     bda:	18 95       	reti

00000bdc <__vector_13>:
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     c02:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     c06:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c0a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c0e:	c9 01       	movw	r24, r18
     c10:	03 2e       	mov	r0, r19
     c12:	00 0c       	add	r0, r0
     c14:	aa 0b       	sbc	r26, r26
     c16:	bb 0b       	sbc	r27, r27
     c18:	dc 01       	movw	r26, r24
     c1a:	99 27       	eor	r25, r25
     c1c:	88 27       	eor	r24, r24
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	84 2b       	or	r24, r20
     c24:	95 2b       	or	r25, r21
     c26:	a6 2b       	or	r26, r22
     c28:	b7 2b       	or	r27, r23
     c2a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     c2e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     c32:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     c36:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     c3a:	b0 9b       	sbis	0x16, 0	; 22
     c3c:	1b c0       	rjmp	.+54     	; 0xc74 <__vector_13+0x98>
     c3e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c42:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c46:	c9 01       	movw	r24, r18
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	09 2e       	mov	r0, r25
     c4c:	00 0c       	add	r0, r0
     c4e:	aa 0b       	sbc	r26, r26
     c50:	bb 0b       	sbc	r27, r27
     c52:	dc 01       	movw	r26, r24
     c54:	99 27       	eor	r25, r25
     c56:	88 27       	eor	r24, r24
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	84 2b       	or	r24, r20
     c5e:	95 2b       	or	r25, r21
     c60:	a6 2b       	or	r26, r22
     c62:	b7 2b       	or	r27, r23
     c64:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     c68:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     c6c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     c70:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     c74:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x10>
     c78:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x11>
     c7c:	30 97       	sbiw	r30, 0x00	; 0
     c7e:	39 f0       	breq	.+14     	; 0xc8e <__vector_13+0xb2>
     c80:	68 e0       	ldi	r22, 0x08	; 8
     c82:	70 e0       	ldi	r23, 0x00	; 0
     c84:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x10>
     c88:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x11>
     c8c:	09 95       	icall
     c8e:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     c92:	ff 91       	pop	r31
     c94:	ef 91       	pop	r30
     c96:	bf 91       	pop	r27
     c98:	af 91       	pop	r26
     c9a:	9f 91       	pop	r25
     c9c:	8f 91       	pop	r24
     c9e:	7f 91       	pop	r23
     ca0:	6f 91       	pop	r22
     ca2:	5f 91       	pop	r21
     ca4:	4f 91       	pop	r20
     ca6:	3f 91       	pop	r19
     ca8:	2f 91       	pop	r18
     caa:	0f 90       	pop	r0
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	0f 90       	pop	r0
     cb0:	1f 90       	pop	r1
     cb2:	18 95       	reti

00000cb4 <__vector_14>:
     cb4:	1f 92       	push	r1
     cb6:	0f 92       	push	r0
     cb8:	0f b6       	in	r0, 0x3f	; 63
     cba:	0f 92       	push	r0
     cbc:	11 24       	eor	r1, r1
     cbe:	2f 93       	push	r18
     cc0:	3f 93       	push	r19
     cc2:	4f 93       	push	r20
     cc4:	5f 93       	push	r21
     cc6:	6f 93       	push	r22
     cc8:	7f 93       	push	r23
     cca:	8f 93       	push	r24
     ccc:	9f 93       	push	r25
     cce:	af 93       	push	r26
     cd0:	bf 93       	push	r27
     cd2:	ef 93       	push	r30
     cd4:	ff 93       	push	r31
     cd6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     cda:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     cde:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ce2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ce6:	c9 01       	movw	r24, r18
     ce8:	03 2e       	mov	r0, r19
     cea:	00 0c       	add	r0, r0
     cec:	aa 0b       	sbc	r26, r26
     cee:	bb 0b       	sbc	r27, r27
     cf0:	dc 01       	movw	r26, r24
     cf2:	99 27       	eor	r25, r25
     cf4:	88 27       	eor	r24, r24
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	84 2b       	or	r24, r20
     cfc:	95 2b       	or	r25, r21
     cfe:	a6 2b       	or	r26, r22
     d00:	b7 2b       	or	r27, r23
     d02:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     d06:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     d0a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     d0e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     d12:	b0 9b       	sbis	0x16, 0	; 22
     d14:	1b c0       	rjmp	.+54     	; 0xd4c <__vector_14+0x98>
     d16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d1e:	c9 01       	movw	r24, r18
     d20:	01 96       	adiw	r24, 0x01	; 1
     d22:	09 2e       	mov	r0, r25
     d24:	00 0c       	add	r0, r0
     d26:	aa 0b       	sbc	r26, r26
     d28:	bb 0b       	sbc	r27, r27
     d2a:	dc 01       	movw	r26, r24
     d2c:	99 27       	eor	r25, r25
     d2e:	88 27       	eor	r24, r24
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	84 2b       	or	r24, r20
     d36:	95 2b       	or	r25, r21
     d38:	a6 2b       	or	r26, r22
     d3a:	b7 2b       	or	r27, r23
     d3c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     d40:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     d44:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     d48:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     d4c:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0x12>
     d50:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0x13>
     d54:	30 97       	sbiw	r30, 0x00	; 0
     d56:	39 f0       	breq	.+14     	; 0xd66 <__vector_14+0xb2>
     d58:	69 e0       	ldi	r22, 0x09	; 9
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0x12>
     d60:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0x13>
     d64:	09 95       	icall
     d66:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <__vector_15>:
     d8c:	1f 92       	push	r1
     d8e:	0f 92       	push	r0
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	0f 92       	push	r0
     d94:	11 24       	eor	r1, r1
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
     dae:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     db2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     db6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     dba:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     dbe:	c9 01       	movw	r24, r18
     dc0:	03 2e       	mov	r0, r19
     dc2:	00 0c       	add	r0, r0
     dc4:	aa 0b       	sbc	r26, r26
     dc6:	bb 0b       	sbc	r27, r27
     dc8:	dc 01       	movw	r26, r24
     dca:	99 27       	eor	r25, r25
     dcc:	88 27       	eor	r24, r24
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	84 2b       	or	r24, r20
     dd4:	95 2b       	or	r25, r21
     dd6:	a6 2b       	or	r26, r22
     dd8:	b7 2b       	or	r27, r23
     dda:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     dde:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     de2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     de6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     dea:	b0 9b       	sbis	0x16, 0	; 22
     dec:	1b c0       	rjmp	.+54     	; 0xe24 <__vector_15+0x98>
     dee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     df2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     df6:	c9 01       	movw	r24, r18
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	09 2e       	mov	r0, r25
     dfc:	00 0c       	add	r0, r0
     dfe:	aa 0b       	sbc	r26, r26
     e00:	bb 0b       	sbc	r27, r27
     e02:	dc 01       	movw	r26, r24
     e04:	99 27       	eor	r25, r25
     e06:	88 27       	eor	r24, r24
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	84 2b       	or	r24, r20
     e0e:	95 2b       	or	r25, r21
     e10:	a6 2b       	or	r26, r22
     e12:	b7 2b       	or	r27, r23
     e14:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     e18:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     e1c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     e20:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     e24:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0x14>
     e28:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0x15>
     e2c:	30 97       	sbiw	r30, 0x00	; 0
     e2e:	39 f0       	breq	.+14     	; 0xe3e <__vector_15+0xb2>
     e30:	6a e0       	ldi	r22, 0x0A	; 10
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0x14>
     e38:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0x15>
     e3c:	09 95       	icall
     e3e:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     e42:	ff 91       	pop	r31
     e44:	ef 91       	pop	r30
     e46:	bf 91       	pop	r27
     e48:	af 91       	pop	r26
     e4a:	9f 91       	pop	r25
     e4c:	8f 91       	pop	r24
     e4e:	7f 91       	pop	r23
     e50:	6f 91       	pop	r22
     e52:	5f 91       	pop	r21
     e54:	4f 91       	pop	r20
     e56:	3f 91       	pop	r19
     e58:	2f 91       	pop	r18
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_16>:
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	ef 93       	push	r30
     e84:	ff 93       	push	r31
     e86:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     e8a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     e8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e96:	c9 01       	movw	r24, r18
     e98:	03 2e       	mov	r0, r19
     e9a:	00 0c       	add	r0, r0
     e9c:	aa 0b       	sbc	r26, r26
     e9e:	bb 0b       	sbc	r27, r27
     ea0:	dc 01       	movw	r26, r24
     ea2:	99 27       	eor	r25, r25
     ea4:	88 27       	eor	r24, r24
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	84 2b       	or	r24, r20
     eac:	95 2b       	or	r25, r21
     eae:	a6 2b       	or	r26, r22
     eb0:	b7 2b       	or	r27, r23
     eb2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     eb6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     eba:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     ebe:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     ec2:	b0 9b       	sbis	0x16, 0	; 22
     ec4:	1b c0       	rjmp	.+54     	; 0xefc <__vector_16+0x98>
     ec6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     eca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ece:	c9 01       	movw	r24, r18
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	09 2e       	mov	r0, r25
     ed4:	00 0c       	add	r0, r0
     ed6:	aa 0b       	sbc	r26, r26
     ed8:	bb 0b       	sbc	r27, r27
     eda:	dc 01       	movw	r26, r24
     edc:	99 27       	eor	r25, r25
     ede:	88 27       	eor	r24, r24
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	84 2b       	or	r24, r20
     ee6:	95 2b       	or	r25, r21
     ee8:	a6 2b       	or	r26, r22
     eea:	b7 2b       	or	r27, r23
     eec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     ef0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     ef4:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     ef8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     efc:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0x16>
     f00:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x17>
     f04:	30 97       	sbiw	r30, 0x00	; 0
     f06:	39 f0       	breq	.+14     	; 0xf16 <__vector_16+0xb2>
     f08:	6b e0       	ldi	r22, 0x0B	; 11
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0x16>
     f10:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x17>
     f14:	09 95       	icall
     f16:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     f1a:	ff 91       	pop	r31
     f1c:	ef 91       	pop	r30
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <__vector_17>:
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
     f5e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
     f62:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
     f66:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f6a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f6e:	c9 01       	movw	r24, r18
     f70:	03 2e       	mov	r0, r19
     f72:	00 0c       	add	r0, r0
     f74:	aa 0b       	sbc	r26, r26
     f76:	bb 0b       	sbc	r27, r27
     f78:	dc 01       	movw	r26, r24
     f7a:	99 27       	eor	r25, r25
     f7c:	88 27       	eor	r24, r24
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	84 2b       	or	r24, r20
     f84:	95 2b       	or	r25, r21
     f86:	a6 2b       	or	r26, r22
     f88:	b7 2b       	or	r27, r23
     f8a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     f8e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     f92:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     f96:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     f9a:	b0 9b       	sbis	0x16, 0	; 22
     f9c:	1b c0       	rjmp	.+54     	; 0xfd4 <__vector_17+0x98>
     f9e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fa2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fa6:	c9 01       	movw	r24, r18
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	09 2e       	mov	r0, r25
     fac:	00 0c       	add	r0, r0
     fae:	aa 0b       	sbc	r26, r26
     fb0:	bb 0b       	sbc	r27, r27
     fb2:	dc 01       	movw	r26, r24
     fb4:	99 27       	eor	r25, r25
     fb6:	88 27       	eor	r24, r24
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	84 2b       	or	r24, r20
     fbe:	95 2b       	or	r25, r21
     fc0:	a6 2b       	or	r26, r22
     fc2:	b7 2b       	or	r27, r23
     fc4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
     fc8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
     fcc:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
     fd0:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
     fd4:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x18>
     fd8:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x19>
     fdc:	30 97       	sbiw	r30, 0x00	; 0
     fde:	39 f0       	breq	.+14     	; 0xfee <__vector_17+0xb2>
     fe0:	6c e0       	ldi	r22, 0x0C	; 12
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x18>
     fe8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x19>
     fec:	09 95       	icall
     fee:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	0f 90       	pop	r0
    1010:	1f 90       	pop	r1
    1012:	18 95       	reti

00001014 <__vector_18>:
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	2f 93       	push	r18
    1020:	3f 93       	push	r19
    1022:	4f 93       	push	r20
    1024:	5f 93       	push	r21
    1026:	6f 93       	push	r22
    1028:	7f 93       	push	r23
    102a:	8f 93       	push	r24
    102c:	9f 93       	push	r25
    102e:	af 93       	push	r26
    1030:	bf 93       	push	r27
    1032:	ef 93       	push	r30
    1034:	ff 93       	push	r31
    1036:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    103a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    103e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1042:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1046:	c9 01       	movw	r24, r18
    1048:	03 2e       	mov	r0, r19
    104a:	00 0c       	add	r0, r0
    104c:	aa 0b       	sbc	r26, r26
    104e:	bb 0b       	sbc	r27, r27
    1050:	dc 01       	movw	r26, r24
    1052:	99 27       	eor	r25, r25
    1054:	88 27       	eor	r24, r24
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	84 2b       	or	r24, r20
    105c:	95 2b       	or	r25, r21
    105e:	a6 2b       	or	r26, r22
    1060:	b7 2b       	or	r27, r23
    1062:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1066:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    106a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    106e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1072:	b0 9b       	sbis	0x16, 0	; 22
    1074:	1b c0       	rjmp	.+54     	; 0x10ac <__vector_18+0x98>
    1076:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    107a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    107e:	c9 01       	movw	r24, r18
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	09 2e       	mov	r0, r25
    1084:	00 0c       	add	r0, r0
    1086:	aa 0b       	sbc	r26, r26
    1088:	bb 0b       	sbc	r27, r27
    108a:	dc 01       	movw	r26, r24
    108c:	99 27       	eor	r25, r25
    108e:	88 27       	eor	r24, r24
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	84 2b       	or	r24, r20
    1096:	95 2b       	or	r25, r21
    1098:	a6 2b       	or	r26, r22
    109a:	b7 2b       	or	r27, r23
    109c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    10a0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    10a4:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    10a8:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    10ac:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x1a>
    10b0:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x1b>
    10b4:	30 97       	sbiw	r30, 0x00	; 0
    10b6:	39 f0       	breq	.+14     	; 0x10c6 <__vector_18+0xb2>
    10b8:	6d e0       	ldi	r22, 0x0D	; 13
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x1a>
    10c0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x1b>
    10c4:	09 95       	icall
    10c6:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
    10ca:	ff 91       	pop	r31
    10cc:	ef 91       	pop	r30
    10ce:	bf 91       	pop	r27
    10d0:	af 91       	pop	r26
    10d2:	9f 91       	pop	r25
    10d4:	8f 91       	pop	r24
    10d6:	7f 91       	pop	r23
    10d8:	6f 91       	pop	r22
    10da:	5f 91       	pop	r21
    10dc:	4f 91       	pop	r20
    10de:	3f 91       	pop	r19
    10e0:	2f 91       	pop	r18
    10e2:	0f 90       	pop	r0
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	0f 90       	pop	r0
    10e8:	1f 90       	pop	r1
    10ea:	18 95       	reti

000010ec <__vector_19>:
    10ec:	1f 92       	push	r1
    10ee:	0f 92       	push	r0
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	0f 92       	push	r0
    10f4:	11 24       	eor	r1, r1
    10f6:	2f 93       	push	r18
    10f8:	3f 93       	push	r19
    10fa:	4f 93       	push	r20
    10fc:	5f 93       	push	r21
    10fe:	6f 93       	push	r22
    1100:	7f 93       	push	r23
    1102:	8f 93       	push	r24
    1104:	9f 93       	push	r25
    1106:	af 93       	push	r26
    1108:	bf 93       	push	r27
    110a:	ef 93       	push	r30
    110c:	ff 93       	push	r31
    110e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    1112:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    1116:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    111a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    111e:	c9 01       	movw	r24, r18
    1120:	03 2e       	mov	r0, r19
    1122:	00 0c       	add	r0, r0
    1124:	aa 0b       	sbc	r26, r26
    1126:	bb 0b       	sbc	r27, r27
    1128:	dc 01       	movw	r26, r24
    112a:	99 27       	eor	r25, r25
    112c:	88 27       	eor	r24, r24
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	84 2b       	or	r24, r20
    1134:	95 2b       	or	r25, r21
    1136:	a6 2b       	or	r26, r22
    1138:	b7 2b       	or	r27, r23
    113a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    113e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1142:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1146:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    114a:	b0 9b       	sbis	0x16, 0	; 22
    114c:	1b c0       	rjmp	.+54     	; 0x1184 <__vector_19+0x98>
    114e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1152:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1156:	c9 01       	movw	r24, r18
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	09 2e       	mov	r0, r25
    115c:	00 0c       	add	r0, r0
    115e:	aa 0b       	sbc	r26, r26
    1160:	bb 0b       	sbc	r27, r27
    1162:	dc 01       	movw	r26, r24
    1164:	99 27       	eor	r25, r25
    1166:	88 27       	eor	r24, r24
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	84 2b       	or	r24, r20
    116e:	95 2b       	or	r25, r21
    1170:	a6 2b       	or	r26, r22
    1172:	b7 2b       	or	r27, r23
    1174:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1178:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    117c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1180:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1184:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x1c>
    1188:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x1d>
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	39 f0       	breq	.+14     	; 0x119e <__vector_19+0xb2>
    1190:	6e e0       	ldi	r22, 0x0E	; 14
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x1c>
    1198:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x1d>
    119c:	09 95       	icall
    119e:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	0f 90       	pop	r0
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	0f 90       	pop	r0
    11c0:	1f 90       	pop	r1
    11c2:	18 95       	reti

000011c4 <__vector_20>:
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    11ea:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    11ee:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11f2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11f6:	c9 01       	movw	r24, r18
    11f8:	03 2e       	mov	r0, r19
    11fa:	00 0c       	add	r0, r0
    11fc:	aa 0b       	sbc	r26, r26
    11fe:	bb 0b       	sbc	r27, r27
    1200:	dc 01       	movw	r26, r24
    1202:	99 27       	eor	r25, r25
    1204:	88 27       	eor	r24, r24
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	84 2b       	or	r24, r20
    120c:	95 2b       	or	r25, r21
    120e:	a6 2b       	or	r26, r22
    1210:	b7 2b       	or	r27, r23
    1212:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1216:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    121a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    121e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1222:	b0 9b       	sbis	0x16, 0	; 22
    1224:	1b c0       	rjmp	.+54     	; 0x125c <__vector_20+0x98>
    1226:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    122a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    122e:	c9 01       	movw	r24, r18
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	09 2e       	mov	r0, r25
    1234:	00 0c       	add	r0, r0
    1236:	aa 0b       	sbc	r26, r26
    1238:	bb 0b       	sbc	r27, r27
    123a:	dc 01       	movw	r26, r24
    123c:	99 27       	eor	r25, r25
    123e:	88 27       	eor	r24, r24
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	84 2b       	or	r24, r20
    1246:	95 2b       	or	r25, r21
    1248:	a6 2b       	or	r26, r22
    124a:	b7 2b       	or	r27, r23
    124c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1250:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1254:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1258:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    125c:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x1e>
    1260:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x1f>
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	39 f0       	breq	.+14     	; 0x1276 <__vector_20+0xb2>
    1268:	6f e0       	ldi	r22, 0x0F	; 15
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x1e>
    1270:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x1f>
    1274:	09 95       	icall
    1276:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
    127a:	ff 91       	pop	r31
    127c:	ef 91       	pop	r30
    127e:	bf 91       	pop	r27
    1280:	af 91       	pop	r26
    1282:	9f 91       	pop	r25
    1284:	8f 91       	pop	r24
    1286:	7f 91       	pop	r23
    1288:	6f 91       	pop	r22
    128a:	5f 91       	pop	r21
    128c:	4f 91       	pop	r20
    128e:	3f 91       	pop	r19
    1290:	2f 91       	pop	r18
    1292:	0f 90       	pop	r0
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	0f 90       	pop	r0
    1298:	1f 90       	pop	r1
    129a:	18 95       	reti

0000129c <__vector_21>:
    129c:	1f 92       	push	r1
    129e:	0f 92       	push	r0
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	0f 92       	push	r0
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 93       	push	r18
    12a8:	3f 93       	push	r19
    12aa:	4f 93       	push	r20
    12ac:	5f 93       	push	r21
    12ae:	6f 93       	push	r22
    12b0:	7f 93       	push	r23
    12b2:	8f 93       	push	r24
    12b4:	9f 93       	push	r25
    12b6:	af 93       	push	r26
    12b8:	bf 93       	push	r27
    12ba:	ef 93       	push	r30
    12bc:	ff 93       	push	r31
    12be:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    12c2:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    12c6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    12ca:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12ce:	c9 01       	movw	r24, r18
    12d0:	03 2e       	mov	r0, r19
    12d2:	00 0c       	add	r0, r0
    12d4:	aa 0b       	sbc	r26, r26
    12d6:	bb 0b       	sbc	r27, r27
    12d8:	dc 01       	movw	r26, r24
    12da:	99 27       	eor	r25, r25
    12dc:	88 27       	eor	r24, r24
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	84 2b       	or	r24, r20
    12e4:	95 2b       	or	r25, r21
    12e6:	a6 2b       	or	r26, r22
    12e8:	b7 2b       	or	r27, r23
    12ea:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    12ee:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    12f2:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    12f6:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    12fa:	b0 9b       	sbis	0x16, 0	; 22
    12fc:	1b c0       	rjmp	.+54     	; 0x1334 <__vector_21+0x98>
    12fe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1302:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1306:	c9 01       	movw	r24, r18
    1308:	01 96       	adiw	r24, 0x01	; 1
    130a:	09 2e       	mov	r0, r25
    130c:	00 0c       	add	r0, r0
    130e:	aa 0b       	sbc	r26, r26
    1310:	bb 0b       	sbc	r27, r27
    1312:	dc 01       	movw	r26, r24
    1314:	99 27       	eor	r25, r25
    1316:	88 27       	eor	r24, r24
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	84 2b       	or	r24, r20
    131e:	95 2b       	or	r25, r21
    1320:	a6 2b       	or	r26, r22
    1322:	b7 2b       	or	r27, r23
    1324:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1328:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    132c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1330:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    1334:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x20>
    1338:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x21>
    133c:	30 97       	sbiw	r30, 0x00	; 0
    133e:	39 f0       	breq	.+14     	; 0x134e <__vector_21+0xb2>
    1340:	60 e1       	ldi	r22, 0x10	; 16
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x20>
    1348:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x21>
    134c:	09 95       	icall
    134e:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
    1352:	ff 91       	pop	r31
    1354:	ef 91       	pop	r30
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	1f 90       	pop	r1
    1372:	18 95       	reti

00001374 <__vector_22>:
    1374:	1f 92       	push	r1
    1376:	0f 92       	push	r0
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	0f 92       	push	r0
    137c:	11 24       	eor	r1, r1
    137e:	2f 93       	push	r18
    1380:	3f 93       	push	r19
    1382:	4f 93       	push	r20
    1384:	5f 93       	push	r21
    1386:	6f 93       	push	r22
    1388:	7f 93       	push	r23
    138a:	8f 93       	push	r24
    138c:	9f 93       	push	r25
    138e:	af 93       	push	r26
    1390:	bf 93       	push	r27
    1392:	ef 93       	push	r30
    1394:	ff 93       	push	r31
    1396:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__data_end>
    139a:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__data_end+0x1>
    139e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13a6:	c9 01       	movw	r24, r18
    13a8:	03 2e       	mov	r0, r19
    13aa:	00 0c       	add	r0, r0
    13ac:	aa 0b       	sbc	r26, r26
    13ae:	bb 0b       	sbc	r27, r27
    13b0:	dc 01       	movw	r26, r24
    13b2:	99 27       	eor	r25, r25
    13b4:	88 27       	eor	r24, r24
    13b6:	60 e0       	ldi	r22, 0x00	; 0
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	84 2b       	or	r24, r20
    13bc:	95 2b       	or	r25, r21
    13be:	a6 2b       	or	r26, r22
    13c0:	b7 2b       	or	r27, r23
    13c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    13c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    13ca:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    13ce:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    13d2:	b0 9b       	sbis	0x16, 0	; 22
    13d4:	1b c0       	rjmp	.+54     	; 0x140c <__vector_22+0x98>
    13d6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13da:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    13de:	c9 01       	movw	r24, r18
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	09 2e       	mov	r0, r25
    13e4:	00 0c       	add	r0, r0
    13e6:	aa 0b       	sbc	r26, r26
    13e8:	bb 0b       	sbc	r27, r27
    13ea:	dc 01       	movw	r26, r24
    13ec:	99 27       	eor	r25, r25
    13ee:	88 27       	eor	r24, r24
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	84 2b       	or	r24, r20
    13f6:	95 2b       	or	r25, r21
    13f8:	a6 2b       	or	r26, r22
    13fa:	b7 2b       	or	r27, r23
    13fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <timestamp>
    1400:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <timestamp+0x1>
    1404:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <timestamp+0x2>
    1408:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <timestamp+0x3>
    140c:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x22>
    1410:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x23>
    1414:	30 97       	sbiw	r30, 0x00	; 0
    1416:	39 f0       	breq	.+14     	; 0x1426 <__vector_22+0xb2>
    1418:	61 e1       	ldi	r22, 0x11	; 17
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x22>
    1420:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x23>
    1424:	09 95       	icall
    1426:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
    142a:	ff 91       	pop	r31
    142c:	ef 91       	pop	r30
    142e:	bf 91       	pop	r27
    1430:	af 91       	pop	r26
    1432:	9f 91       	pop	r25
    1434:	8f 91       	pop	r24
    1436:	7f 91       	pop	r23
    1438:	6f 91       	pop	r22
    143a:	5f 91       	pop	r21
    143c:	4f 91       	pop	r20
    143e:	3f 91       	pop	r19
    1440:	2f 91       	pop	r18
    1442:	0f 90       	pop	r0
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	0f 90       	pop	r0
    1448:	1f 90       	pop	r1
    144a:	18 95       	reti

0000144c <__vector_9>:
        return 1;
    }
    return 0;
}

TIMER_OVERFLOW_INTERRUPT {
    144c:	1f 92       	push	r1
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	0f 92       	push	r0
    1454:	11 24       	eor	r1, r1
    1456:	2f 93       	push	r18
    1458:	3f 93       	push	r19
    145a:	4f 93       	push	r20
    145c:	5f 93       	push	r21
    145e:	6f 93       	push	r22
    1460:	7f 93       	push	r23
    1462:	8f 93       	push	r24
    1464:	9f 93       	push	r25
    1466:	ef 93       	push	r30
    1468:	ff 93       	push	r31
    TIMER_OCLR();
    overflows++;
    146a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
    146e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
    1472:	01 96       	adiw	r24, 0x01	; 1
    1474:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
    1478:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
    TIMERSET(timerQ);
    147c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <timerQ>
    1480:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <timerQ+0x1>
    1484:	30 97       	sbiw	r30, 0x00	; 0
    1486:	39 f0       	breq	.+14     	; 0x1496 <__vector_9+0x4a>
    1488:	42 81       	ldd	r20, Z+2	; 0x02
    148a:	53 81       	ldd	r21, Z+3	; 0x03
    148c:	64 81       	ldd	r22, Z+4	; 0x04
    148e:	75 81       	ldd	r23, Z+5	; 0x05
    1490:	86 17       	cp	r24, r22
    1492:	97 07       	cpc	r25, r23
    1494:	a1 f0       	breq	.+40     	; 0x14be <__vector_9+0x72>
    1496:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    149a:	8d 7f       	andi	r24, 0xFD	; 253
    149c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	9f 91       	pop	r25
    14a6:	8f 91       	pop	r24
    14a8:	7f 91       	pop	r23
    14aa:	6f 91       	pop	r22
    14ac:	5f 91       	pop	r21
    14ae:	4f 91       	pop	r20
    14b0:	3f 91       	pop	r19
    14b2:	2f 91       	pop	r18
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti
}

TIMER_OVERFLOW_INTERRUPT {
    TIMER_OCLR();
    overflows++;
    TIMERSET(timerQ);
    14be:	ca 01       	movw	r24, r20
    14c0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14c4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14c8:	42 1b       	sub	r20, r18
    14ca:	53 0b       	sbc	r21, r19
    14cc:	41 30       	cpi	r20, 0x01	; 1
    14ce:	51 05       	cpc	r21, r1
    14d0:	51 f0       	breq	.+20     	; 0x14e6 <__vector_9+0x9a>
    14d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    14d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    14da:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    14e4:	dd cf       	rjmp	.-70     	; 0x14a0 <__vector_9+0x54>
    14e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	f0 cf       	rjmp	.-32     	; 0x14d2 <__vector_9+0x86>

000014f2 <__vector_7>:
}

TIMER_COMPARE_INTERRUPT {
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	af 92       	push	r10
    1502:	bf 92       	push	r11
    1504:	cf 92       	push	r12
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	2f 93       	push	r18
    1512:	3f 93       	push	r19
    1514:	4f 93       	push	r20
    1516:	5f 93       	push	r21
    1518:	6f 93       	push	r22
    151a:	7f 93       	push	r23
    151c:	8f 93       	push	r24
    151e:	9f 93       	push	r25
    1520:	af 93       	push	r26
    1522:	bf 93       	push	r27
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    152c:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <__data_end>
    1530:	f0 90 07 01 	lds	r15, 0x0107	; 0x800107 <__data_end+0x1>
    1534:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1538:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    153c:	b0 99       	sbic	0x16, 0	; 22
    153e:	98 c0       	rjmp	.+304    	; 0x1670 <__vector_7+0x17e>
    1540:	47 01       	movw	r8, r14
    1542:	0f 2c       	mov	r0, r15
    1544:	00 0c       	add	r0, r0
    1546:	aa 08       	sbc	r10, r10
    1548:	bb 08       	sbc	r11, r11
    154a:	54 01       	movw	r10, r8
    154c:	99 24       	eor	r9, r9
    154e:	88 24       	eor	r8, r8
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	88 2a       	or	r8, r24
    1556:	99 2a       	or	r9, r25
    1558:	aa 2a       	or	r10, r26
    155a:	bb 2a       	or	r11, r27
    155c:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <timerQ>
    1560:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <timerQ+0x1>
    1564:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <msgQ>
    1568:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <msgQ+0x1>
    while (timerQ && (timerQ->baseline - now <= 0))
    156c:	20 97       	sbiw	r28, 0x00	; 0
    156e:	09 f4       	brne	.+2      	; 0x1572 <__vector_7+0x80>
    1570:	3f c0       	rjmp	.+126    	; 0x15f0 <__vector_7+0xfe>
    1572:	4a 81       	ldd	r20, Y+2	; 0x02
    1574:	5b 81       	ldd	r21, Y+3	; 0x03
    1576:	6c 81       	ldd	r22, Y+4	; 0x04
    1578:	7d 81       	ldd	r23, Y+5	; 0x05
    157a:	8a 01       	movw	r16, r20
    157c:	9b 01       	movw	r18, r22
    157e:	08 19       	sub	r16, r8
    1580:	19 09       	sbc	r17, r9
    1582:	2a 09       	sbc	r18, r10
    1584:	3b 09       	sbc	r19, r11
    1586:	10 16       	cp	r1, r16
    1588:	11 06       	cpc	r1, r17
    158a:	12 06       	cpc	r1, r18
    158c:	13 06       	cpc	r1, r19
    158e:	0c f4       	brge	.+2      	; 0x1592 <__vector_7+0xa0>
    1590:	40 c0       	rjmp	.+128    	; 0x1612 <__vector_7+0x120>
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    1592:	d8 80       	ld	r13, Y
    1594:	c9 80       	ldd	r12, Y+1	; 0x01
IRQ(IRQ_LCD,             LCD_vect);

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	b9 f1       	breq	.+110    	; 0x1608 <__vector_7+0x116>
    159a:	0e 81       	ldd	r16, Y+6	; 0x06
    159c:	1f 81       	ldd	r17, Y+7	; 0x07
    159e:	28 85       	ldd	r18, Y+8	; 0x08
    15a0:	39 85       	ldd	r19, Y+9	; 0x09
    15a2:	fc 01       	movw	r30, r24
    15a4:	46 81       	ldd	r20, Z+6	; 0x06
    15a6:	57 81       	ldd	r21, Z+7	; 0x07
    15a8:	60 85       	ldd	r22, Z+8	; 0x08
    15aa:	71 85       	ldd	r23, Z+9	; 0x09
    15ac:	04 17       	cp	r16, r20
    15ae:	15 07       	cpc	r17, r21
    15b0:	26 07       	cpc	r18, r22
    15b2:	37 07       	cpc	r19, r23
    15b4:	4c f1       	brlt	.+82     	; 0x1608 <__vector_7+0x116>
    15b6:	dc 01       	movw	r26, r24
    15b8:	0a c0       	rjmp	.+20     	; 0x15ce <__vector_7+0xdc>
    15ba:	46 81       	ldd	r20, Z+6	; 0x06
    15bc:	57 81       	ldd	r21, Z+7	; 0x07
    15be:	60 85       	ldd	r22, Z+8	; 0x08
    15c0:	71 85       	ldd	r23, Z+9	; 0x09
    15c2:	04 17       	cp	r16, r20
    15c4:	15 07       	cpc	r17, r21
    15c6:	26 07       	cpc	r18, r22
    15c8:	37 07       	cpc	r19, r23
    15ca:	dc f0       	brlt	.+54     	; 0x1602 <__vector_7+0x110>
    15cc:	df 01       	movw	r26, r30
        prev = q;
        q = q->next;
    15ce:	ed 91       	ld	r30, X+
    15d0:	fc 91       	ld	r31, X
    15d2:	11 97       	sbiw	r26, 0x01	; 1
IRQ(IRQ_LCD,             LCD_vect);

/* queue manager */
void enqueueByDeadline(Msg p, Msg *queue) {
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
    15d4:	30 97       	sbiw	r30, 0x00	; 0
    15d6:	89 f7       	brne	.-30     	; 0x15ba <__vector_7+0xc8>
        prev = q;
        q = q->next;
    }
    p->next = q;
    15d8:	19 82       	std	Y+1, r1	; 0x01
    15da:	18 82       	st	Y, r1
    if (prev == NULL)
        *queue = p;
    else
        prev->next = p;
    15dc:	cd 93       	st	X+, r28
    15de:	dc 93       	st	X, r29
    15e0:	38 2f       	mov	r19, r24
    15e2:	29 2f       	mov	r18, r25
}

Msg dequeue(Msg *queue) {
    Msg m = *queue;
    if (m)
        *queue = m->next;
    15e4:	cd 2d       	mov	r28, r13
    15e6:	dc 2d       	mov	r29, r12
    15e8:	83 2f       	mov	r24, r19
    15ea:	92 2f       	mov	r25, r18

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
    15ec:	20 97       	sbiw	r28, 0x00	; 0
    15ee:	09 f6       	brne	.-126    	; 0x1572 <__vector_7+0x80>
    15f0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <timerQ+0x1>
    15f4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <timerQ>
    15f8:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <msgQ+0x1>
    15fc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <msgQ>
    1600:	13 c0       	rjmp	.+38     	; 0x1628 <__vector_7+0x136>
    Msg prev = NULL, q = *queue;
    while (q && (q->deadline <= p->deadline)) {
        prev = q;
        q = q->next;
    }
    p->next = q;
    1602:	f9 83       	std	Y+1, r31	; 0x01
    1604:	e8 83       	st	Y, r30
    1606:	ea cf       	rjmp	.-44     	; 0x15dc <__vector_7+0xea>
    1608:	99 83       	std	Y+1, r25	; 0x01
    160a:	88 83       	st	Y, r24
    160c:	3c 2f       	mov	r19, r28
    160e:	2d 2f       	mov	r18, r29
    1610:	e9 cf       	rjmp	.-46     	; 0x15e4 <__vector_7+0xf2>
    1612:	d0 93 0d 01 	sts	0x010D, r29	; 0x80010d <timerQ+0x1>
    1616:	c0 93 0c 01 	sts	0x010C, r28	; 0x80010c <timerQ>
    161a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <msgQ+0x1>
    161e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <msgQ>
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    1622:	e6 16       	cp	r14, r22
    1624:	f7 06       	cpc	r15, r23
    1626:	d9 f1       	breq	.+118    	; 0x169e <__vector_7+0x1ac>
    1628:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    162c:	8d 7f       	andi	r24, 0xFD	; 253
    162e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    schedule();
    1632:	0e 94 4e 02 	call	0x49c	; 0x49c <schedule>
}
    1636:	ff 91       	pop	r31
    1638:	ef 91       	pop	r30
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	bf 90       	pop	r11
    1660:	af 90       	pop	r10
    1662:	9f 90       	pop	r9
    1664:	8f 90       	pop	r8
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti
}

TIMER_COMPARE_INTERRUPT {
    Time now;
    TIMER_CCLR();
    TIMERGET(now);
    1670:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1674:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1678:	47 01       	movw	r8, r14
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	88 1a       	sub	r8, r24
    167e:	98 0a       	sbc	r9, r24
    1680:	09 2c       	mov	r0, r9
    1682:	00 0c       	add	r0, r0
    1684:	aa 08       	sbc	r10, r10
    1686:	bb 08       	sbc	r11, r11
    1688:	d4 01       	movw	r26, r8
    168a:	99 27       	eor	r25, r25
    168c:	88 27       	eor	r24, r24
    168e:	49 01       	movw	r8, r18
    1690:	a1 2c       	mov	r10, r1
    1692:	b1 2c       	mov	r11, r1
    1694:	88 2a       	or	r8, r24
    1696:	99 2a       	or	r9, r25
    1698:	aa 2a       	or	r10, r26
    169a:	bb 2a       	or	r11, r27
    169c:	5f cf       	rjmp	.-322    	; 0x155c <__vector_7+0x6a>
    while (timerQ && (timerQ->baseline - now <= 0))
        enqueueByDeadline( dequeue(&timerQ), &msgQ );
    TIMERSET(timerQ);
    169e:	ca 01       	movw	r24, r20
    16a0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16a4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16a8:	42 1b       	sub	r20, r18
    16aa:	53 0b       	sbc	r21, r19
    16ac:	41 30       	cpi	r20, 0x01	; 1
    16ae:	51 05       	cpc	r21, r1
    16b0:	51 f0       	breq	.+20     	; 0x16c6 <__vector_7+0x1d4>
    16b2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    16b6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    16ba:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    16be:	82 60       	ori	r24, 0x02	; 2
    16c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    16c4:	b6 cf       	rjmp	.-148    	; 0x1632 <__vector_7+0x140>
    16c6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16ca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	f0 cf       	rjmp	.-32     	; 0x16b2 <__vector_7+0x1c0>

000016d2 <__divmodsi4>:
    16d2:	05 2e       	mov	r0, r21
    16d4:	97 fb       	bst	r25, 7
    16d6:	1e f4       	brtc	.+6      	; 0x16de <__divmodsi4+0xc>
    16d8:	00 94       	com	r0
    16da:	0e 94 80 0b 	call	0x1700	; 0x1700 <__negsi2>
    16de:	57 fd       	sbrc	r21, 7
    16e0:	07 d0       	rcall	.+14     	; 0x16f0 <__divmodsi4_neg2>
    16e2:	0e 94 8e 0b 	call	0x171c	; 0x171c <__udivmodsi4>
    16e6:	07 fc       	sbrc	r0, 7
    16e8:	03 d0       	rcall	.+6      	; 0x16f0 <__divmodsi4_neg2>
    16ea:	4e f4       	brtc	.+18     	; 0x16fe <__divmodsi4_exit>
    16ec:	0c 94 80 0b 	jmp	0x1700	; 0x1700 <__negsi2>

000016f0 <__divmodsi4_neg2>:
    16f0:	50 95       	com	r21
    16f2:	40 95       	com	r20
    16f4:	30 95       	com	r19
    16f6:	21 95       	neg	r18
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	4f 4f       	sbci	r20, 0xFF	; 255
    16fc:	5f 4f       	sbci	r21, 0xFF	; 255

000016fe <__divmodsi4_exit>:
    16fe:	08 95       	ret

00001700 <__negsi2>:
    1700:	90 95       	com	r25
    1702:	80 95       	com	r24
    1704:	70 95       	com	r23
    1706:	61 95       	neg	r22
    1708:	7f 4f       	sbci	r23, 0xFF	; 255
    170a:	8f 4f       	sbci	r24, 0xFF	; 255
    170c:	9f 4f       	sbci	r25, 0xFF	; 255
    170e:	08 95       	ret

00001710 <__tablejump2__>:
    1710:	ee 0f       	add	r30, r30
    1712:	ff 1f       	adc	r31, r31
    1714:	05 90       	lpm	r0, Z+
    1716:	f4 91       	lpm	r31, Z
    1718:	e0 2d       	mov	r30, r0
    171a:	09 94       	ijmp

0000171c <__udivmodsi4>:
    171c:	a1 e2       	ldi	r26, 0x21	; 33
    171e:	1a 2e       	mov	r1, r26
    1720:	aa 1b       	sub	r26, r26
    1722:	bb 1b       	sub	r27, r27
    1724:	fd 01       	movw	r30, r26
    1726:	0d c0       	rjmp	.+26     	; 0x1742 <__udivmodsi4_ep>

00001728 <__udivmodsi4_loop>:
    1728:	aa 1f       	adc	r26, r26
    172a:	bb 1f       	adc	r27, r27
    172c:	ee 1f       	adc	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	a2 17       	cp	r26, r18
    1732:	b3 07       	cpc	r27, r19
    1734:	e4 07       	cpc	r30, r20
    1736:	f5 07       	cpc	r31, r21
    1738:	20 f0       	brcs	.+8      	; 0x1742 <__udivmodsi4_ep>
    173a:	a2 1b       	sub	r26, r18
    173c:	b3 0b       	sbc	r27, r19
    173e:	e4 0b       	sbc	r30, r20
    1740:	f5 0b       	sbc	r31, r21

00001742 <__udivmodsi4_ep>:
    1742:	66 1f       	adc	r22, r22
    1744:	77 1f       	adc	r23, r23
    1746:	88 1f       	adc	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	1a 94       	dec	r1
    174c:	69 f7       	brne	.-38     	; 0x1728 <__udivmodsi4_loop>
    174e:	60 95       	com	r22
    1750:	70 95       	com	r23
    1752:	80 95       	com	r24
    1754:	90 95       	com	r25
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	bd 01       	movw	r22, r26
    175c:	cf 01       	movw	r24, r30
    175e:	08 95       	ret

00001760 <setjmp>:
    1760:	dc 01       	movw	r26, r24
    1762:	2d 92       	st	X+, r2
    1764:	3d 92       	st	X+, r3
    1766:	4d 92       	st	X+, r4
    1768:	5d 92       	st	X+, r5
    176a:	6d 92       	st	X+, r6
    176c:	7d 92       	st	X+, r7
    176e:	8d 92       	st	X+, r8
    1770:	9d 92       	st	X+, r9
    1772:	ad 92       	st	X+, r10
    1774:	bd 92       	st	X+, r11
    1776:	cd 92       	st	X+, r12
    1778:	dd 92       	st	X+, r13
    177a:	ed 92       	st	X+, r14
    177c:	fd 92       	st	X+, r15
    177e:	0d 93       	st	X+, r16
    1780:	1d 93       	st	X+, r17
    1782:	cd 93       	st	X+, r28
    1784:	dd 93       	st	X+, r29
    1786:	ff 91       	pop	r31
    1788:	ef 91       	pop	r30
    178a:	8d b7       	in	r24, 0x3d	; 61
    178c:	8d 93       	st	X+, r24
    178e:	8e b7       	in	r24, 0x3e	; 62
    1790:	8d 93       	st	X+, r24
    1792:	8f b7       	in	r24, 0x3f	; 63
    1794:	8d 93       	st	X+, r24
    1796:	ed 93       	st	X+, r30
    1798:	fd 93       	st	X+, r31
    179a:	88 27       	eor	r24, r24
    179c:	99 27       	eor	r25, r25
    179e:	09 94       	ijmp

000017a0 <longjmp>:
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	91 05       	cpc	r25, r1
    17a8:	81 1d       	adc	r24, r1
    17aa:	2d 90       	ld	r2, X+
    17ac:	3d 90       	ld	r3, X+
    17ae:	4d 90       	ld	r4, X+
    17b0:	5d 90       	ld	r5, X+
    17b2:	6d 90       	ld	r6, X+
    17b4:	7d 90       	ld	r7, X+
    17b6:	8d 90       	ld	r8, X+
    17b8:	9d 90       	ld	r9, X+
    17ba:	ad 90       	ld	r10, X+
    17bc:	bd 90       	ld	r11, X+
    17be:	cd 90       	ld	r12, X+
    17c0:	dd 90       	ld	r13, X+
    17c2:	ed 90       	ld	r14, X+
    17c4:	fd 90       	ld	r15, X+
    17c6:	0d 91       	ld	r16, X+
    17c8:	1d 91       	ld	r17, X+
    17ca:	cd 91       	ld	r28, X+
    17cc:	dd 91       	ld	r29, X+
    17ce:	ed 91       	ld	r30, X+
    17d0:	fd 91       	ld	r31, X+
    17d2:	0d 90       	ld	r0, X+
    17d4:	f8 94       	cli
    17d6:	fe bf       	out	0x3e, r31	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	ed bf       	out	0x3d, r30	; 61
    17dc:	ed 91       	ld	r30, X+
    17de:	fd 91       	ld	r31, X+
    17e0:	09 94       	ijmp

000017e2 <_exit>:
    17e2:	f8 94       	cli

000017e4 <__stop_program>:
    17e4:	ff cf       	rjmp	.-2      	; 0x17e4 <__stop_program>
