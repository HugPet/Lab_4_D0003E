
Lab_4_D0003E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00001876  0000190a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080010e  0080010e  00001918  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025b7  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ef4  00000000  00000000  0000413f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001541  00000000  00000000  00005033  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ad8  00000000  00000000  00006574  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008aa  00000000  00000000  0000704c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003205  00000000  00000000  000078f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000aafb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_1>
       8:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_2>
       c:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_3>
      10:	0c 94 00 04 	jmp	0x800	; 0x800 <__vector_4>
      14:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_5>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_7>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_9>
      28:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_10>
      2c:	0c 94 44 05 	jmp	0xa88	; 0xa88 <__vector_11>
      30:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_12>
      34:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__vector_13>
      38:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_14>
      3c:	0c 94 f4 06 	jmp	0xde8	; 0xde8 <__vector_15>
      40:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__vector_16>
      44:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__vector_17>
      48:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__vector_18>
      4c:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <__vector_19>
      50:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__vector_20>
      54:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__vector_21>
      58:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <__vector_22>
      5c:	72 00       	.word	0x0072	; ????
      5e:	bb 00       	.word	0x00bb	; ????
      60:	c4 00       	.word	0x00c4	; ????
      62:	cd 00       	.word	0x00cd	; ????
      64:	d6 00       	.word	0x00d6	; ????
      66:	df 00       	.word	0x00df	; ????
      68:	e8 00       	.word	0x00e8	; ????
      6a:	f1 00       	.word	0x00f1	; ????
      6c:	fa 00       	.word	0x00fa	; ????
      6e:	03 01       	movw	r0, r6

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e7       	ldi	r30, 0x76	; 118
      84:	f8 e1       	ldi	r31, 0x18	; 24
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	ae 30       	cpi	r26, 0x0E	; 14
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	24 e0       	ldi	r18, 0x04	; 4
      94:	ae e0       	ldi	r26, 0x0E	; 14
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 36       	cpi	r26, 0x61	; 97
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
      a6:	0c 94 39 0c 	jmp	0x1872	; 0x1872 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LCDInit>:
#include <stdbool.h>
#include <avr/io.h>

void LCDInit(void){

	LCDCRB = (1<<LCDMUX1)|(1<<LCDMUX0)|(1<<LCDPM2)|(1<<LCDPM1)|(1<<LCDPM2);
      ae:	86 e3       	ldi	r24, 0x36	; 54
      b0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	LCDFRR = (0<<LCDPS2)|(0<<LCDPS1)|(0<<LCDPS0)|(1<<LCDCD2)|(1<<LCDCD1)|(1<<LCDCD0);
      b4:	87 e0       	ldi	r24, 0x07	; 7
      b6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
	LCDCCR = (0<<LCDDC2)|(0<<LCDDC1)|(0<<LCDDC0)|(1<<LCDCC3)|(1<<LCDCC2)|(1<<LCDCC1)|(1<<LCDCC0);
      ba:	8f e0       	ldi	r24, 0x0F	; 15
      bc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	LCDCRA = (1<<LCDEN)|(1<<LCDAB)|(0<<LCDIE)|(0<<LCDBL);
      c0:	80 ec       	ldi	r24, 0xC0	; 192
      c2:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
      c6:	8d e0       	ldi	r24, 0x0D	; 13
      c8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
      cc:	08 95       	ret

000000ce <writeChar>:
}

void writeChar(char ch, int pos){
	int SCC_X_0 = 0, SCC_X_1 = 0, SCC_X_2 = 0, SCC_X_3 = 0;
		
	switch (ch)					/* a switch statement for which character is to be printed on the display.
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	fc 01       	movw	r30, r24
      d2:	f0 97       	sbiw	r30, 0x30	; 48
      d4:	ea 30       	cpi	r30, 0x0A	; 10
      d6:	f1 05       	cpc	r31, r1
      d8:	08 f0       	brcs	.+2      	; 0xdc <writeChar+0xe>
      da:	4c c0       	rjmp	.+152    	; 0x174 <writeChar+0xa6>
      dc:	e2 5d       	subi	r30, 0xD2	; 210
      de:	ff 4f       	sbci	r31, 0xFF	; 255
      e0:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__tablejump2__>
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	90 e0       	ldi	r25, 0x00	; 0
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0x5;
      e8:	25 e0       	ldi	r18, 0x05	; 5
      ea:	30 e0       	ldi	r19, 0x00	; 0
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
      ec:	45 e0       	ldi	r20, 0x05	; 5
      ee:	50 e0       	ldi	r21, 0x00	; 0
	switch (ch)					/* a switch statement for which character is to be printed on the display.
								   sets various bytes of SCC_X to certain values, depending on which areas
								   should light up. These values are derived from the documentation.    */
	{
	case '0' :
		SCC_X_0 = 0x1;
      f0:	e1 e0       	ldi	r30, 0x01	; 1
      f2:	f0 e0       	ldi	r31, 0x00	; 0
		break;
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
      f4:	62 30       	cpi	r22, 0x02	; 2
      f6:	71 05       	cpc	r23, r1
      f8:	09 f4       	brne	.+2      	; 0xfc <writeChar+0x2e>
      fa:	c7 c0       	rjmp	.+398    	; 0x28a <writeChar+0x1bc>
      fc:	0c f4       	brge	.+2      	; 0x100 <writeChar+0x32>
      fe:	8c c0       	rjmp	.+280    	; 0x218 <writeChar+0x14a>
     100:	64 30       	cpi	r22, 0x04	; 4
     102:	71 05       	cpc	r23, r1
     104:	09 f4       	brne	.+2      	; 0x108 <writeChar+0x3a>
     106:	0b c1       	rjmp	.+534    	; 0x31e <writeChar+0x250>
     108:	0c f4       	brge	.+2      	; 0x10c <writeChar+0x3e>
     10a:	d8 c0       	rjmp	.+432    	; 0x2bc <writeChar+0x1ee>
     10c:	65 30       	cpi	r22, 0x05	; 5
     10e:	71 05       	cpc	r23, r1
     110:	09 f0       	breq	.+2      	; 0x114 <writeChar+0x46>
     112:	37 c1       	rjmp	.+622    	; 0x382 <writeChar+0x2b4>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
     114:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     118:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
     11a:	e2 95       	swap	r30
     11c:	f2 95       	swap	r31
     11e:	f0 7f       	andi	r31, 0xF0	; 240
     120:	fe 27       	eor	r31, r30
     122:	e0 7f       	andi	r30, 0xF0	; 240
     124:	fe 27       	eor	r31, r30
     126:	e6 2b       	or	r30, r22
     128:	e0 93 ee 00 	sts	0x00EE, r30	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     12c:	60 91 f3 00 	lds	r22, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     130:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
     132:	42 95       	swap	r20
     134:	52 95       	swap	r21
     136:	50 7f       	andi	r21, 0xF0	; 240
     138:	54 27       	eor	r21, r20
     13a:	40 7f       	andi	r20, 0xF0	; 240
     13c:	54 27       	eor	r21, r20
     13e:	46 2b       	or	r20, r22
     140:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     144:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     148:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
     14a:	22 95       	swap	r18
     14c:	32 95       	swap	r19
     14e:	30 7f       	andi	r19, 0xF0	; 240
     150:	32 27       	eor	r19, r18
     152:	20 7f       	andi	r18, 0xF0	; 240
     154:	32 27       	eor	r19, r18
     156:	24 2b       	or	r18, r20
     158:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     15c:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     160:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 5:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, true);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, true);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, true);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, true);
     162:	82 95       	swap	r24
     164:	92 95       	swap	r25
     166:	90 7f       	andi	r25, 0xF0	; 240
     168:	98 27       	eor	r25, r24
     16a:	80 7f       	andi	r24, 0xF0	; 240
     16c:	98 27       	eor	r25, r24
     16e:	82 2b       	or	r24, r18
     170:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
     174:	08 95       	ret
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x1;
     17e:	41 e0       	ldi	r20, 0x01	; 1
     180:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_2 = 0x5;
		SCC_X_3 = 0x1;
		
		break;
	case '1' :
		SCC_X_0 = 0x0;
     182:	e0 e0       	ldi	r30, 0x00	; 0
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	b6 cf       	rjmp	.-148    	; 0xf4 <writeChar+0x26>
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
     18c:	2e e0       	ldi	r18, 0x0E	; 14
     18e:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     190:	41 e0       	ldi	r20, 0x01	; 1
     192:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '2' :
		SCC_X_0 = 0x1;
     194:	e1 e0       	ldi	r30, 0x01	; 1
     196:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
     198:	ad cf       	rjmp	.-166    	; 0xf4 <writeChar+0x26>
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
     19e:	2b e0       	ldi	r18, 0x0B	; 11
     1a0:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     1a2:	41 e0       	ldi	r20, 0x01	; 1
     1a4:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xE;
		SCC_X_3 = 0x1;
		break;
	case '3' :
		SCC_X_0 = 0x1;
     1a6:	e1 e0       	ldi	r30, 0x01	; 1
     1a8:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     1aa:	a4 cf       	rjmp	.-184    	; 0xf4 <writeChar+0x26>
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     1b0:	2b e0       	ldi	r18, 0x0B	; 11
     1b2:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
		SCC_X_1 = 0x5;
     1b4:	45 e0       	ldi	r20, 0x05	; 5
     1b6:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '4' :
		SCC_X_0 = 0x0;
     1b8:	e0 e0       	ldi	r30, 0x00	; 0
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
     1bc:	9b cf       	rjmp	.-202    	; 0xf4 <writeChar+0x26>
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
     1c2:	2b e0       	ldi	r18, 0x0B	; 11
     1c4:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1c6:	44 e0       	ldi	r20, 0x04	; 4
     1c8:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x0;
		break;
	case '5' :
		SCC_X_0 = 0x1;
     1ca:	e1 e0       	ldi	r30, 0x01	; 1
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     1ce:	92 cf       	rjmp	.-220    	; 0xf4 <writeChar+0x26>
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
     1d4:	2f e0       	ldi	r18, 0x0F	; 15
     1d6:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x4;
     1d8:	44 e0       	ldi	r20, 0x04	; 4
     1da:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
	case '6' :
		SCC_X_0 = 0x1;
     1dc:	e1 e0       	ldi	r30, 0x01	; 1
     1de:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     1e0:	89 cf       	rjmp	.-238    	; 0xf4 <writeChar+0x26>
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
     1e6:	21 e0       	ldi	r18, 0x01	; 1
     1e8:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x1;
     1ea:	41 e0       	ldi	r20, 0x01	; 1
     1ec:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x4;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '7' :
		SCC_X_0 = 0x1;
     1ee:	e1 e0       	ldi	r30, 0x01	; 1
     1f0:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
     1f2:	80 cf       	rjmp	.-256    	; 0xf4 <writeChar+0x26>
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
     1f8:	2f e0       	ldi	r18, 0x0F	; 15
     1fa:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     1fc:	45 e0       	ldi	r20, 0x05	; 5
     1fe:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x1;
		SCC_X_2 = 0x1;
		SCC_X_3 = 0x0;
		break;
	case '8' :
		SCC_X_0 = 0x1;
     200:	e1 e0       	ldi	r30, 0x01	; 1
     202:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
     204:	77 cf       	rjmp	.-274    	; 0xf4 <writeChar+0x26>
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
     20a:	2b e0       	ldi	r18, 0x0B	; 11
     20c:	30 e0       	ldi	r19, 0x00	; 0
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
		SCC_X_1 = 0x5;
     20e:	45 e0       	ldi	r20, 0x05	; 5
     210:	50 e0       	ldi	r21, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xf;
		SCC_X_3 = 0x1;
		break;
	case '9' :
		SCC_X_0 = 0x1;
     212:	e1 e0       	ldi	r30, 0x01	; 1
     214:	f0 e0       	ldi	r31, 0x00	; 0
		SCC_X_1 = 0x5;
		SCC_X_2 = 0xb;
		SCC_X_3 = 0x1;
		break;
     216:	6e cf       	rjmp	.-292    	; 0xf4 <writeChar+0x26>
	default:
		return;
	}
	
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
     218:	61 15       	cp	r22, r1
     21a:	71 05       	cpc	r23, r1
     21c:	09 f4       	brne	.+2      	; 0x220 <writeChar+0x152>
     21e:	98 c0       	rjmp	.+304    	; 0x350 <writeChar+0x282>
     220:	61 30       	cpi	r22, 0x01	; 1
     222:	71 05       	cpc	r23, r1
     224:	09 f0       	breq	.+2      	; 0x228 <writeChar+0x15a>
     226:	ae c0       	rjmp	.+348    	; 0x384 <writeChar+0x2b6>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     228:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     22c:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
     22e:	e2 95       	swap	r30
     230:	f2 95       	swap	r31
     232:	f0 7f       	andi	r31, 0xF0	; 240
     234:	fe 27       	eor	r31, r30
     236:	e0 7f       	andi	r30, 0xF0	; 240
     238:	fe 27       	eor	r31, r30
     23a:	e6 2b       	or	r30, r22
     23c:	e0 93 ec 00 	sts	0x00EC, r30	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     240:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     244:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
     246:	42 95       	swap	r20
     248:	52 95       	swap	r21
     24a:	50 7f       	andi	r21, 0xF0	; 240
     24c:	54 27       	eor	r21, r20
     24e:	40 7f       	andi	r20, 0xF0	; 240
     250:	54 27       	eor	r21, r20
     252:	46 2b       	or	r20, r22
     254:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     258:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     25c:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
     25e:	22 95       	swap	r18
     260:	32 95       	swap	r19
     262:	30 7f       	andi	r19, 0xF0	; 240
     264:	32 27       	eor	r19, r18
     266:	20 7f       	andi	r18, 0xF0	; 240
     268:	32 27       	eor	r19, r18
     26a:	24 2b       	or	r18, r20
     26c:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     270:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     274:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 1:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, true);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
     276:	82 95       	swap	r24
     278:	92 95       	swap	r25
     27a:	90 7f       	andi	r25, 0xF0	; 240
     27c:	98 27       	eor	r25, r24
     27e:	80 7f       	andi	r24, 0xF0	; 240
     280:	98 27       	eor	r25, r24
     282:	82 2b       	or	r24, r18
     284:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     288:	08 95       	ret
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     28a:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     28e:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR5=writeReg(SCC_X_1, LCDDR5, true);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
     290:	e6 2b       	or	r30, r22
     292:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     296:	60 91 f2 00 	lds	r22, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     29a:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR10=writeReg(SCC_X_2, LCDDR10, true);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
     29c:	46 2b       	or	r20, r22
     29e:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     2a2:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2a6:	40 7f       	andi	r20, 0xF0	; 240
		LCDDR15=writeReg(SCC_X_3, LCDDR15, true);
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
     2a8:	24 2b       	or	r18, r20
     2aa:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     2ae:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     2b2:	20 7f       	andi	r18, 0xF0	; 240
		break;
	case 2:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, false);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
     2b4:	82 2b       	or	r24, r18
     2b6:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     2ba:	08 95       	ret
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2bc:	60 91 ed 00 	lds	r22, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2c0:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, false);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
     2c2:	e2 95       	swap	r30
     2c4:	f2 95       	swap	r31
     2c6:	f0 7f       	andi	r31, 0xF0	; 240
     2c8:	fe 27       	eor	r31, r30
     2ca:	e0 7f       	andi	r30, 0xF0	; 240
     2cc:	fe 27       	eor	r31, r30
     2ce:	e6 2b       	or	r30, r22
     2d0:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     2d4:	60 91 f2 00 	lds	r22, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2d8:	6f 70       	andi	r22, 0x0F	; 15
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, false);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
     2da:	42 95       	swap	r20
     2dc:	52 95       	swap	r21
     2de:	50 7f       	andi	r21, 0xF0	; 240
     2e0:	54 27       	eor	r21, r20
     2e2:	40 7f       	andi	r20, 0xF0	; 240
     2e4:	54 27       	eor	r21, r20
     2e6:	46 2b       	or	r20, r22
     2e8:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     2ec:	40 91 f7 00 	lds	r20, 0x00F7	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     2f0:	4f 70       	andi	r20, 0x0F	; 15
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, false);
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
     2f2:	22 95       	swap	r18
     2f4:	32 95       	swap	r19
     2f6:	30 7f       	andi	r19, 0xF0	; 240
     2f8:	32 27       	eor	r19, r18
     2fa:	20 7f       	andi	r18, 0xF0	; 240
     2fc:	32 27       	eor	r19, r18
     2fe:	24 2b       	or	r18, r20
     300:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__DATA_REGION_ORIGIN__+0x97>
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     304:	20 91 fc 00 	lds	r18, 0x00FC	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
	if(!shift){
		reg &= 0xF0;
		reg |= num;
	}
	else{
		reg &= 0x0F;
     308:	2f 70       	andi	r18, 0x0F	; 15
		break;
	case 3:
		LCDDR1 = writeReg(SCC_X_0, LCDDR1, true);
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
     30a:	82 95       	swap	r24
     30c:	92 95       	swap	r25
     30e:	90 7f       	andi	r25, 0xF0	; 240
     310:	98 27       	eor	r25, r24
     312:	80 7f       	andi	r24, 0xF0	; 240
     314:	98 27       	eor	r25, r24
     316:	82 2b       	or	r24, r18
     318:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__DATA_REGION_ORIGIN__+0x9c>
		break;
     31c:	08 95       	ret
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
     31e:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     322:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR6 = writeReg(SCC_X_1, LCDDR6, true);
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
     324:	e6 2b       	or	r30, r22
     326:	e0 93 ee 00 	sts	0x00EE, r30	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     32a:	60 91 f3 00 	lds	r22, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     32e:	60 7f       	andi	r22, 0xF0	; 240
		LCDDR11 = writeReg(SCC_X_2, LCDDR11, true);
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
     330:	46 2b       	or	r20, r22
     332:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     336:	40 91 f8 00 	lds	r20, 0x00F8	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     33a:	40 7f       	andi	r20, 0xF0	; 240
		LCDDR16 = writeReg(SCC_X_3, LCDDR16, true);
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
     33c:	24 2b       	or	r18, r20
     33e:	20 93 f8 00 	sts	0x00F8, r18	; 0x8000f8 <__DATA_REGION_ORIGIN__+0x98>
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     342:	20 91 fd 00 	lds	r18, 0x00FD	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     346:	20 7f       	andi	r18, 0xF0	; 240
		break;
	case 4:
		LCDDR2 = writeReg(SCC_X_0, LCDDR2, false);
		LCDDR7 = writeReg(SCC_X_1, LCDDR7, false);
		LCDDR12 = writeReg(SCC_X_2, LCDDR12, false);
		LCDDR17 = writeReg(SCC_X_3, LCDDR17, false);
     348:	82 2b       	or	r24, r18
     34a:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <__DATA_REGION_ORIGIN__+0x9d>
		break;
     34e:	08 95       	ret
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     350:	60 91 ec 00 	lds	r22, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     354:	60 7f       	andi	r22, 0xF0	; 240
	switch(pos){										/* a switch statement for the position of the digit. Depending on the position 
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
     356:	e6 2b       	or	r30, r22
     358:	e0 93 ec 00 	sts	0x00EC, r30	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     35c:	60 91 f1 00 	lds	r22, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     360:	60 7f       	andi	r22, 0xF0	; 240
														   we will write to different registers. We use a boolean value to show if 
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
     362:	46 2b       	or	r20, r22
     364:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     368:	40 91 f6 00 	lds	r20, 0x00F6	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     36c:	40 7f       	andi	r20, 0xF0	; 240
														   the lower byte of the register or not, since the positions are paired up 
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
     36e:	24 2b       	or	r18, r20
     370:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__DATA_REGION_ORIGIN__+0x96>
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     374:	20 91 fb 00 	lds	r18, 0x00FB	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>

/* A function for writing to a register, specifically the registers for 
   lighting up areas of the display. **/
int writeReg(int num, int reg, bool shift){
	if(!shift){
		reg &= 0xF0;
     378:	20 7f       	andi	r18, 0xF0	; 240
														   per register. */
	case 0:
		LCDDR0=writeReg(SCC_X_0, LCDDR0, false);
		LCDDR5=writeReg(SCC_X_1, LCDDR5, false);
		LCDDR10=writeReg(SCC_X_2, LCDDR10, false);
		LCDDR15=writeReg(SCC_X_3, LCDDR15, false);		
     37a:	82 2b       	or	r24, r18
     37c:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__DATA_REGION_ORIGIN__+0x9b>
		break;
     380:	08 95       	ret
     382:	08 95       	ret
     384:	08 95       	ret

00000386 <printAt>:
	
	TCCR1B = (0<<WGM13)|(1<<WGM12)|(0<<WGM11)|(0<<WGM10)|(1<<CS12)|(0<<CS11)|(1<<CS10);
	
}

void printAt(long num, int pos) {
     386:	8f 92       	push	r8
     388:	9f 92       	push	r9
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	4b 01       	movw	r8, r22
     39c:	5c 01       	movw	r10, r24
     39e:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     3a0:	24 e6       	ldi	r18, 0x64	; 100
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodsi4>
     3ac:	2a e0       	ldi	r18, 0x0A	; 10
     3ae:	c2 2e       	mov	r12, r18
     3b0:	d1 2c       	mov	r13, r1
     3b2:	e1 2c       	mov	r14, r1
     3b4:	f1 2c       	mov	r15, r1
     3b6:	a7 01       	movw	r20, r14
     3b8:	96 01       	movw	r18, r12
     3ba:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodsi4>
     3be:	be 01       	movw	r22, r28
     3c0:	80 e3       	ldi	r24, 0x30	; 48
     3c2:	82 0f       	add	r24, r18
     3c4:	0e 94 67 00 	call	0xce	; 0xce <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
     3c8:	21 96       	adiw	r28, 0x01	; 1
     3ca:	c5 01       	movw	r24, r10
     3cc:	b4 01       	movw	r22, r8
     3ce:	a7 01       	movw	r20, r14
     3d0:	96 01       	movw	r18, r12
     3d2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divmodsi4>
     3d6:	86 2f       	mov	r24, r22
     3d8:	be 01       	movw	r22, r28
     3da:	80 5d       	subi	r24, 0xD0	; 208
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	df 90       	pop	r13
     3e6:	cf 90       	pop	r12
     3e8:	bf 90       	pop	r11
     3ea:	af 90       	pop	r10
     3ec:	9f 90       	pop	r9
     3ee:	8f 90       	pop	r8

void printAt(long num, int pos) {
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
     3f0:	0c 94 67 00 	jmp	0xce	; 0xce <writeChar>

000003f4 <main>:
#include "LCD.h"
#include <avr/io.h>


int main(void)
{
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	2e 97       	sbiw	r28, 0x0e	; 14
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
	LCDInit();
     40c:	0e 94 57 00 	call	0xae	; 0xae <LCDInit>
    pulse p = initPulse(0,0);
     410:	8e 01       	movw	r16, r28
     412:	08 5f       	subi	r16, 0xF8	; 248
     414:	1f 4f       	sbci	r17, 0xFF	; 255
     416:	87 e0       	ldi	r24, 0x07	; 7
     418:	f8 01       	movw	r30, r16
     41a:	11 92       	st	Z+, r1
     41c:	8a 95       	dec	r24
     41e:	e9 f7       	brne	.-6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	pulse q = initPulse(10,4);
     420:	87 e0       	ldi	r24, 0x07	; 7
     422:	e6 e0       	ldi	r30, 0x06	; 6
     424:	f1 e0       	ldi	r31, 0x01	; 1
     426:	de 01       	movw	r26, r28
     428:	11 96       	adiw	r26, 0x01	; 1
     42a:	01 90       	ld	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	8a 95       	dec	r24
     430:	e1 f7       	brne	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	activate(&p);
     432:	c8 01       	movw	r24, r16
     434:	0e 94 58 02 	call	0x4b0	; 0x4b0 <activate>
	INSTALL(&p, addFreq, IRQ_PCINT1);
     438:	42 e0       	ldi	r20, 0x02	; 2
     43a:	6a e3       	ldi	r22, 0x3A	; 58
     43c:	72 e0       	ldi	r23, 0x02	; 2
     43e:	c8 01       	movw	r24, r16
     440:	0e 94 97 0b 	call	0x172e	; 0x172e <install>
	INSTALL(&q, addFreq, IRQ_PCINT1);
     444:	42 e0       	ldi	r20, 0x02	; 2
     446:	6a e3       	ldi	r22, 0x3A	; 58
     448:	72 e0       	ldi	r23, 0x02	; 2
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	0e 94 97 0b 	call	0x172e	; 0x172e <install>
	addFreq(&q);
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	0e 94 3a 02 	call	0x474	; 0x474 <addFreq>
	//printAt(getFreq(&p), getPos(&p));
	//printAt(getFreq(&q), getPos(&q));
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	2e 96       	adiw	r28, 0x0e	; 14
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <addFreq>:
void storeFreq(pulse *p) {
	p->saved_freq = p->freq;
}

void restoreFreq(pulse *p) {
	p->freq = p->saved_freq;
     474:	fc 01       	movw	r30, r24
     476:	83 b1       	in	r24, 0x03	; 3
     478:	61 81       	ldd	r22, Z+1	; 0x01
     47a:	72 81       	ldd	r23, Z+2	; 0x02
     47c:	63 36       	cpi	r22, 0x63	; 99
     47e:	71 05       	cpc	r23, r1
     480:	7c f4       	brge	.+30     	; 0x4a0 <addFreq+0x2c>
     482:	90 81       	ld	r25, Z
     484:	99 23       	and	r25, r25
     486:	61 f0       	breq	.+24     	; 0x4a0 <addFreq+0x2c>
     488:	86 fd       	sbrc	r24, 6
     48a:	04 c0       	rjmp	.+8      	; 0x494 <addFreq+0x20>
     48c:	6f 5f       	subi	r22, 0xFF	; 255
     48e:	7f 4f       	sbci	r23, 0xFF	; 255
     490:	72 83       	std	Z+2, r23	; 0x02
     492:	61 83       	std	Z+1, r22	; 0x01
     494:	1f 99       	sbic	0x03, 7	; 3
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <addFreq+0x2c>
     498:	61 50       	subi	r22, 0x01	; 1
     49a:	71 09       	sbc	r23, r1
     49c:	72 83       	std	Z+2, r23	; 0x02
     49e:	61 83       	std	Z+1, r22	; 0x01
     4a0:	45 81       	ldd	r20, Z+5	; 0x05
     4a2:	56 81       	ldd	r21, Z+6	; 0x06
     4a4:	07 2e       	mov	r0, r23
     4a6:	00 0c       	add	r0, r0
     4a8:	88 0b       	sbc	r24, r24
     4aa:	99 0b       	sbc	r25, r25
     4ac:	0c 94 c3 01 	jmp	0x386	; 0x386 <printAt>

000004b0 <activate>:
}

void activate(pulse *p) {
	p->active = true;
     4b0:	21 e0       	ldi	r18, 0x01	; 1
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 83       	st	Z, r18
     4b6:	08 95       	ret

000004b8 <dispatch>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	00 d0       	rcall	.+0      	; 0x4be <dispatch+0x6>
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	9a 83       	std	Y+2, r25	; 0x02
     4c4:	89 83       	std	Y+1, r24	; 0x01
     4c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     4ca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     4ce:	06 96       	adiw	r24, 0x06	; 6
     4d0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <setjmp>
     4d4:	89 2b       	or	r24, r25
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <dispatch+0x2a>
     4d8:	0f 90       	pop	r0
     4da:	0f 90       	pop	r0
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	08 95       	ret
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	9a 81       	ldd	r25, Y+2	; 0x02
     4e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     4ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	06 96       	adiw	r24, 0x06	; 6
     4f4:	0e 94 18 0c 	call	0x1830	; 0x1830 <longjmp>

000004f8 <schedule>:
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <msgQ>
     504:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <msgQ+0x1>
     508:	30 97       	sbiw	r30, 0x00	; 0
     50a:	f1 f0       	breq	.+60     	; 0x548 <__stack+0x49>
     50c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     510:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     514:	00 97       	sbiw	r24, 0x00	; 0
     516:	c1 f0       	breq	.+48     	; 0x548 <__stack+0x49>
     518:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     51c:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     520:	aa 81       	ldd	r26, Y+2	; 0x02
     522:	bb 81       	ldd	r27, Y+3	; 0x03
     524:	10 97       	sbiw	r26, 0x00	; 0
     526:	a9 f0       	breq	.+42     	; 0x552 <__stack+0x53>
     528:	46 81       	ldd	r20, Z+6	; 0x06
     52a:	57 81       	ldd	r21, Z+7	; 0x07
     52c:	60 85       	ldd	r22, Z+8	; 0x08
     52e:	71 85       	ldd	r23, Z+9	; 0x09
     530:	16 96       	adiw	r26, 0x06	; 6
     532:	0d 91       	ld	r16, X+
     534:	1d 91       	ld	r17, X+
     536:	2d 91       	ld	r18, X+
     538:	3c 91       	ld	r19, X
     53a:	19 97       	sbiw	r26, 0x09	; 9
     53c:	40 1b       	sub	r20, r16
     53e:	51 0b       	sbc	r21, r17
     540:	62 0b       	sbc	r22, r18
     542:	73 0b       	sbc	r23, r19
     544:	77 fd       	sbrc	r23, 7
     546:	05 c0       	rjmp	.+10     	; 0x552 <__stack+0x53>
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	1f 91       	pop	r17
     54e:	0f 91       	pop	r16
     550:	08 95       	ret
     552:	fc 01       	movw	r30, r24
     554:	20 81       	ld	r18, Z
     556:	31 81       	ldd	r19, Z+1	; 0x01
     558:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     55c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     560:	d1 83       	std	Z+1, r29	; 0x01
     562:	c0 83       	st	Z, r28
     564:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     568:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <dispatch>

00000578 <__vector_1>:
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	2f 93       	push	r18
     584:	3f 93       	push	r19
     586:	4f 93       	push	r20
     588:	5f 93       	push	r21
     58a:	6f 93       	push	r22
     58c:	7f 93       	push	r23
     58e:	8f 93       	push	r24
     590:	9f 93       	push	r25
     592:	af 93       	push	r26
     594:	bf 93       	push	r27
     596:	ef 93       	push	r30
     598:	ff 93       	push	r31
     59a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     59e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     5a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     5a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     5aa:	c9 01       	movw	r24, r18
     5ac:	03 2e       	mov	r0, r19
     5ae:	00 0c       	add	r0, r0
     5b0:	aa 0b       	sbc	r26, r26
     5b2:	bb 0b       	sbc	r27, r27
     5b4:	dc 01       	movw	r26, r24
     5b6:	99 27       	eor	r25, r25
     5b8:	88 27       	eor	r24, r24
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	84 2b       	or	r24, r20
     5c0:	95 2b       	or	r25, r21
     5c2:	a6 2b       	or	r26, r22
     5c4:	b7 2b       	or	r27, r23
     5c6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     5ca:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     5ce:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     5d2:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     5d6:	b0 9b       	sbis	0x16, 0	; 22
     5d8:	1b c0       	rjmp	.+54     	; 0x610 <__vector_1+0x98>
     5da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     5de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     5e2:	c9 01       	movw	r24, r18
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	09 2e       	mov	r0, r25
     5e8:	00 0c       	add	r0, r0
     5ea:	aa 0b       	sbc	r26, r26
     5ec:	bb 0b       	sbc	r27, r27
     5ee:	dc 01       	movw	r26, r24
     5f0:	99 27       	eor	r25, r25
     5f2:	88 27       	eor	r24, r24
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	84 2b       	or	r24, r20
     5fa:	95 2b       	or	r25, r21
     5fc:	a6 2b       	or	r26, r22
     5fe:	b7 2b       	or	r27, r23
     600:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     604:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     608:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     60c:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     610:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <mtable>
     614:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <mtable+0x1>
     618:	30 97       	sbiw	r30, 0x00	; 0
     61a:	39 f0       	breq	.+14     	; 0x62a <__vector_1+0xb2>
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	70 e0       	ldi	r23, 0x00	; 0
     620:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <otable>
     624:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <otable+0x1>
     628:	09 95       	icall
     62a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     62e:	ff 91       	pop	r31
     630:	ef 91       	pop	r30
     632:	bf 91       	pop	r27
     634:	af 91       	pop	r26
     636:	9f 91       	pop	r25
     638:	8f 91       	pop	r24
     63a:	7f 91       	pop	r23
     63c:	6f 91       	pop	r22
     63e:	5f 91       	pop	r21
     640:	4f 91       	pop	r20
     642:	3f 91       	pop	r19
     644:	2f 91       	pop	r18
     646:	0f 90       	pop	r0
     648:	0f be       	out	0x3f, r0	; 63
     64a:	0f 90       	pop	r0
     64c:	1f 90       	pop	r1
     64e:	18 95       	reti

00000650 <__vector_2>:
     650:	1f 92       	push	r1
     652:	0f 92       	push	r0
     654:	0f b6       	in	r0, 0x3f	; 63
     656:	0f 92       	push	r0
     658:	11 24       	eor	r1, r1
     65a:	2f 93       	push	r18
     65c:	3f 93       	push	r19
     65e:	4f 93       	push	r20
     660:	5f 93       	push	r21
     662:	6f 93       	push	r22
     664:	7f 93       	push	r23
     666:	8f 93       	push	r24
     668:	9f 93       	push	r25
     66a:	af 93       	push	r26
     66c:	bf 93       	push	r27
     66e:	ef 93       	push	r30
     670:	ff 93       	push	r31
     672:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     676:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     67a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     67e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     682:	c9 01       	movw	r24, r18
     684:	03 2e       	mov	r0, r19
     686:	00 0c       	add	r0, r0
     688:	aa 0b       	sbc	r26, r26
     68a:	bb 0b       	sbc	r27, r27
     68c:	dc 01       	movw	r26, r24
     68e:	99 27       	eor	r25, r25
     690:	88 27       	eor	r24, r24
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	84 2b       	or	r24, r20
     698:	95 2b       	or	r25, r21
     69a:	a6 2b       	or	r26, r22
     69c:	b7 2b       	or	r27, r23
     69e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     6a2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     6a6:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     6aa:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     6ae:	b0 9b       	sbis	0x16, 0	; 22
     6b0:	1b c0       	rjmp	.+54     	; 0x6e8 <__vector_2+0x98>
     6b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     6b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     6ba:	c9 01       	movw	r24, r18
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	09 2e       	mov	r0, r25
     6c0:	00 0c       	add	r0, r0
     6c2:	aa 0b       	sbc	r26, r26
     6c4:	bb 0b       	sbc	r27, r27
     6c6:	dc 01       	movw	r26, r24
     6c8:	99 27       	eor	r25, r25
     6ca:	88 27       	eor	r24, r24
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	84 2b       	or	r24, r20
     6d2:	95 2b       	or	r25, r21
     6d4:	a6 2b       	or	r26, r22
     6d6:	b7 2b       	or	r27, r23
     6d8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     6dc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     6e0:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     6e4:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     6e8:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <mtable+0x2>
     6ec:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <mtable+0x3>
     6f0:	30 97       	sbiw	r30, 0x00	; 0
     6f2:	39 f0       	breq	.+14     	; 0x702 <__vector_2+0xb2>
     6f4:	61 e0       	ldi	r22, 0x01	; 1
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <otable+0x2>
     6fc:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <otable+0x3>
     700:	09 95       	icall
     702:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     706:	ff 91       	pop	r31
     708:	ef 91       	pop	r30
     70a:	bf 91       	pop	r27
     70c:	af 91       	pop	r26
     70e:	9f 91       	pop	r25
     710:	8f 91       	pop	r24
     712:	7f 91       	pop	r23
     714:	6f 91       	pop	r22
     716:	5f 91       	pop	r21
     718:	4f 91       	pop	r20
     71a:	3f 91       	pop	r19
     71c:	2f 91       	pop	r18
     71e:	0f 90       	pop	r0
     720:	0f be       	out	0x3f, r0	; 63
     722:	0f 90       	pop	r0
     724:	1f 90       	pop	r1
     726:	18 95       	reti

00000728 <__vector_3>:
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	2f 93       	push	r18
     734:	3f 93       	push	r19
     736:	4f 93       	push	r20
     738:	5f 93       	push	r21
     73a:	6f 93       	push	r22
     73c:	7f 93       	push	r23
     73e:	8f 93       	push	r24
     740:	9f 93       	push	r25
     742:	af 93       	push	r26
     744:	bf 93       	push	r27
     746:	ef 93       	push	r30
     748:	ff 93       	push	r31
     74a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     74e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     752:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     756:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     75a:	c9 01       	movw	r24, r18
     75c:	03 2e       	mov	r0, r19
     75e:	00 0c       	add	r0, r0
     760:	aa 0b       	sbc	r26, r26
     762:	bb 0b       	sbc	r27, r27
     764:	dc 01       	movw	r26, r24
     766:	99 27       	eor	r25, r25
     768:	88 27       	eor	r24, r24
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
     76e:	84 2b       	or	r24, r20
     770:	95 2b       	or	r25, r21
     772:	a6 2b       	or	r26, r22
     774:	b7 2b       	or	r27, r23
     776:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     77a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     77e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     782:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     786:	b0 9b       	sbis	0x16, 0	; 22
     788:	1b c0       	rjmp	.+54     	; 0x7c0 <__vector_3+0x98>
     78a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     78e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     792:	c9 01       	movw	r24, r18
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	09 2e       	mov	r0, r25
     798:	00 0c       	add	r0, r0
     79a:	aa 0b       	sbc	r26, r26
     79c:	bb 0b       	sbc	r27, r27
     79e:	dc 01       	movw	r26, r24
     7a0:	99 27       	eor	r25, r25
     7a2:	88 27       	eor	r24, r24
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	84 2b       	or	r24, r20
     7aa:	95 2b       	or	r25, r21
     7ac:	a6 2b       	or	r26, r22
     7ae:	b7 2b       	or	r27, r23
     7b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     7b4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     7b8:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     7bc:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     7c0:	e0 91 b4 01 	lds	r30, 0x01B4	; 0x8001b4 <mtable+0x4>
     7c4:	f0 91 b5 01 	lds	r31, 0x01B5	; 0x8001b5 <mtable+0x5>
     7c8:	30 97       	sbiw	r30, 0x00	; 0
     7ca:	39 f0       	breq	.+14     	; 0x7da <__vector_3+0xb2>
     7cc:	62 e0       	ldi	r22, 0x02	; 2
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <otable+0x4>
     7d4:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <otable+0x5>
     7d8:	09 95       	icall
     7da:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     7de:	ff 91       	pop	r31
     7e0:	ef 91       	pop	r30
     7e2:	bf 91       	pop	r27
     7e4:	af 91       	pop	r26
     7e6:	9f 91       	pop	r25
     7e8:	8f 91       	pop	r24
     7ea:	7f 91       	pop	r23
     7ec:	6f 91       	pop	r22
     7ee:	5f 91       	pop	r21
     7f0:	4f 91       	pop	r20
     7f2:	3f 91       	pop	r19
     7f4:	2f 91       	pop	r18
     7f6:	0f 90       	pop	r0
     7f8:	0f be       	out	0x3f, r0	; 63
     7fa:	0f 90       	pop	r0
     7fc:	1f 90       	pop	r1
     7fe:	18 95       	reti

00000800 <__vector_4>:
     800:	1f 92       	push	r1
     802:	0f 92       	push	r0
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	0f 92       	push	r0
     808:	11 24       	eor	r1, r1
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
     822:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     826:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     82a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     82e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     832:	c9 01       	movw	r24, r18
     834:	03 2e       	mov	r0, r19
     836:	00 0c       	add	r0, r0
     838:	aa 0b       	sbc	r26, r26
     83a:	bb 0b       	sbc	r27, r27
     83c:	dc 01       	movw	r26, r24
     83e:	99 27       	eor	r25, r25
     840:	88 27       	eor	r24, r24
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	84 2b       	or	r24, r20
     848:	95 2b       	or	r25, r21
     84a:	a6 2b       	or	r26, r22
     84c:	b7 2b       	or	r27, r23
     84e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     852:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     856:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     85a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     85e:	b0 9b       	sbis	0x16, 0	; 22
     860:	1b c0       	rjmp	.+54     	; 0x898 <__vector_4+0x98>
     862:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     866:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     86a:	c9 01       	movw	r24, r18
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	09 2e       	mov	r0, r25
     870:	00 0c       	add	r0, r0
     872:	aa 0b       	sbc	r26, r26
     874:	bb 0b       	sbc	r27, r27
     876:	dc 01       	movw	r26, r24
     878:	99 27       	eor	r25, r25
     87a:	88 27       	eor	r24, r24
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	84 2b       	or	r24, r20
     882:	95 2b       	or	r25, r21
     884:	a6 2b       	or	r26, r22
     886:	b7 2b       	or	r27, r23
     888:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     88c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     890:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     894:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     898:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <mtable+0x6>
     89c:	f0 91 b7 01 	lds	r31, 0x01B7	; 0x8001b7 <mtable+0x7>
     8a0:	30 97       	sbiw	r30, 0x00	; 0
     8a2:	39 f0       	breq	.+14     	; 0x8b2 <__vector_4+0xb2>
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <otable+0x6>
     8ac:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <otable+0x7>
     8b0:	09 95       	icall
     8b2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	bf 91       	pop	r27
     8bc:	af 91       	pop	r26
     8be:	9f 91       	pop	r25
     8c0:	8f 91       	pop	r24
     8c2:	7f 91       	pop	r23
     8c4:	6f 91       	pop	r22
     8c6:	5f 91       	pop	r21
     8c8:	4f 91       	pop	r20
     8ca:	3f 91       	pop	r19
     8cc:	2f 91       	pop	r18
     8ce:	0f 90       	pop	r0
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_5>:
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	0f 92       	push	r0
     8e0:	11 24       	eor	r1, r1
     8e2:	2f 93       	push	r18
     8e4:	3f 93       	push	r19
     8e6:	4f 93       	push	r20
     8e8:	5f 93       	push	r21
     8ea:	6f 93       	push	r22
     8ec:	7f 93       	push	r23
     8ee:	8f 93       	push	r24
     8f0:	9f 93       	push	r25
     8f2:	af 93       	push	r26
     8f4:	bf 93       	push	r27
     8f6:	ef 93       	push	r30
     8f8:	ff 93       	push	r31
     8fa:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     8fe:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     902:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     906:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     90a:	c9 01       	movw	r24, r18
     90c:	03 2e       	mov	r0, r19
     90e:	00 0c       	add	r0, r0
     910:	aa 0b       	sbc	r26, r26
     912:	bb 0b       	sbc	r27, r27
     914:	dc 01       	movw	r26, r24
     916:	99 27       	eor	r25, r25
     918:	88 27       	eor	r24, r24
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	84 2b       	or	r24, r20
     920:	95 2b       	or	r25, r21
     922:	a6 2b       	or	r26, r22
     924:	b7 2b       	or	r27, r23
     926:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     92a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     92e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     932:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     936:	b0 9b       	sbis	0x16, 0	; 22
     938:	1b c0       	rjmp	.+54     	; 0x970 <__vector_5+0x98>
     93a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     93e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     942:	c9 01       	movw	r24, r18
     944:	01 96       	adiw	r24, 0x01	; 1
     946:	09 2e       	mov	r0, r25
     948:	00 0c       	add	r0, r0
     94a:	aa 0b       	sbc	r26, r26
     94c:	bb 0b       	sbc	r27, r27
     94e:	dc 01       	movw	r26, r24
     950:	99 27       	eor	r25, r25
     952:	88 27       	eor	r24, r24
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	84 2b       	or	r24, r20
     95a:	95 2b       	or	r25, r21
     95c:	a6 2b       	or	r26, r22
     95e:	b7 2b       	or	r27, r23
     960:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     964:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     968:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     96c:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     970:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <mtable+0x8>
     974:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <mtable+0x9>
     978:	30 97       	sbiw	r30, 0x00	; 0
     97a:	39 f0       	breq	.+14     	; 0x98a <__vector_5+0xb2>
     97c:	64 e0       	ldi	r22, 0x04	; 4
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <otable+0x8>
     984:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <otable+0x9>
     988:	09 95       	icall
     98a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <__vector_10>:
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
     9d2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     9d6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     9da:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9de:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9e2:	c9 01       	movw	r24, r18
     9e4:	03 2e       	mov	r0, r19
     9e6:	00 0c       	add	r0, r0
     9e8:	aa 0b       	sbc	r26, r26
     9ea:	bb 0b       	sbc	r27, r27
     9ec:	dc 01       	movw	r26, r24
     9ee:	99 27       	eor	r25, r25
     9f0:	88 27       	eor	r24, r24
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	84 2b       	or	r24, r20
     9f8:	95 2b       	or	r25, r21
     9fa:	a6 2b       	or	r26, r22
     9fc:	b7 2b       	or	r27, r23
     9fe:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     a02:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     a06:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     a0a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     a0e:	b0 9b       	sbis	0x16, 0	; 22
     a10:	1b c0       	rjmp	.+54     	; 0xa48 <__vector_10+0x98>
     a12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a1a:	c9 01       	movw	r24, r18
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	09 2e       	mov	r0, r25
     a20:	00 0c       	add	r0, r0
     a22:	aa 0b       	sbc	r26, r26
     a24:	bb 0b       	sbc	r27, r27
     a26:	dc 01       	movw	r26, r24
     a28:	99 27       	eor	r25, r25
     a2a:	88 27       	eor	r24, r24
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	84 2b       	or	r24, r20
     a32:	95 2b       	or	r25, r21
     a34:	a6 2b       	or	r26, r22
     a36:	b7 2b       	or	r27, r23
     a38:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     a3c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     a40:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     a44:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     a48:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <mtable+0xa>
     a4c:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <mtable+0xb>
     a50:	30 97       	sbiw	r30, 0x00	; 0
     a52:	39 f0       	breq	.+14     	; 0xa62 <__vector_10+0xb2>
     a54:	65 e0       	ldi	r22, 0x05	; 5
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <otable+0xa>
     a5c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <otable+0xb>
     a60:	09 95       	icall
     a62:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	bf 91       	pop	r27
     a6c:	af 91       	pop	r26
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	7f 91       	pop	r23
     a74:	6f 91       	pop	r22
     a76:	5f 91       	pop	r21
     a78:	4f 91       	pop	r20
     a7a:	3f 91       	pop	r19
     a7c:	2f 91       	pop	r18
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_11>:
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	2f 93       	push	r18
     a94:	3f 93       	push	r19
     a96:	4f 93       	push	r20
     a98:	5f 93       	push	r21
     a9a:	6f 93       	push	r22
     a9c:	7f 93       	push	r23
     a9e:	8f 93       	push	r24
     aa0:	9f 93       	push	r25
     aa2:	af 93       	push	r26
     aa4:	bf 93       	push	r27
     aa6:	ef 93       	push	r30
     aa8:	ff 93       	push	r31
     aaa:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     aae:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     ab2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ab6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     aba:	c9 01       	movw	r24, r18
     abc:	03 2e       	mov	r0, r19
     abe:	00 0c       	add	r0, r0
     ac0:	aa 0b       	sbc	r26, r26
     ac2:	bb 0b       	sbc	r27, r27
     ac4:	dc 01       	movw	r26, r24
     ac6:	99 27       	eor	r25, r25
     ac8:	88 27       	eor	r24, r24
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	84 2b       	or	r24, r20
     ad0:	95 2b       	or	r25, r21
     ad2:	a6 2b       	or	r26, r22
     ad4:	b7 2b       	or	r27, r23
     ad6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     ada:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     ade:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     ae2:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     ae6:	b0 9b       	sbis	0x16, 0	; 22
     ae8:	1b c0       	rjmp	.+54     	; 0xb20 <__vector_11+0x98>
     aea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     aee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     af2:	c9 01       	movw	r24, r18
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	09 2e       	mov	r0, r25
     af8:	00 0c       	add	r0, r0
     afa:	aa 0b       	sbc	r26, r26
     afc:	bb 0b       	sbc	r27, r27
     afe:	dc 01       	movw	r26, r24
     b00:	99 27       	eor	r25, r25
     b02:	88 27       	eor	r24, r24
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	84 2b       	or	r24, r20
     b0a:	95 2b       	or	r25, r21
     b0c:	a6 2b       	or	r26, r22
     b0e:	b7 2b       	or	r27, r23
     b10:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     b14:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     b18:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     b1c:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     b20:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <mtable+0xc>
     b24:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <mtable+0xd>
     b28:	30 97       	sbiw	r30, 0x00	; 0
     b2a:	39 f0       	breq	.+14     	; 0xb3a <__vector_11+0xb2>
     b2c:	66 e0       	ldi	r22, 0x06	; 6
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <otable+0xc>
     b34:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <otable+0xd>
     b38:	09 95       	icall
     b3a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     b3e:	ff 91       	pop	r31
     b40:	ef 91       	pop	r30
     b42:	bf 91       	pop	r27
     b44:	af 91       	pop	r26
     b46:	9f 91       	pop	r25
     b48:	8f 91       	pop	r24
     b4a:	7f 91       	pop	r23
     b4c:	6f 91       	pop	r22
     b4e:	5f 91       	pop	r21
     b50:	4f 91       	pop	r20
     b52:	3f 91       	pop	r19
     b54:	2f 91       	pop	r18
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <__vector_12>:
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     b86:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     b8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b92:	c9 01       	movw	r24, r18
     b94:	03 2e       	mov	r0, r19
     b96:	00 0c       	add	r0, r0
     b98:	aa 0b       	sbc	r26, r26
     b9a:	bb 0b       	sbc	r27, r27
     b9c:	dc 01       	movw	r26, r24
     b9e:	99 27       	eor	r25, r25
     ba0:	88 27       	eor	r24, r24
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	84 2b       	or	r24, r20
     ba8:	95 2b       	or	r25, r21
     baa:	a6 2b       	or	r26, r22
     bac:	b7 2b       	or	r27, r23
     bae:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     bb2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     bb6:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     bba:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     bbe:	b0 9b       	sbis	0x16, 0	; 22
     bc0:	1b c0       	rjmp	.+54     	; 0xbf8 <__vector_12+0x98>
     bc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     bca:	c9 01       	movw	r24, r18
     bcc:	01 96       	adiw	r24, 0x01	; 1
     bce:	09 2e       	mov	r0, r25
     bd0:	00 0c       	add	r0, r0
     bd2:	aa 0b       	sbc	r26, r26
     bd4:	bb 0b       	sbc	r27, r27
     bd6:	dc 01       	movw	r26, r24
     bd8:	99 27       	eor	r25, r25
     bda:	88 27       	eor	r24, r24
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	70 e0       	ldi	r23, 0x00	; 0
     be0:	84 2b       	or	r24, r20
     be2:	95 2b       	or	r25, r21
     be4:	a6 2b       	or	r26, r22
     be6:	b7 2b       	or	r27, r23
     be8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     bec:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     bf0:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     bf4:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     bf8:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable+0xe>
     bfc:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0xf>
     c00:	30 97       	sbiw	r30, 0x00	; 0
     c02:	39 f0       	breq	.+14     	; 0xc12 <__vector_12+0xb2>
     c04:	67 e0       	ldi	r22, 0x07	; 7
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable+0xe>
     c0c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0xf>
     c10:	09 95       	icall
     c12:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <__vector_13>:
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
     c5a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     c5e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     c62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c6a:	c9 01       	movw	r24, r18
     c6c:	03 2e       	mov	r0, r19
     c6e:	00 0c       	add	r0, r0
     c70:	aa 0b       	sbc	r26, r26
     c72:	bb 0b       	sbc	r27, r27
     c74:	dc 01       	movw	r26, r24
     c76:	99 27       	eor	r25, r25
     c78:	88 27       	eor	r24, r24
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	70 e0       	ldi	r23, 0x00	; 0
     c7e:	84 2b       	or	r24, r20
     c80:	95 2b       	or	r25, r21
     c82:	a6 2b       	or	r26, r22
     c84:	b7 2b       	or	r27, r23
     c86:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     c8a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     c8e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     c92:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     c96:	b0 9b       	sbis	0x16, 0	; 22
     c98:	1b c0       	rjmp	.+54     	; 0xcd0 <__vector_13+0x98>
     c9a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c9e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ca2:	c9 01       	movw	r24, r18
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	09 2e       	mov	r0, r25
     ca8:	00 0c       	add	r0, r0
     caa:	aa 0b       	sbc	r26, r26
     cac:	bb 0b       	sbc	r27, r27
     cae:	dc 01       	movw	r26, r24
     cb0:	99 27       	eor	r25, r25
     cb2:	88 27       	eor	r24, r24
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	84 2b       	or	r24, r20
     cba:	95 2b       	or	r25, r21
     cbc:	a6 2b       	or	r26, r22
     cbe:	b7 2b       	or	r27, r23
     cc0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     cc4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     cc8:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     ccc:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     cd0:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x10>
     cd4:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x11>
     cd8:	30 97       	sbiw	r30, 0x00	; 0
     cda:	39 f0       	breq	.+14     	; 0xcea <__vector_13+0xb2>
     cdc:	68 e0       	ldi	r22, 0x08	; 8
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x10>
     ce4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x11>
     ce8:	09 95       	icall
     cea:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     cee:	ff 91       	pop	r31
     cf0:	ef 91       	pop	r30
     cf2:	bf 91       	pop	r27
     cf4:	af 91       	pop	r26
     cf6:	9f 91       	pop	r25
     cf8:	8f 91       	pop	r24
     cfa:	7f 91       	pop	r23
     cfc:	6f 91       	pop	r22
     cfe:	5f 91       	pop	r21
     d00:	4f 91       	pop	r20
     d02:	3f 91       	pop	r19
     d04:	2f 91       	pop	r18
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_14>:
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
     d2c:	bf 93       	push	r27
     d2e:	ef 93       	push	r30
     d30:	ff 93       	push	r31
     d32:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     d36:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     d3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d42:	c9 01       	movw	r24, r18
     d44:	03 2e       	mov	r0, r19
     d46:	00 0c       	add	r0, r0
     d48:	aa 0b       	sbc	r26, r26
     d4a:	bb 0b       	sbc	r27, r27
     d4c:	dc 01       	movw	r26, r24
     d4e:	99 27       	eor	r25, r25
     d50:	88 27       	eor	r24, r24
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	84 2b       	or	r24, r20
     d58:	95 2b       	or	r25, r21
     d5a:	a6 2b       	or	r26, r22
     d5c:	b7 2b       	or	r27, r23
     d5e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     d62:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     d66:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     d6a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     d6e:	b0 9b       	sbis	0x16, 0	; 22
     d70:	1b c0       	rjmp	.+54     	; 0xda8 <__vector_14+0x98>
     d72:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d76:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d7a:	c9 01       	movw	r24, r18
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	09 2e       	mov	r0, r25
     d80:	00 0c       	add	r0, r0
     d82:	aa 0b       	sbc	r26, r26
     d84:	bb 0b       	sbc	r27, r27
     d86:	dc 01       	movw	r26, r24
     d88:	99 27       	eor	r25, r25
     d8a:	88 27       	eor	r24, r24
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	84 2b       	or	r24, r20
     d92:	95 2b       	or	r25, r21
     d94:	a6 2b       	or	r26, r22
     d96:	b7 2b       	or	r27, r23
     d98:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     d9c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     da0:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     da4:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     da8:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x12>
     dac:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x13>
     db0:	30 97       	sbiw	r30, 0x00	; 0
     db2:	39 f0       	breq	.+14     	; 0xdc2 <__vector_14+0xb2>
     db4:	69 e0       	ldi	r22, 0x09	; 9
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x12>
     dbc:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x13>
     dc0:	09 95       	icall
     dc2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     dc6:	ff 91       	pop	r31
     dc8:	ef 91       	pop	r30
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	0f 90       	pop	r0
     de4:	1f 90       	pop	r1
     de6:	18 95       	reti

00000de8 <__vector_15>:
     de8:	1f 92       	push	r1
     dea:	0f 92       	push	r0
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	0f 92       	push	r0
     df0:	11 24       	eor	r1, r1
     df2:	2f 93       	push	r18
     df4:	3f 93       	push	r19
     df6:	4f 93       	push	r20
     df8:	5f 93       	push	r21
     dfa:	6f 93       	push	r22
     dfc:	7f 93       	push	r23
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	af 93       	push	r26
     e04:	bf 93       	push	r27
     e06:	ef 93       	push	r30
     e08:	ff 93       	push	r31
     e0a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     e0e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     e12:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e16:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e1a:	c9 01       	movw	r24, r18
     e1c:	03 2e       	mov	r0, r19
     e1e:	00 0c       	add	r0, r0
     e20:	aa 0b       	sbc	r26, r26
     e22:	bb 0b       	sbc	r27, r27
     e24:	dc 01       	movw	r26, r24
     e26:	99 27       	eor	r25, r25
     e28:	88 27       	eor	r24, r24
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	84 2b       	or	r24, r20
     e30:	95 2b       	or	r25, r21
     e32:	a6 2b       	or	r26, r22
     e34:	b7 2b       	or	r27, r23
     e36:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     e3a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     e3e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     e42:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     e46:	b0 9b       	sbis	0x16, 0	; 22
     e48:	1b c0       	rjmp	.+54     	; 0xe80 <__vector_15+0x98>
     e4a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e4e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e52:	c9 01       	movw	r24, r18
     e54:	01 96       	adiw	r24, 0x01	; 1
     e56:	09 2e       	mov	r0, r25
     e58:	00 0c       	add	r0, r0
     e5a:	aa 0b       	sbc	r26, r26
     e5c:	bb 0b       	sbc	r27, r27
     e5e:	dc 01       	movw	r26, r24
     e60:	99 27       	eor	r25, r25
     e62:	88 27       	eor	r24, r24
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	84 2b       	or	r24, r20
     e6a:	95 2b       	or	r25, r21
     e6c:	a6 2b       	or	r26, r22
     e6e:	b7 2b       	or	r27, r23
     e70:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     e74:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     e78:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     e7c:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     e80:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x14>
     e84:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x15>
     e88:	30 97       	sbiw	r30, 0x00	; 0
     e8a:	39 f0       	breq	.+14     	; 0xe9a <__vector_15+0xb2>
     e8c:	6a e0       	ldi	r22, 0x0A	; 10
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x14>
     e94:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x15>
     e98:	09 95       	icall
     e9a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <__vector_16>:
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
     ee2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     ee6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     eea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     eee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ef2:	c9 01       	movw	r24, r18
     ef4:	03 2e       	mov	r0, r19
     ef6:	00 0c       	add	r0, r0
     ef8:	aa 0b       	sbc	r26, r26
     efa:	bb 0b       	sbc	r27, r27
     efc:	dc 01       	movw	r26, r24
     efe:	99 27       	eor	r25, r25
     f00:	88 27       	eor	r24, r24
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	84 2b       	or	r24, r20
     f08:	95 2b       	or	r25, r21
     f0a:	a6 2b       	or	r26, r22
     f0c:	b7 2b       	or	r27, r23
     f0e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     f12:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     f16:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     f1a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     f1e:	b0 9b       	sbis	0x16, 0	; 22
     f20:	1b c0       	rjmp	.+54     	; 0xf58 <__vector_16+0x98>
     f22:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f26:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f2a:	c9 01       	movw	r24, r18
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	09 2e       	mov	r0, r25
     f30:	00 0c       	add	r0, r0
     f32:	aa 0b       	sbc	r26, r26
     f34:	bb 0b       	sbc	r27, r27
     f36:	dc 01       	movw	r26, r24
     f38:	99 27       	eor	r25, r25
     f3a:	88 27       	eor	r24, r24
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	84 2b       	or	r24, r20
     f42:	95 2b       	or	r25, r21
     f44:	a6 2b       	or	r26, r22
     f46:	b7 2b       	or	r27, r23
     f48:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     f4c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     f50:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     f54:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     f58:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x16>
     f5c:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x17>
     f60:	30 97       	sbiw	r30, 0x00	; 0
     f62:	39 f0       	breq	.+14     	; 0xf72 <__vector_16+0xb2>
     f64:	6b e0       	ldi	r22, 0x0B	; 11
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x16>
     f6c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x17>
     f70:	09 95       	icall
     f72:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
     f76:	ff 91       	pop	r31
     f78:	ef 91       	pop	r30
     f7a:	bf 91       	pop	r27
     f7c:	af 91       	pop	r26
     f7e:	9f 91       	pop	r25
     f80:	8f 91       	pop	r24
     f82:	7f 91       	pop	r23
     f84:	6f 91       	pop	r22
     f86:	5f 91       	pop	r21
     f88:	4f 91       	pop	r20
     f8a:	3f 91       	pop	r19
     f8c:	2f 91       	pop	r18
     f8e:	0f 90       	pop	r0
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	0f 90       	pop	r0
     f94:	1f 90       	pop	r1
     f96:	18 95       	reti

00000f98 <__vector_17>:
     f98:	1f 92       	push	r1
     f9a:	0f 92       	push	r0
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	0f 92       	push	r0
     fa0:	11 24       	eor	r1, r1
     fa2:	2f 93       	push	r18
     fa4:	3f 93       	push	r19
     fa6:	4f 93       	push	r20
     fa8:	5f 93       	push	r21
     faa:	6f 93       	push	r22
     fac:	7f 93       	push	r23
     fae:	8f 93       	push	r24
     fb0:	9f 93       	push	r25
     fb2:	af 93       	push	r26
     fb4:	bf 93       	push	r27
     fb6:	ef 93       	push	r30
     fb8:	ff 93       	push	r31
     fba:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
     fbe:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
     fc2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fc6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fca:	c9 01       	movw	r24, r18
     fcc:	03 2e       	mov	r0, r19
     fce:	00 0c       	add	r0, r0
     fd0:	aa 0b       	sbc	r26, r26
     fd2:	bb 0b       	sbc	r27, r27
     fd4:	dc 01       	movw	r26, r24
     fd6:	99 27       	eor	r25, r25
     fd8:	88 27       	eor	r24, r24
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	84 2b       	or	r24, r20
     fe0:	95 2b       	or	r25, r21
     fe2:	a6 2b       	or	r26, r22
     fe4:	b7 2b       	or	r27, r23
     fe6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
     fea:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
     fee:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
     ff2:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
     ff6:	b0 9b       	sbis	0x16, 0	; 22
     ff8:	1b c0       	rjmp	.+54     	; 0x1030 <__vector_17+0x98>
     ffa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ffe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1002:	c9 01       	movw	r24, r18
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	09 2e       	mov	r0, r25
    1008:	00 0c       	add	r0, r0
    100a:	aa 0b       	sbc	r26, r26
    100c:	bb 0b       	sbc	r27, r27
    100e:	dc 01       	movw	r26, r24
    1010:	99 27       	eor	r25, r25
    1012:	88 27       	eor	r24, r24
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	84 2b       	or	r24, r20
    101a:	95 2b       	or	r25, r21
    101c:	a6 2b       	or	r26, r22
    101e:	b7 2b       	or	r27, r23
    1020:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    1024:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    1028:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    102c:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    1030:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0x18>
    1034:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0x19>
    1038:	30 97       	sbiw	r30, 0x00	; 0
    103a:	39 f0       	breq	.+14     	; 0x104a <__vector_17+0xb2>
    103c:	6c e0       	ldi	r22, 0x0C	; 12
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0x18>
    1044:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0x19>
    1048:	09 95       	icall
    104a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
    104e:	ff 91       	pop	r31
    1050:	ef 91       	pop	r30
    1052:	bf 91       	pop	r27
    1054:	af 91       	pop	r26
    1056:	9f 91       	pop	r25
    1058:	8f 91       	pop	r24
    105a:	7f 91       	pop	r23
    105c:	6f 91       	pop	r22
    105e:	5f 91       	pop	r21
    1060:	4f 91       	pop	r20
    1062:	3f 91       	pop	r19
    1064:	2f 91       	pop	r18
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	0f 90       	pop	r0
    106c:	1f 90       	pop	r1
    106e:	18 95       	reti

00001070 <__vector_18>:
    1070:	1f 92       	push	r1
    1072:	0f 92       	push	r0
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	0f 92       	push	r0
    1078:	11 24       	eor	r1, r1
    107a:	2f 93       	push	r18
    107c:	3f 93       	push	r19
    107e:	4f 93       	push	r20
    1080:	5f 93       	push	r21
    1082:	6f 93       	push	r22
    1084:	7f 93       	push	r23
    1086:	8f 93       	push	r24
    1088:	9f 93       	push	r25
    108a:	af 93       	push	r26
    108c:	bf 93       	push	r27
    108e:	ef 93       	push	r30
    1090:	ff 93       	push	r31
    1092:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
    1096:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
    109a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    109e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10a2:	c9 01       	movw	r24, r18
    10a4:	03 2e       	mov	r0, r19
    10a6:	00 0c       	add	r0, r0
    10a8:	aa 0b       	sbc	r26, r26
    10aa:	bb 0b       	sbc	r27, r27
    10ac:	dc 01       	movw	r26, r24
    10ae:	99 27       	eor	r25, r25
    10b0:	88 27       	eor	r24, r24
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	84 2b       	or	r24, r20
    10b8:	95 2b       	or	r25, r21
    10ba:	a6 2b       	or	r26, r22
    10bc:	b7 2b       	or	r27, r23
    10be:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    10c2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    10c6:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    10ca:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    10ce:	b0 9b       	sbis	0x16, 0	; 22
    10d0:	1b c0       	rjmp	.+54     	; 0x1108 <__vector_18+0x98>
    10d2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10d6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10da:	c9 01       	movw	r24, r18
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	09 2e       	mov	r0, r25
    10e0:	00 0c       	add	r0, r0
    10e2:	aa 0b       	sbc	r26, r26
    10e4:	bb 0b       	sbc	r27, r27
    10e6:	dc 01       	movw	r26, r24
    10e8:	99 27       	eor	r25, r25
    10ea:	88 27       	eor	r24, r24
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	84 2b       	or	r24, r20
    10f2:	95 2b       	or	r25, r21
    10f4:	a6 2b       	or	r26, r22
    10f6:	b7 2b       	or	r27, r23
    10f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    10fc:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    1100:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    1104:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    1108:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0x1a>
    110c:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0x1b>
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	39 f0       	breq	.+14     	; 0x1122 <__vector_18+0xb2>
    1114:	6d e0       	ldi	r22, 0x0D	; 13
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0x1a>
    111c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0x1b>
    1120:	09 95       	icall
    1122:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <__vector_19>:
    1148:	1f 92       	push	r1
    114a:	0f 92       	push	r0
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	0f 92       	push	r0
    1150:	11 24       	eor	r1, r1
    1152:	2f 93       	push	r18
    1154:	3f 93       	push	r19
    1156:	4f 93       	push	r20
    1158:	5f 93       	push	r21
    115a:	6f 93       	push	r22
    115c:	7f 93       	push	r23
    115e:	8f 93       	push	r24
    1160:	9f 93       	push	r25
    1162:	af 93       	push	r26
    1164:	bf 93       	push	r27
    1166:	ef 93       	push	r30
    1168:	ff 93       	push	r31
    116a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
    116e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
    1172:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1176:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    117a:	c9 01       	movw	r24, r18
    117c:	03 2e       	mov	r0, r19
    117e:	00 0c       	add	r0, r0
    1180:	aa 0b       	sbc	r26, r26
    1182:	bb 0b       	sbc	r27, r27
    1184:	dc 01       	movw	r26, r24
    1186:	99 27       	eor	r25, r25
    1188:	88 27       	eor	r24, r24
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	70 e0       	ldi	r23, 0x00	; 0
    118e:	84 2b       	or	r24, r20
    1190:	95 2b       	or	r25, r21
    1192:	a6 2b       	or	r26, r22
    1194:	b7 2b       	or	r27, r23
    1196:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    119a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    119e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    11a2:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    11a6:	b0 9b       	sbis	0x16, 0	; 22
    11a8:	1b c0       	rjmp	.+54     	; 0x11e0 <__vector_19+0x98>
    11aa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11ae:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11b2:	c9 01       	movw	r24, r18
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	09 2e       	mov	r0, r25
    11b8:	00 0c       	add	r0, r0
    11ba:	aa 0b       	sbc	r26, r26
    11bc:	bb 0b       	sbc	r27, r27
    11be:	dc 01       	movw	r26, r24
    11c0:	99 27       	eor	r25, r25
    11c2:	88 27       	eor	r24, r24
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	84 2b       	or	r24, r20
    11ca:	95 2b       	or	r25, r21
    11cc:	a6 2b       	or	r26, r22
    11ce:	b7 2b       	or	r27, r23
    11d0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    11d4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    11d8:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    11dc:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    11e0:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0x1c>
    11e4:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0x1d>
    11e8:	30 97       	sbiw	r30, 0x00	; 0
    11ea:	39 f0       	breq	.+14     	; 0x11fa <__vector_19+0xb2>
    11ec:	6e e0       	ldi	r22, 0x0E	; 14
    11ee:	70 e0       	ldi	r23, 0x00	; 0
    11f0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0x1c>
    11f4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0x1d>
    11f8:	09 95       	icall
    11fa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	bf 91       	pop	r27
    1204:	af 91       	pop	r26
    1206:	9f 91       	pop	r25
    1208:	8f 91       	pop	r24
    120a:	7f 91       	pop	r23
    120c:	6f 91       	pop	r22
    120e:	5f 91       	pop	r21
    1210:	4f 91       	pop	r20
    1212:	3f 91       	pop	r19
    1214:	2f 91       	pop	r18
    1216:	0f 90       	pop	r0
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	0f 90       	pop	r0
    121c:	1f 90       	pop	r1
    121e:	18 95       	reti

00001220 <__vector_20>:
    1220:	1f 92       	push	r1
    1222:	0f 92       	push	r0
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	0f 92       	push	r0
    1228:	11 24       	eor	r1, r1
    122a:	2f 93       	push	r18
    122c:	3f 93       	push	r19
    122e:	4f 93       	push	r20
    1230:	5f 93       	push	r21
    1232:	6f 93       	push	r22
    1234:	7f 93       	push	r23
    1236:	8f 93       	push	r24
    1238:	9f 93       	push	r25
    123a:	af 93       	push	r26
    123c:	bf 93       	push	r27
    123e:	ef 93       	push	r30
    1240:	ff 93       	push	r31
    1242:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
    1246:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
    124a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    124e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1252:	c9 01       	movw	r24, r18
    1254:	03 2e       	mov	r0, r19
    1256:	00 0c       	add	r0, r0
    1258:	aa 0b       	sbc	r26, r26
    125a:	bb 0b       	sbc	r27, r27
    125c:	dc 01       	movw	r26, r24
    125e:	99 27       	eor	r25, r25
    1260:	88 27       	eor	r24, r24
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	84 2b       	or	r24, r20
    1268:	95 2b       	or	r25, r21
    126a:	a6 2b       	or	r26, r22
    126c:	b7 2b       	or	r27, r23
    126e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    1272:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    1276:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    127a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    127e:	b0 9b       	sbis	0x16, 0	; 22
    1280:	1b c0       	rjmp	.+54     	; 0x12b8 <__vector_20+0x98>
    1282:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1286:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    128a:	c9 01       	movw	r24, r18
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	09 2e       	mov	r0, r25
    1290:	00 0c       	add	r0, r0
    1292:	aa 0b       	sbc	r26, r26
    1294:	bb 0b       	sbc	r27, r27
    1296:	dc 01       	movw	r26, r24
    1298:	99 27       	eor	r25, r25
    129a:	88 27       	eor	r24, r24
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	84 2b       	or	r24, r20
    12a2:	95 2b       	or	r25, r21
    12a4:	a6 2b       	or	r26, r22
    12a6:	b7 2b       	or	r27, r23
    12a8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    12ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    12b0:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    12b4:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    12b8:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x1e>
    12bc:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x1f>
    12c0:	30 97       	sbiw	r30, 0x00	; 0
    12c2:	39 f0       	breq	.+14     	; 0x12d2 <__vector_20+0xb2>
    12c4:	6f e0       	ldi	r22, 0x0F	; 15
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x1e>
    12cc:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x1f>
    12d0:	09 95       	icall
    12d2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
    12d6:	ff 91       	pop	r31
    12d8:	ef 91       	pop	r30
    12da:	bf 91       	pop	r27
    12dc:	af 91       	pop	r26
    12de:	9f 91       	pop	r25
    12e0:	8f 91       	pop	r24
    12e2:	7f 91       	pop	r23
    12e4:	6f 91       	pop	r22
    12e6:	5f 91       	pop	r21
    12e8:	4f 91       	pop	r20
    12ea:	3f 91       	pop	r19
    12ec:	2f 91       	pop	r18
    12ee:	0f 90       	pop	r0
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	0f 90       	pop	r0
    12f4:	1f 90       	pop	r1
    12f6:	18 95       	reti

000012f8 <__vector_21>:
    12f8:	1f 92       	push	r1
    12fa:	0f 92       	push	r0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	0f 92       	push	r0
    1300:	11 24       	eor	r1, r1
    1302:	2f 93       	push	r18
    1304:	3f 93       	push	r19
    1306:	4f 93       	push	r20
    1308:	5f 93       	push	r21
    130a:	6f 93       	push	r22
    130c:	7f 93       	push	r23
    130e:	8f 93       	push	r24
    1310:	9f 93       	push	r25
    1312:	af 93       	push	r26
    1314:	bf 93       	push	r27
    1316:	ef 93       	push	r30
    1318:	ff 93       	push	r31
    131a:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
    131e:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
    1322:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1326:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    132a:	c9 01       	movw	r24, r18
    132c:	03 2e       	mov	r0, r19
    132e:	00 0c       	add	r0, r0
    1330:	aa 0b       	sbc	r26, r26
    1332:	bb 0b       	sbc	r27, r27
    1334:	dc 01       	movw	r26, r24
    1336:	99 27       	eor	r25, r25
    1338:	88 27       	eor	r24, r24
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	84 2b       	or	r24, r20
    1340:	95 2b       	or	r25, r21
    1342:	a6 2b       	or	r26, r22
    1344:	b7 2b       	or	r27, r23
    1346:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    134a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    134e:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    1352:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    1356:	b0 9b       	sbis	0x16, 0	; 22
    1358:	1b c0       	rjmp	.+54     	; 0x1390 <__vector_21+0x98>
    135a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    135e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1362:	c9 01       	movw	r24, r18
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	09 2e       	mov	r0, r25
    1368:	00 0c       	add	r0, r0
    136a:	aa 0b       	sbc	r26, r26
    136c:	bb 0b       	sbc	r27, r27
    136e:	dc 01       	movw	r26, r24
    1370:	99 27       	eor	r25, r25
    1372:	88 27       	eor	r24, r24
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	84 2b       	or	r24, r20
    137a:	95 2b       	or	r25, r21
    137c:	a6 2b       	or	r26, r22
    137e:	b7 2b       	or	r27, r23
    1380:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    1384:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    1388:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    138c:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    1390:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x20>
    1394:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x21>
    1398:	30 97       	sbiw	r30, 0x00	; 0
    139a:	39 f0       	breq	.+14     	; 0x13aa <__vector_21+0xb2>
    139c:	60 e1       	ldi	r22, 0x10	; 16
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x20>
    13a4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x21>
    13a8:	09 95       	icall
    13aa:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	0f 90       	pop	r0
    13cc:	1f 90       	pop	r1
    13ce:	18 95       	reti

000013d0 <__vector_22>:
    13d0:	1f 92       	push	r1
    13d2:	0f 92       	push	r0
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	0f 92       	push	r0
    13d8:	11 24       	eor	r1, r1
    13da:	2f 93       	push	r18
    13dc:	3f 93       	push	r19
    13de:	4f 93       	push	r20
    13e0:	5f 93       	push	r21
    13e2:	6f 93       	push	r22
    13e4:	7f 93       	push	r23
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
    13ee:	ef 93       	push	r30
    13f0:	ff 93       	push	r31
    13f2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <__data_end>
    13f6:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <__data_end+0x1>
    13fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    13fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1402:	c9 01       	movw	r24, r18
    1404:	03 2e       	mov	r0, r19
    1406:	00 0c       	add	r0, r0
    1408:	aa 0b       	sbc	r26, r26
    140a:	bb 0b       	sbc	r27, r27
    140c:	dc 01       	movw	r26, r24
    140e:	99 27       	eor	r25, r25
    1410:	88 27       	eor	r24, r24
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	84 2b       	or	r24, r20
    1418:	95 2b       	or	r25, r21
    141a:	a6 2b       	or	r26, r22
    141c:	b7 2b       	or	r27, r23
    141e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    1422:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    1426:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    142a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    142e:	b0 9b       	sbis	0x16, 0	; 22
    1430:	1b c0       	rjmp	.+54     	; 0x1468 <__vector_22+0x98>
    1432:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1436:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    143a:	c9 01       	movw	r24, r18
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	09 2e       	mov	r0, r25
    1440:	00 0c       	add	r0, r0
    1442:	aa 0b       	sbc	r26, r26
    1444:	bb 0b       	sbc	r27, r27
    1446:	dc 01       	movw	r26, r24
    1448:	99 27       	eor	r25, r25
    144a:	88 27       	eor	r24, r24
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	70 e0       	ldi	r23, 0x00	; 0
    1450:	84 2b       	or	r24, r20
    1452:	95 2b       	or	r25, r21
    1454:	a6 2b       	or	r26, r22
    1456:	b7 2b       	or	r27, r23
    1458:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <timestamp>
    145c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <timestamp+0x1>
    1460:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <timestamp+0x2>
    1464:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <timestamp+0x3>
    1468:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x22>
    146c:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x23>
    1470:	30 97       	sbiw	r30, 0x00	; 0
    1472:	39 f0       	breq	.+14     	; 0x1482 <__vector_22+0xb2>
    1474:	61 e1       	ldi	r22, 0x11	; 17
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x22>
    147c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x23>
    1480:	09 95       	icall
    1482:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
    1486:	ff 91       	pop	r31
    1488:	ef 91       	pop	r30
    148a:	bf 91       	pop	r27
    148c:	af 91       	pop	r26
    148e:	9f 91       	pop	r25
    1490:	8f 91       	pop	r24
    1492:	7f 91       	pop	r23
    1494:	6f 91       	pop	r22
    1496:	5f 91       	pop	r21
    1498:	4f 91       	pop	r20
    149a:	3f 91       	pop	r19
    149c:	2f 91       	pop	r18
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <__vector_9>:
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	2f 93       	push	r18
    14b4:	3f 93       	push	r19
    14b6:	4f 93       	push	r20
    14b8:	5f 93       	push	r21
    14ba:	6f 93       	push	r22
    14bc:	7f 93       	push	r23
    14be:	8f 93       	push	r24
    14c0:	9f 93       	push	r25
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
    14c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
    14ca:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
    14ce:	01 96       	adiw	r24, 0x01	; 1
    14d0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__data_end+0x1>
    14d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
    14d8:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <timerQ>
    14dc:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <timerQ+0x1>
    14e0:	30 97       	sbiw	r30, 0x00	; 0
    14e2:	39 f0       	breq	.+14     	; 0x14f2 <__vector_9+0x4a>
    14e4:	42 81       	ldd	r20, Z+2	; 0x02
    14e6:	53 81       	ldd	r21, Z+3	; 0x03
    14e8:	64 81       	ldd	r22, Z+4	; 0x04
    14ea:	75 81       	ldd	r23, Z+5	; 0x05
    14ec:	86 17       	cp	r24, r22
    14ee:	97 07       	cpc	r25, r23
    14f0:	a1 f0       	breq	.+40     	; 0x151a <__vector_9+0x72>
    14f2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    14f6:	8d 7f       	andi	r24, 0xFD	; 253
    14f8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	7f 91       	pop	r23
    1506:	6f 91       	pop	r22
    1508:	5f 91       	pop	r21
    150a:	4f 91       	pop	r20
    150c:	3f 91       	pop	r19
    150e:	2f 91       	pop	r18
    1510:	0f 90       	pop	r0
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	0f 90       	pop	r0
    1516:	1f 90       	pop	r1
    1518:	18 95       	reti
    151a:	ca 01       	movw	r24, r20
    151c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1520:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1524:	42 1b       	sub	r20, r18
    1526:	53 0b       	sbc	r21, r19
    1528:	41 30       	cpi	r20, 0x01	; 1
    152a:	51 05       	cpc	r21, r1
    152c:	51 f0       	breq	.+20     	; 0x1542 <__vector_9+0x9a>
    152e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1532:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1536:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    153a:	82 60       	ori	r24, 0x02	; 2
    153c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1540:	dd cf       	rjmp	.-70     	; 0x14fc <__vector_9+0x54>
    1542:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1546:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	f0 cf       	rjmp	.-32     	; 0x152e <__vector_9+0x86>

0000154e <__vector_7>:
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
    1558:	8f 92       	push	r8
    155a:	9f 92       	push	r9
    155c:	af 92       	push	r10
    155e:	bf 92       	push	r11
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	4f 93       	push	r20
    1572:	5f 93       	push	r21
    1574:	6f 93       	push	r22
    1576:	7f 93       	push	r23
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ef 93       	push	r30
    1586:	ff 93       	push	r31
    1588:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <__data_end>
    158c:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <__data_end+0x1>
    1590:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1594:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1598:	b0 99       	sbic	0x16, 0	; 22
    159a:	98 c0       	rjmp	.+304    	; 0x16cc <__vector_7+0x17e>
    159c:	47 01       	movw	r8, r14
    159e:	0f 2c       	mov	r0, r15
    15a0:	00 0c       	add	r0, r0
    15a2:	aa 08       	sbc	r10, r10
    15a4:	bb 08       	sbc	r11, r11
    15a6:	54 01       	movw	r10, r8
    15a8:	99 24       	eor	r9, r9
    15aa:	88 24       	eor	r8, r8
    15ac:	a0 e0       	ldi	r26, 0x00	; 0
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	88 2a       	or	r8, r24
    15b2:	99 2a       	or	r9, r25
    15b4:	aa 2a       	or	r10, r26
    15b6:	bb 2a       	or	r11, r27
    15b8:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <timerQ>
    15bc:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <timerQ+0x1>
    15c0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <msgQ>
    15c4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <msgQ+0x1>
    15c8:	20 97       	sbiw	r28, 0x00	; 0
    15ca:	09 f4       	brne	.+2      	; 0x15ce <__vector_7+0x80>
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <__vector_7+0xfe>
    15ce:	4a 81       	ldd	r20, Y+2	; 0x02
    15d0:	5b 81       	ldd	r21, Y+3	; 0x03
    15d2:	6c 81       	ldd	r22, Y+4	; 0x04
    15d4:	7d 81       	ldd	r23, Y+5	; 0x05
    15d6:	8a 01       	movw	r16, r20
    15d8:	9b 01       	movw	r18, r22
    15da:	08 19       	sub	r16, r8
    15dc:	19 09       	sbc	r17, r9
    15de:	2a 09       	sbc	r18, r10
    15e0:	3b 09       	sbc	r19, r11
    15e2:	10 16       	cp	r1, r16
    15e4:	11 06       	cpc	r1, r17
    15e6:	12 06       	cpc	r1, r18
    15e8:	13 06       	cpc	r1, r19
    15ea:	0c f4       	brge	.+2      	; 0x15ee <__vector_7+0xa0>
    15ec:	40 c0       	rjmp	.+128    	; 0x166e <__vector_7+0x120>
    15ee:	d8 80       	ld	r13, Y
    15f0:	c9 80       	ldd	r12, Y+1	; 0x01
    15f2:	00 97       	sbiw	r24, 0x00	; 0
    15f4:	b9 f1       	breq	.+110    	; 0x1664 <__vector_7+0x116>
    15f6:	0e 81       	ldd	r16, Y+6	; 0x06
    15f8:	1f 81       	ldd	r17, Y+7	; 0x07
    15fa:	28 85       	ldd	r18, Y+8	; 0x08
    15fc:	39 85       	ldd	r19, Y+9	; 0x09
    15fe:	fc 01       	movw	r30, r24
    1600:	46 81       	ldd	r20, Z+6	; 0x06
    1602:	57 81       	ldd	r21, Z+7	; 0x07
    1604:	60 85       	ldd	r22, Z+8	; 0x08
    1606:	71 85       	ldd	r23, Z+9	; 0x09
    1608:	04 17       	cp	r16, r20
    160a:	15 07       	cpc	r17, r21
    160c:	26 07       	cpc	r18, r22
    160e:	37 07       	cpc	r19, r23
    1610:	4c f1       	brlt	.+82     	; 0x1664 <__vector_7+0x116>
    1612:	dc 01       	movw	r26, r24
    1614:	0a c0       	rjmp	.+20     	; 0x162a <__vector_7+0xdc>
    1616:	46 81       	ldd	r20, Z+6	; 0x06
    1618:	57 81       	ldd	r21, Z+7	; 0x07
    161a:	60 85       	ldd	r22, Z+8	; 0x08
    161c:	71 85       	ldd	r23, Z+9	; 0x09
    161e:	04 17       	cp	r16, r20
    1620:	15 07       	cpc	r17, r21
    1622:	26 07       	cpc	r18, r22
    1624:	37 07       	cpc	r19, r23
    1626:	dc f0       	brlt	.+54     	; 0x165e <__vector_7+0x110>
    1628:	df 01       	movw	r26, r30
    162a:	ed 91       	ld	r30, X+
    162c:	fc 91       	ld	r31, X
    162e:	11 97       	sbiw	r26, 0x01	; 1
    1630:	30 97       	sbiw	r30, 0x00	; 0
    1632:	89 f7       	brne	.-30     	; 0x1616 <__vector_7+0xc8>
    1634:	19 82       	std	Y+1, r1	; 0x01
    1636:	18 82       	st	Y, r1
    1638:	cd 93       	st	X+, r28
    163a:	dc 93       	st	X, r29
    163c:	38 2f       	mov	r19, r24
    163e:	29 2f       	mov	r18, r25
    1640:	cd 2d       	mov	r28, r13
    1642:	dc 2d       	mov	r29, r12
    1644:	83 2f       	mov	r24, r19
    1646:	92 2f       	mov	r25, r18
    1648:	20 97       	sbiw	r28, 0x00	; 0
    164a:	09 f6       	brne	.-126    	; 0x15ce <__vector_7+0x80>
    164c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <timerQ+0x1>
    1650:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <timerQ>
    1654:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <msgQ+0x1>
    1658:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <msgQ>
    165c:	13 c0       	rjmp	.+38     	; 0x1684 <__vector_7+0x136>
    165e:	f9 83       	std	Y+1, r31	; 0x01
    1660:	e8 83       	st	Y, r30
    1662:	ea cf       	rjmp	.-44     	; 0x1638 <__vector_7+0xea>
    1664:	99 83       	std	Y+1, r25	; 0x01
    1666:	88 83       	st	Y, r24
    1668:	3c 2f       	mov	r19, r28
    166a:	2d 2f       	mov	r18, r29
    166c:	e9 cf       	rjmp	.-46     	; 0x1640 <__vector_7+0xf2>
    166e:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <timerQ+0x1>
    1672:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <timerQ>
    1676:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <msgQ+0x1>
    167a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <msgQ>
    167e:	e6 16       	cp	r14, r22
    1680:	f7 06       	cpc	r15, r23
    1682:	d9 f1       	breq	.+118    	; 0x16fa <__vector_7+0x1ac>
    1684:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1688:	8d 7f       	andi	r24, 0xFD	; 253
    168a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    168e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <schedule>
    1692:	ff 91       	pop	r31
    1694:	ef 91       	pop	r30
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	7f 91       	pop	r23
    16a4:	6f 91       	pop	r22
    16a6:	5f 91       	pop	r21
    16a8:	4f 91       	pop	r20
    16aa:	3f 91       	pop	r19
    16ac:	2f 91       	pop	r18
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	df 90       	pop	r13
    16b8:	cf 90       	pop	r12
    16ba:	bf 90       	pop	r11
    16bc:	af 90       	pop	r10
    16be:	9f 90       	pop	r9
    16c0:	8f 90       	pop	r8
    16c2:	0f 90       	pop	r0
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	0f 90       	pop	r0
    16c8:	1f 90       	pop	r1
    16ca:	18 95       	reti
    16cc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    16d0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    16d4:	47 01       	movw	r8, r14
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	88 1a       	sub	r8, r24
    16da:	98 0a       	sbc	r9, r24
    16dc:	09 2c       	mov	r0, r9
    16de:	00 0c       	add	r0, r0
    16e0:	aa 08       	sbc	r10, r10
    16e2:	bb 08       	sbc	r11, r11
    16e4:	d4 01       	movw	r26, r8
    16e6:	99 27       	eor	r25, r25
    16e8:	88 27       	eor	r24, r24
    16ea:	49 01       	movw	r8, r18
    16ec:	a1 2c       	mov	r10, r1
    16ee:	b1 2c       	mov	r11, r1
    16f0:	88 2a       	or	r8, r24
    16f2:	99 2a       	or	r9, r25
    16f4:	aa 2a       	or	r10, r26
    16f6:	bb 2a       	or	r11, r27
    16f8:	5f cf       	rjmp	.-322    	; 0x15b8 <__vector_7+0x6a>
    16fa:	ca 01       	movw	r24, r20
    16fc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1700:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1704:	42 1b       	sub	r20, r18
    1706:	53 0b       	sbc	r21, r19
    1708:	41 30       	cpi	r20, 0x01	; 1
    170a:	51 05       	cpc	r21, r1
    170c:	51 f0       	breq	.+20     	; 0x1722 <__vector_7+0x1d4>
    170e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1712:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1716:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    171a:	82 60       	ori	r24, 0x02	; 2
    171c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1720:	b6 cf       	rjmp	.-148    	; 0x168e <__vector_7+0x140>
    1722:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1726:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    172a:	01 96       	adiw	r24, 0x01	; 1
    172c:	f0 cf       	rjmp	.-32     	; 0x170e <__vector_7+0x1c0>

0000172e <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    172e:	42 31       	cpi	r20, 0x12	; 18
    1730:	b8 f4       	brcc	.+46     	; 0x1760 <install+0x32>
        char status;
        DISABLE(status);
    1732:	2f b7       	in	r18, 0x3f	; 63
    1734:	f8 94       	cli
        otable[i] = obj;
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	44 0f       	add	r20, r20
    173a:	55 1f       	adc	r21, r21
    173c:	fa 01       	movw	r30, r20
    173e:	e8 5e       	subi	r30, 0xE8	; 232
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	91 83       	std	Z+1, r25	; 0x01
    1744:	80 83       	st	Z, r24
        mtable[i] = m;
    1746:	fa 01       	movw	r30, r20
    1748:	e0 55       	subi	r30, 0x50	; 80
    174a:	fe 4f       	sbci	r31, 0xFE	; 254
    174c:	71 83       	std	Z+1, r23	; 0x01
    174e:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1750:	41 e0       	ldi	r20, 0x01	; 1
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	fc 01       	movw	r30, r24
    1756:	53 83       	std	Z+3, r21	; 0x03
    1758:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    175a:	27 ff       	sbrs	r18, 7
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <install+0x32>
    175e:	78 94       	sei
    1760:	08 95       	ret

00001762 <__divmodsi4>:
    1762:	05 2e       	mov	r0, r21
    1764:	97 fb       	bst	r25, 7
    1766:	1e f4       	brtc	.+6      	; 0x176e <__divmodsi4+0xc>
    1768:	00 94       	com	r0
    176a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__negsi2>
    176e:	57 fd       	sbrc	r21, 7
    1770:	07 d0       	rcall	.+14     	; 0x1780 <__divmodsi4_neg2>
    1772:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <__udivmodsi4>
    1776:	07 fc       	sbrc	r0, 7
    1778:	03 d0       	rcall	.+6      	; 0x1780 <__divmodsi4_neg2>
    177a:	4e f4       	brtc	.+18     	; 0x178e <__divmodsi4_exit>
    177c:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__negsi2>

00001780 <__divmodsi4_neg2>:
    1780:	50 95       	com	r21
    1782:	40 95       	com	r20
    1784:	30 95       	com	r19
    1786:	21 95       	neg	r18
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	4f 4f       	sbci	r20, 0xFF	; 255
    178c:	5f 4f       	sbci	r21, 0xFF	; 255

0000178e <__divmodsi4_exit>:
    178e:	08 95       	ret

00001790 <__negsi2>:
    1790:	90 95       	com	r25
    1792:	80 95       	com	r24
    1794:	70 95       	com	r23
    1796:	61 95       	neg	r22
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	08 95       	ret

000017a0 <__tablejump2__>:
    17a0:	ee 0f       	add	r30, r30
    17a2:	ff 1f       	adc	r31, r31
    17a4:	05 90       	lpm	r0, Z+
    17a6:	f4 91       	lpm	r31, Z
    17a8:	e0 2d       	mov	r30, r0
    17aa:	09 94       	ijmp

000017ac <__udivmodsi4>:
    17ac:	a1 e2       	ldi	r26, 0x21	; 33
    17ae:	1a 2e       	mov	r1, r26
    17b0:	aa 1b       	sub	r26, r26
    17b2:	bb 1b       	sub	r27, r27
    17b4:	fd 01       	movw	r30, r26
    17b6:	0d c0       	rjmp	.+26     	; 0x17d2 <__udivmodsi4_ep>

000017b8 <__udivmodsi4_loop>:
    17b8:	aa 1f       	adc	r26, r26
    17ba:	bb 1f       	adc	r27, r27
    17bc:	ee 1f       	adc	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	a2 17       	cp	r26, r18
    17c2:	b3 07       	cpc	r27, r19
    17c4:	e4 07       	cpc	r30, r20
    17c6:	f5 07       	cpc	r31, r21
    17c8:	20 f0       	brcs	.+8      	; 0x17d2 <__udivmodsi4_ep>
    17ca:	a2 1b       	sub	r26, r18
    17cc:	b3 0b       	sbc	r27, r19
    17ce:	e4 0b       	sbc	r30, r20
    17d0:	f5 0b       	sbc	r31, r21

000017d2 <__udivmodsi4_ep>:
    17d2:	66 1f       	adc	r22, r22
    17d4:	77 1f       	adc	r23, r23
    17d6:	88 1f       	adc	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	1a 94       	dec	r1
    17dc:	69 f7       	brne	.-38     	; 0x17b8 <__udivmodsi4_loop>
    17de:	60 95       	com	r22
    17e0:	70 95       	com	r23
    17e2:	80 95       	com	r24
    17e4:	90 95       	com	r25
    17e6:	9b 01       	movw	r18, r22
    17e8:	ac 01       	movw	r20, r24
    17ea:	bd 01       	movw	r22, r26
    17ec:	cf 01       	movw	r24, r30
    17ee:	08 95       	ret

000017f0 <setjmp>:
    17f0:	dc 01       	movw	r26, r24
    17f2:	2d 92       	st	X+, r2
    17f4:	3d 92       	st	X+, r3
    17f6:	4d 92       	st	X+, r4
    17f8:	5d 92       	st	X+, r5
    17fa:	6d 92       	st	X+, r6
    17fc:	7d 92       	st	X+, r7
    17fe:	8d 92       	st	X+, r8
    1800:	9d 92       	st	X+, r9
    1802:	ad 92       	st	X+, r10
    1804:	bd 92       	st	X+, r11
    1806:	cd 92       	st	X+, r12
    1808:	dd 92       	st	X+, r13
    180a:	ed 92       	st	X+, r14
    180c:	fd 92       	st	X+, r15
    180e:	0d 93       	st	X+, r16
    1810:	1d 93       	st	X+, r17
    1812:	cd 93       	st	X+, r28
    1814:	dd 93       	st	X+, r29
    1816:	ff 91       	pop	r31
    1818:	ef 91       	pop	r30
    181a:	8d b7       	in	r24, 0x3d	; 61
    181c:	8d 93       	st	X+, r24
    181e:	8e b7       	in	r24, 0x3e	; 62
    1820:	8d 93       	st	X+, r24
    1822:	8f b7       	in	r24, 0x3f	; 63
    1824:	8d 93       	st	X+, r24
    1826:	ed 93       	st	X+, r30
    1828:	fd 93       	st	X+, r31
    182a:	88 27       	eor	r24, r24
    182c:	99 27       	eor	r25, r25
    182e:	09 94       	ijmp

00001830 <longjmp>:
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	81 1d       	adc	r24, r1
    183a:	2d 90       	ld	r2, X+
    183c:	3d 90       	ld	r3, X+
    183e:	4d 90       	ld	r4, X+
    1840:	5d 90       	ld	r5, X+
    1842:	6d 90       	ld	r6, X+
    1844:	7d 90       	ld	r7, X+
    1846:	8d 90       	ld	r8, X+
    1848:	9d 90       	ld	r9, X+
    184a:	ad 90       	ld	r10, X+
    184c:	bd 90       	ld	r11, X+
    184e:	cd 90       	ld	r12, X+
    1850:	dd 90       	ld	r13, X+
    1852:	ed 90       	ld	r14, X+
    1854:	fd 90       	ld	r15, X+
    1856:	0d 91       	ld	r16, X+
    1858:	1d 91       	ld	r17, X+
    185a:	cd 91       	ld	r28, X+
    185c:	dd 91       	ld	r29, X+
    185e:	ed 91       	ld	r30, X+
    1860:	fd 91       	ld	r31, X+
    1862:	0d 90       	ld	r0, X+
    1864:	f8 94       	cli
    1866:	fe bf       	out	0x3e, r31	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	ed bf       	out	0x3d, r30	; 61
    186c:	ed 91       	ld	r30, X+
    186e:	fd 91       	ld	r31, X+
    1870:	09 94       	ijmp

00001872 <_exit>:
    1872:	f8 94       	cli

00001874 <__stop_program>:
    1874:	ff cf       	rjmp	.-2      	; 0x1874 <__stop_program>
